{"meta":{"title":"照葫芦画瓢","subtitle":null,"description":"求知若渴，虚心若愚","author":"ShSx","url":"http://yoursite.com"},"pages":[{"title":"标签","date":"2018-11-20T15:46:42.000Z","updated":"2018-11-20T15:49:07.863Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-11-20T15:49:56.000Z","updated":"2018-11-20T15:52:18.674Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-11-18T04:26:53.793Z","updated":"2018-11-18T04:26:53.793Z","comments":true,"path":"jianli.html","permalink":"http://yoursite.com/jianli.html","excerpt":"","text":"在线编辑简历模板 - 五百丁简历 文档将实时更新 默认 分享 导出 模块管理 更换模板 风格设置 简历投递 导入简历 我的简历 访问权限 \"公开\" 手机简历 简历评分：0分 想找份好工作？那得好好完善您的简历档案哦~ 模板编号：BG0019 关于简历评分 什么是简历评分？ 简历评分是根据简历的完整度、丰富度、内容质量等多个角度，结合行业标准，综合衡量出的一项代表简历竞争水平的分值。数据追踪表明：简历评分分值越高，在面试求职及后续的职业发展中通常更有优势，易获得更多面试机会及人脉资源。 提高评分的好处？ 留下好的第一印象 收到更多面试邀约 提高求职通过率 如何提高评分？ 一份拥有足够必要信息的简历就可以在投递中收获不错的效果了，但我们的非必选项及贴士都能在一定程度上帮您更好地展示自己的优点及特色，建议您根据自身实际情况参考填写哦！ 隐藏栏目标题 隐藏时间模块 隐藏描述模块 恢复初始样式恢复 删除当前模块删除 开始 结束 2001-2009 2008 一月二月三月四月 五月六月七月八月 九月十月十一月十二月 一月二月三月四月 五月六月七月八月 九月十月十一月十二月 &#xe8f9; 工作经历 2016.7-2017.9 &#xe8f9; 荣誉奖项 图标更换 缩起 缩起 颜色 字体：微软雅黑 宋体 微软雅黑 黑体 隶书 楷体 Arial Times Tahoma 字体大小：14 12 13 14 15 16 17 18 段距： 模块距离： 统一格式 适用于文字格式紊乱的情况 文字 简体繁体 主公，编辑其它简历前，请记得保存当前简历哦！ 取消切换简历 缩起 基本信息必填 求职意向 教育背景 工作经验 实习经验 志愿者经验 项目经历 自我评价 奖项荣誉 个人标签 技能特长 作品展示 二维码 封面 自荐信 添加其它模块 自定义模块 简历访问权限 所有人通过链接地址即可访问 密码访问仅能通过密码访问 确定 仅自己仅自己可以打开简历 缩起 你还没有保存任何简历哦 内容建议 查看实例 教育背景主要包含最基本的在校时间、学校名称、专业、学历，如有社团、班级、学生会等职位也可在简历上呈现，但一定要从具体工作的角度去展开描述，不要在无事实依据的情况下空谈能力，特别是领导力、战略能力，以免贻笑大方。 编辑基本信息 你的姓名 出生日期 选择年月 2014-2022 2008 一月二月三月四月 五月六月七月八月 九月十月十一月十二月 工作年限 选择工作年限 应届生 1年经验 2年经验 3年经验 4年经验 5年经验 6年经验 7年经验 8年经验 9年经验 10年经验 10年以上经验 头像设置 设置头像可见性 显示 隐藏 电话号码 手机号码格式错误，请重新输入 联系邮箱 邮箱格式错误，请重新输入 一句话描述 0/100 自定义字段 所在城市 选择城市 热门城市 安徽 湖南 云南 河北 江苏 吉林 山东 甘肃 福建 广东 湖北 浙江 海南 贵州 辽宁 青海 山西 江西 四川 河南 陕西 广西 宁夏 新疆 西藏 黑龙江 内蒙古 广州 深圳 北京 上海 杭州 成都 西安 南京 厦门 天津 重庆 武汉 香港 澳门 台湾 自定义 合肥 芜湖 蚌埠 淮南 马鞍山 淮北 铜陵 安庆 黄山 滁州 阜阳 宿州 六安 亳州 池州 宣城 长沙 株洲 湘潭 衡阳 邵阳 岳阳 常德 张家界 益阳 郴州 永州 怀化 娄底 湘西土家族苗族自治州 昆明 曲靖 玉溪 保山 昭通 丽江 普洱 临沧 楚雄彝族自治州 红河哈尼族彝族自治州 文山壮族苗族自治州 西双版纳傣族自治州 大理白族自治州 德宏傣族景颇族自治州 怒江傈僳族自治州 迪庆藏族自治州 石家庄 唐山 秦皇岛 邯郸 邢台 保定 张家口 承德 沧州 廊坊 衡水 南京 无锡 徐州 常州 苏州 南通 连云港 淮安 盐城 扬州 镇江 泰州 宿迁 长春 吉林 四平 辽源 通化 白山 松原 白城 延边朝鲜族自治州 济南 青岛 淄博 枣庄 东营 烟台 潍坊 济宁 泰安 威海 日照 莱芜 临沂 德州 聊城 滨州 菏泽 兰州 嘉峪关 金昌 白银 天水 武威 张掖 平凉 酒泉 庆阳 定西 陇南 临夏回族自治州 甘南藏族自治州 福州 厦门 莆田 三明 泉州 漳州 南平 龙岩 宁德 广州 韶关 深圳 珠海 汕头 佛山 江门 湛江 茂名 肇庆 惠州 梅州 汕尾 河源 阳江 清远 东莞 中山 潮州 揭阳 云浮 武汉 黄石 十堰 宜昌 襄阳 鄂州 荆门 孝感 荆州 黄冈 咸宁 随州 恩施土家族苗族自治州 仙桃 潜江 天门 杭州 宁波 温州 嘉兴 湖州 绍兴 金华 衢州 舟山 台州 丽水 海口 三亚 贵阳 六盘水 遵义 安顺 毕节地区 铜仁地区 黔西南布依族苗族自治州 黔东南苗族侗族自治州 黔南布依族苗族自治州 沈阳 大连 鞍山 抚顺 本溪 丹东 锦州 营口 阜新 辽阳 盘锦 铁岭 朝阳 葫芦岛 西宁 海东 海北 黄南 海南 果洛 玉树 海西 太原 大同 阳泉 长治 晋城 朔州 晋中 运城 忻州 临汾 吕梁 南昌 景德镇 萍乡 九江 新余 鹰潭 赣州 吉安 宜春 抚州 上饶 成都 自贡 攀枝花 泸州 德阳 绵阳 广元 遂宁 内江 乐山 南充 眉山 宜宾 广安 达州 雅安 巴中 资阳 阿坝藏族羌族自治州 甘孜藏族自治州 凉山彝族自治州 郑州 开封 洛阳 平顶山 安阳 鹤壁 新乡 焦作 濮阳 许昌 漯河 三门峡 南阳 商丘 信阳 周口 驻马店 济源 西安 铜川 宝鸡 咸阳 渭南 延安 汉中 榆林 安康 商洛 南宁 柳州 桂林 梧州 北海 防城港 钦州 贵港 玉林 百色 贺州 河池 来宾 崇左 银川 石嘴山 吴忠 固原 中卫 乌鲁木齐 克拉玛依 吐鲁番 哈密 昌吉 阿克苏 喀什 和田 伊犁 塔城 阿勒泰 石河子 库尔勒 拉萨 昌都 山南 日喀则 那曲 阿里 林芝 哈尔滨 齐齐哈尔 鸡西 鹤岗 双鸭山 大庆 伊春 佳木斯 七台河 牡丹江 黑河 绥化 大兴安岭地区 呼和浩特 包头 乌海 赤峰 通辽 鄂尔多斯 呼伦贝尔 巴彦淖尔 乌兰察布 兴安盟 锡林郭勒盟 阿拉善盟 展开选填项 以下内容无需全部填写，请选择重要内容展示 你的性别 男 女 最高学历 选择最高学历 初中及以下 高中 中技 中专 大专 本科 硕士 博士 MBA 你的民族 婚姻状况 选择婚姻状况 未婚 已婚 保密 政治面貌 选择政治面貌 中共党员 中共预备党员 共青团员 民主党派人士 无党派民主人士 普通公民 身高/体重 cm Kg 保存 取消 编辑求职意向 意向岗位 意向城市 选择意向城市 热门城市 安徽 湖南 云南 河北 江苏 吉林 山东 甘肃 福建 广东 湖北 浙江 海南 贵州 辽宁 青海 山西 江西 四川 河南 陕西 广西 宁夏 新疆 西藏 黑龙江 内蒙古 广州 深圳 北京 上海 杭州 成都 西安 南京 厦门 天津 重庆 武汉 香港 澳门 台湾 自定义 合肥 芜湖 蚌埠 淮南 马鞍山 淮北 铜陵 安庆 黄山 滁州 阜阳 宿州 六安 亳州 池州 宣城 长沙 株洲 湘潭 衡阳 邵阳 岳阳 常德 张家界 益阳 郴州 永州 怀化 娄底 湘西土家族苗族自治州 昆明 曲靖 玉溪 保山 昭通 丽江 普洱 临沧 楚雄彝族自治州 红河哈尼族彝族自治州 文山壮族苗族自治州 西双版纳傣族自治州 大理白族自治州 德宏傣族景颇族自治州 怒江傈僳族自治州 迪庆藏族自治州 石家庄 唐山 秦皇岛 邯郸 邢台 保定 张家口 承德 沧州 廊坊 衡水 南京 无锡 徐州 常州 苏州 南通 连云港 淮安 盐城 扬州 镇江 泰州 宿迁 长春 吉林 四平 辽源 通化 白山 松原 白城 延边朝鲜族自治州 济南 青岛 淄博 枣庄 东营 烟台 潍坊 济宁 泰安 威海 日照 莱芜 临沂 德州 聊城 滨州 菏泽 兰州 嘉峪关 金昌 白银 天水 武威 张掖 平凉 酒泉 庆阳 定西 陇南 临夏回族自治州 甘南藏族自治州 福州 厦门 莆田 三明 泉州 漳州 南平 龙岩 宁德 广州 韶关 深圳 珠海 汕头 佛山 江门 湛江 茂名 肇庆 惠州 梅州 汕尾 河源 阳江 清远 东莞 中山 潮州 揭阳 云浮 武汉 黄石 十堰 宜昌 襄阳 鄂州 荆门 孝感 荆州 黄冈 咸宁 随州 恩施土家族苗族自治州 仙桃 潜江 天门 杭州 宁波 温州 嘉兴 湖州 绍兴 金华 衢州 舟山 台州 丽水 海口 三亚 贵阳 六盘水 遵义 安顺 毕节地区 铜仁地区 黔西南布依族苗族自治州 黔东南苗族侗族自治州 黔南布依族苗族自治州 沈阳 大连 鞍山 抚顺 本溪 丹东 锦州 营口 阜新 辽阳 盘锦 铁岭 朝阳 葫芦岛 西宁 海东 海北 黄南 海南 果洛 玉树 海西 太原 大同 阳泉 长治 晋城 朔州 晋中 运城 忻州 临汾 吕梁 南昌 景德镇 萍乡 九江 新余 鹰潭 赣州 吉安 宜春 抚州 上饶 成都 自贡 攀枝花 泸州 德阳 绵阳 广元 遂宁 内江 乐山 南充 眉山 宜宾 广安 达州 雅安 巴中 资阳 阿坝藏族羌族自治州 甘孜藏族自治州 凉山彝族自治州 郑州 开封 洛阳 平顶山 安阳 鹤壁 新乡 焦作 濮阳 许昌 漯河 三门峡 南阳 商丘 信阳 周口 驻马店 济源 西安 铜川 宝鸡 咸阳 渭南 延安 汉中 榆林 安康 商洛 南宁 柳州 桂林 梧州 北海 防城港 钦州 贵港 玉林 百色 贺州 河池 来宾 崇左 银川 石嘴山 吴忠 固原 中卫 乌鲁木齐 克拉玛依 吐鲁番 哈密 昌吉 阿克苏 喀什 和田 伊犁 塔城 阿勒泰 石河子 拉萨 昌都 山南 日喀则 那曲 阿里 林芝 哈尔滨 齐齐哈尔 鸡西 鹤岗 双鸭山 大庆 伊春 佳木斯 七台河 牡丹江 黑河 绥化 大兴安岭地区 呼和浩特 包头 乌海 赤峰 通辽 鄂尔多斯 呼伦贝尔 巴彦淖尔 乌兰察布 兴安盟 锡林郭勒盟 阿拉善盟 入职时间 选择入职时间 随时到岗 1周内到岗 1个月内到岗 3个月内到岗 到岗时间另议 不填写 薪资要求 ~ 保存 取消 编辑技能特长 添加 根据您的职业推荐的技能 已添加的技能 （还可以添加10项技能） 保存取消 编辑个人标签 添加 常用标签推荐 已添加的标签 （还可以添加10个标签） 保存取消 编辑作品集 上传图片在线作品 上传图片 请上传jpg、png格式，500K以下图片作品集数量不能超过8个 0/50 www.example.com 这里是作品描述 0/50 保存取消 编辑头像 调整头像尺寸和位置 支持格式：jpg、png,图片大小：1M以内 上传头像 取消保存 编辑超链接 URL 保存取消 确定删除当前子模块吗？ 删除后子模块将无法恢复 不再提醒 确定取消 确定删除当前子模块的描述吗？ 删除后该描述将无法恢复 不再提醒 确定取消 确定删除当前模块吗？ 删除后你可以在右侧模块管理出恢复显示 不再提醒 确定取消 确定创建英文简历吗？ 当前简历我们将自动为你进行保存 确定取消 小丁正在卖力下载中... 已为你自动隐藏不适合在PDF显示的【留言模块】 不再提醒 简历导入 选择简历来源 前程无忧 智联 拉勾 复制已有简历 前程无忧简历导入：（智能解析上传文件，为你省去写简历的时间，仅支持html格式） 上传附件： 选择HTML文件 0% 如何获取前程无忧html格式的简历？ 登录 前程无忧， 进入【我的51Job】-【简历中心】，【预览】想要导出的简历，点击【导出】，选择格式为HTML保存在本地电脑上就可以了。还是不知道如何操作？我要看看详细教程。 导入简历 智联简历导入：（智能解析上传文件，为你省去写简历的时间，仅支持html格式） 上传附件： 选择HTML文件 0% 如何获取智联招聘html格式的简历？ 登录 智联招聘 首页， 进入【简历中心】打开想要导出的简历，找到【更多操作】-【导出】，选择格式为HTML保存在本地电脑上就可以了。还是不知道如何操作？我要看看详细教程。 导入简历 拉勾简历导入：（智能解析上传文件，为你省去写简历的时间，仅支持html格式） 上传附件： 选择HTML文件 0% 如何获取拉勾html格式的简历？ 登录 拉勾网，进入【我的简历】页面，点击【预览简历】，打开预览界面后在底部点击【下载简历 】按钮并选择HTML格式就可以了。还是不知道如何操作？我要看看详细教程。 导入简历 选择需要复制的简历： 您还未创建过简历 0% 此处是复制你在五百丁创建的在线简历，适合需要投递几家公司，内容做小小修改的你。 还是不知道如何操作？我要看看详细教程。 导入简历 简历导入失败 由于你选择的文件与账号不符，请重新导入。 重新导入 简历导入失败 超出最大创建简历数量，请删除部分简历或升级会员后继续 升级会员去删除 简历创建失败 超出最大创建简历数量，请删除部分简历或升级会员后继续 升级会员去删除 简历导入成功 恭喜你的简历导入成功，现在去编辑吧~ 立即编辑 简历导入成功 恭喜你的简历导入成功，请选择一份简历去编辑吧~ 立即编辑 恭喜，你的简历发布成功！ 我们同时为你生成了另外一种形态的档案，点击查看 手机简历 简历命名 亲，给简历起个名字吧 确定取消 请注意，当前处于预览状态，数据不会被保存，请登录后制作登录 诊断ing... 简历智能诊断 您的简历综合评分：80分 真是棒棒哒，但简历内容还可以更充实哦！ 重新诊断 调整中... 封面 &#xe69d; &#xe69d; &#xe69d; 自荐信 &#xe880; 头像 头像风格 &#xe681; 基本信息 &#xe614; &#xe607; &#xe612; &#xe60c; &#xe683; &#xe611;cm &#xe686; &#xe685; &#xe981; &#xe693; &#xe60a; &#xe611;kg &#xf192; 个人主页 &#xe64b; 社交账号 微信 QQ 知乎 微博 钉钉号 &#xe616; 技能特长 +技能特长 &#xe6a7; 个人标签 +个人标签 &#xe8af; 姓名 &#xe680; 求职意向 &#xe613; &#xe96e; &#xe60f; &#xe60d; &#xe60b; &#xe67c; 教育背景 &#xe67d; 工作经验 &#xe60e; 实习经验 &#xe684; 志愿者经历 &#xe697; 项目经验 &#xe682; 荣誉奖项 &#xe67e; 自我评价 &#xe610; 作品展示 +添加作品 &#xe8dd; 二维码 感谢您的阅读，扫一扫查看我的手机简历 if(typeof cvresume != \"undefined\"){ cvresume.main.resume_draw(542,0,5531940,''); cvresume.main.set_language(\"zh\"); cvresume.info.resumecontentid=0;//内容简历模板id cvresume.main.template_set({\"left\":[],\"top\":[{\"key\":\"resume_head\",\"isShow\":true},{\"key\":\"resume_name\",\"isShow\":true},{\"key\":\"base_info\",\"isShow\":true},{\"key\":\"base_home\",\"isShow\":true},{\"key\":\"base_social\",\"isShow\":true}],\"right\":[{\"key\":\"resume_job_preference\",\"isShow\":true},{\"key\":\"resume_edu\",\"isShow\":true},{\"key\":\"resume_work\",\"isShow\":true},{\"key\":\"resume_internship\",\"isShow\":false},{\"key\":\"resume_volunteer\",\"isShow\":false},{\"key\":\"resume_hobby\",\"isShow\":true},{\"key\":\"resume_project\",\"isShow\":false},{\"key\":\"resume_skill\",\"isShow\":true},{\"key\":\"resume_honor\",\"isShow\":false},{\"key\":\"resume_summary\",\"isShow\":true},{\"key\":\"resume_portfolio\",\"isShow\":false},{\"key\":\"resume_recoment\",\"isShow\":false},{\"key\":\"resume_qrcode\",\"isShow\":false}],\"bottom\":[]},0); } // 对应简历模板的个人标签、块距生效js代码（只应用在文档简历） var _mobans_v620 = [\"WM0008\",\"JM0289\",\"MR0031\",\"MR0029\"]; if($.inArray(\"BG0019\", _mobans_v620) != -1){//当前模板块距调节无意义 //隐藏块距功能 $(\"#setStyleModal\").find(\".fgsz-modalmargin\").addClass(\"hidden\"); } 智能诊断 通过AI算法为你的简历进行诊断 诊断 专家点评 各行业资深HR一对一指导简历 咨询 贴士 ● 简历上需要放照片吗？ 此为非必选项，但如果放上去的话请务必让它成为加分项，毕竟这个看脸的世界越来越没有道理可言了，如果翻遍电脑和手机都没有找到一张可以称得上有气质的照片，那还是别放了。 ● 照片有什么标准规范？ 建议使用1-6个月的近期免冠照片，男性请至少干净整洁，不要显得油腻，女生可化淡妆，正常的生活/工作照也可，表情动作大方自然，背景清新简洁的正脸半身照为佳 ● 简历必填的基本信息 姓名/所在城市/电话号码/联系邮箱 &#8730; 姓名 重要信息一定要写清楚，错误示范：张先生/李女士 如果有常用英文名，可以在中文名后面写在括号里，如：李娜（Abby） 没有常用英文名的话，则不建议专门为了工作而取名，否则面试时对方喊你却没有反应，可能会留下负面印象。 &#8730; 所在城市 如目前所处城市跟意向工作城市有出入的话，会影响HR的面试邀约决策，为了提升双方沟通效率，建议填写，如往来意向城市很方便或短期内会搬过去居住，注明即可。 &#8730; 电话号码 建议写成易于拨打的形式，如：185-5555-5555 如果是英文简历，则建议加上区号，如：+86-10-12308 &#8730; 联系邮箱 国内求职推荐使用@163/@sina/@qq等主流邮箱，国外或外企求职推荐使用@gmail等邮箱（qq邮箱很无辜，不要有偏见）； 注意检查邮箱的显示名称，火星文、昵称、出生日期等会显得不够专业，建议使用的“名字”或“名字+当前求职年份”来命名。 （如：lina_Abby@gmail.com，lina2017@163.com） ● 求职意向要注意哪些规范？ 如四大、国有银行等在招聘信息中不分具体职能部门的话，可以不写求职意向。 如需要填写求职意向，则建议一份简历只针对一个意向岗位。 错误示范：过于宽泛 如：意向岗位：客服/行政/行政/后勤/HR 注意：多个意向岗位出现在一份简历中，没有针对性，会给HR一个信息：这个求职者的职业规划十分混乱 推荐写法：精准的职位名称/行业+职位名称 如： 网易游戏_泛娱乐运营策划 人事专员/人力资源相关岗位 食品领域销售类岗位 机械行业商务谈判岗 注意：求职意向是整张简历的核心，千万不要觉得面对不同企业和岗位，改个求职意向就可以海投了，求职意向和简历内容一定要相互呼应，才能最好的展现自己的岗位匹配度。 ● 工作经验的推荐写法？ 2017.04-至今 韩领网络科技（上海）有限公司（Coupang China） Java软件开发工程师 公司简介：Coupang是一家韩国大型的电子商务公司，也是世界上增长最快的电子商务公司。Coupang拥有“韩国亚马逊”之称，其在韩国本土的地位类似中国国内的“京东”。 ● 根据开发进度和任务分配，完成相应模块软件的设计、开发、编程任务； ● 进行程序单元、功能的测试，查出软件存在的缺陷并保证其质量； ● 按计划完成量化的工作要求，并能独立处理和解决所负责的任务。 项目：xxxxxx service 开发技术： RabbitMQ/mysql/Spring/redis(版本一) 开发技术： Kafka/mysql/Spring/redis/multi-thread&concurrency(版本二) 注意：若所在公司较为知名，可对公司规模等信息加以介绍 ● 简历上需要放照片吗？ 此为非必选项，但如果放上去的话请务必让它成为加分项，毕竟这个看脸的世界越来越没有道理可言了，如果翻遍电脑和手机都没有找到一张可以称得上有气质的照片，那还是别放了。 ● 照片有什么标准规范？ 建议使用1-6个月的近期免冠照片，男性请至少干净整洁，不要显得油腻，女生可化淡妆，正常的生活/工作照也可，表情动作大方自然，背景清新简洁的正脸半身照为佳 ● 错误示范 N年前的老照片 卖萌自拍照 旅游风景照 大头贴 多人合影 对方未要求时使用全身照或非正面照 浓妆 卡通形象等非本人照 与本人真实相貌差距过大 ● 必填信息 姓名/所在城市/电话号码/联系邮箱 &#8730; 姓名 重要信息一定要写清楚，错误示范：张先生/李女士 如果有常用英文名，可以在中文名后面写在括号里，如：李娜（Abby） 没有常用英文名的话，则不建议专门为了工作而取名，否则面试时对方喊你却没有反应，可能会留下负面印象。 &#8730; 所在城市 如目前所处城市跟意向工作城市有出入的话，会影响HR的面试邀约决策，为了提升双方沟通效率，建议填写，如往来意向城市很方便或短期内会搬过去居住，注明即可。 &#8730; 电话号码 建议写成易于拨打的形式，如：185-5555-5555 如果是英文简历，则建议加上区号，如：+86-10-12308 &#8730; 联系邮箱 国内求职推荐使用@163/@sina/@qq等主流邮箱，国外或外企求职推荐使用@gmail等邮箱（qq邮箱很无辜，不要有偏见）； 注意检查邮箱的显示名称，火星文、昵称、出生日期等会显得不够专业，建议使用的“名字”或“名字+当前求职年份”来命名。 （如：lina_Abby@gmail.com，lina2017@163.com） ● 一句话描述怎么写？ 用一句话陈述你的求职意向及自身优势，如“8年淘宝运营老鸟”、“10w+微信文章撰写经验” ● 其他字段都必须写么？ 视情况而定，如官方招聘信息中有明确提到相关要求，则建议对相关项如实填写。如：要求工作经验5年；仅限党员；身高不得低于168cm；少数民族优先等。 如职位描述(Job Description)中没有明确要求，则不建议填写多余的基本信息，过多的冗余信息会增加HR阅读简历的负担，给人不专业的感觉。 设计师或技术类人员建议添加个人主页，更好的展示自己。 如： 技术博客：https://pages.github.com/ Github：https://github.com/geek 站酷、UI中国、花瓣等 PS.不要放非本人做的作品，如你只是个打杂的，结果把整个项目都放上去了…少点套路，世界会更美好 ● 填写意向岗位有什么规范？ 如四大、国有银行等在招聘信息中不分具体职能部门的话，可以不写求职意向。 如需要填写求职意向，则建议一份简历只针对一个意向岗位。 错误示范：过于宽泛 如：意向岗位：客服/行政/行政/后勤/HR 注意：多个意向岗位出现在一份简历中，没有针对性，会给HR一个信息：这个求职者的职业规划十分混乱 推荐写法：精准的职位名称/行业+职位名称 如： 网易游戏_泛娱乐运营策划 人事专员/人力资源相关岗位 食品领域销售类岗位 机械行业商务谈判岗 注意：求职意向是整张简历的核心，千万不要觉得面对不同企业和岗位，改个求职意向就可以海投了，求职意向和简历内容一定要相互呼应，才能最好的展现自己的岗位匹配度。 ● 职业类型 毕业了原则上不能再申请实习生的岗位， 实习只有在校生可以申请，有可能转正。 兼职可以是在校生也可以是职场人，是指在不脱离本职工作（或学习）的前提下，利用业余时间从事第二职业，以获得利益。 ● 意向工作城市 若某企业针对同一岗位在多个地区均设有招聘，那么意向城市就一定要写清楚，免得被调岗后又不愿意前往。 写明意向城市也能表明自己在投递简历前对目标企业有了一定了解，且表现了自己强烈的求职意愿。 ● 入职时间 离职前，试用期员工须提前3天告知企业，正式员工则需提前一个月告知，求职者根据自身情况如实填写即可。 面试官会根据岗位的实际用人情况合理参考求职者的到岗时间，相比此项，工作经验更重要。 ● 关于薪资要求 期待薪资多少，怎么回答才好？ 面试时关于薪资问题怎么回答？ ● 教育背景 此项为非必选项，大部分情况下建议填写 注意：工作年限较多或成绩自认不够优异，则可以直接将教育背景清晰罗列后，重点丰富其他模块 必填信息： 教育经历起止日期/学校名称/专业名称/学位 可填信息：成绩排名/主修课程/辅修课程 注意： 尽量简洁，突出重点 成绩优异的话建议写上GPA及排名等信息 主修课程只写与申请岗位相关的即可，相关性强的写在前面 未毕业在校生的教育经历结束日期应填写预计毕业年月 ● GPA怎么算？ 可以参考 College Board 的网站How to Convert Your GPA to a 4.0 Scale，了解美国最权威的机构 College Board（美国大学理事会）是如何换算 GPA 的。 关于GPA的常见说法： 文科/文理学院的 GPA 在 3.6 以上属于比较“高”； 理科/工程学院的 GPA 在 3.2 以上属于比较“高”。 如果GPA不算特别高但在学院内排名很高，可以括号注明，如：GPA:3.2/4.0(1/80) ● 推荐写法 2014.09-2018.06五百丁理工大学电气工程及其自动化（本科） GPA：3.72/4（专业前10%） GRE：324 主修课程：电力系统（暂态、稳态）分析、发电厂变电所电气设备、发电厂电气主系统、电力调度、变电站综合自动化、可编程控制器技术、电力系统规划等。 注意：SAT/ACT/GRE/GMAT/LSAT这类硬性入学考试成绩可列在教育背景处，托福/雅思等语言成绩则建议在其他模块单独描述。 ● 错误示范 2014.09-2018.06五百丁大学金融学（硕士） 主修课程：线性代数、高等数学、微观经济学、宏观经济学、会计学、统计学、财政学、计量经济学、金融学、金融法、保险学、金融工程学、金融经济学、证券投资学、期货与期权、金融数学、风险投资专题、固定收益证券等。 注意：未说明本科学校及专业情况，主修课程中罗列过多课程，且与岗位相关性不强的专业被放在了前面。 ● 工作经验 此项为非必选项，建议填写 可填信息： 工作起止日期/所在公司名称/职位/工作描述（侧重描述自己负责的工作）/工作成果 注意： 工作经验的时间采取倒叙形式，最近经历写在前面； 工作经验的描述与目标岗位的招聘要求尽量匹配，用词精准； 工作成果尽量以数据来呈现，突出个人成果以及做出的贡献； 描述尽量具体简洁。 可对企业进行简短介绍，如：XX行业第二大XX企业，核心产品包括XX / XX行业领军企业，拥有X个分公司和X名员工 / XX领域X轮创业公司，主要产品是XXX，拥有X用户 ● 用数据说话 如： 带领团队/作为核心人员 通过XX 提升X%/节省XX环节XX时间/将销售额提高X%； 通过XX数据分析公司XX问题，提出XX解决方案成功将XX从X提升至X； 带领X名队员/在XX的情况下/迅速找到XX解决方案； 比去年同期提高X%/较同期入职人员高出X倍/比以前团队效率高出X%。 注意：无法用数据表达的成绩说服力较弱，如“获得领导嘉奖/表扬”之类的成绩尽量不要写。 ● 如果不方便透露客户名或项目细节怎么办？ 如果所在行业有严格保密规定（通常投行、咨询、四大等乙方机构都有保护客户隐私的严格规定）可以在简历上大致描述该公司所处行业+项目规模， 如“某保险行业领军企业XX元债券发行”、“某新能源行业集团省级单位系统整体升级”、“某外资整车厂年审项目”等。 ● 在同一公司不同部门工作过怎么写？ 如果时间没有重叠，可以当做两段工作经历来写，不同职位不同部门。 ● 在同一公司相同部门升职过怎么写？ 通常会以最高职位来写，然后如有需要可以在子标题中描述哪一年升过职。 ● 学生工作经验 描述学生工作时应注重凸显与目标岗位招聘要求相匹配的能力，匹配度高的经验挑选2-3条即可； 讲故事+用数据说话：工作内容，做法，做了多少，结果（用数据说话）如实习经验及项目经验已足够证明能力且与目标岗位相匹配，校内学生工作经验可考虑不写。 ● 推荐写法1 2007.04-2011.12五百丁船舶公司经营部经理 ● 管理范围：全面负责公司业务方面的所有工作和本部门20余人的综合管理工作； ● 销售目标：对总经理制定的销售目标负责，实现年国外销售额1.5亿元； ● 市场工作：负责市场情况、竞争者情况的调研，负责展会布置、营销策划、媒体宣传等市场工作； ● 销售工作：负责具体的渠道开发、商务洽谈、客户维护、销售流程的管理； ● 团队管控：负责下属团队20余人的综合管理工作，包含员工培养、任务分解跟踪管理等； ● 其他业绩：开拓了印度孟加拉越南日本荷兰等多个渠道，为此产生了年均1亿多元的销售额； 做好客户维护工作，客户稳定率达90%。 ● 推荐写法2 2017.04-至今韩领网络科技（上海）有限公司（Coupang China）Java软件开发工程师 公司简介：Coupang是一家韩国大型的电子商务公司，也是世界上增长最快的电子商务公司。Coupang拥有“韩国亚马逊”之称，其在韩国本土的地位类似中国国内的“京东”。 ● 根据开发进度和任务分配，完成相应模块软件的设计、开发、编程任务； ● 进行程序单元、功能的测试，查出软件存在的缺陷并保证其质量； ● 按计划完成量化的工作要求，并能独立处理和解决所负责的任务。 项目：xxxxxx service 开发技术： RabbitMQ/mysql/Spring/redis(版本一) 开发技术： Kafka/mysql/Spring/redis/multi-thread&concurrency(版本二) 注意：若所在公司较为知名，可对公司规模等信息加以介绍 ● 学生工作经验示例 2014.9-2016.9校礼仪队/院文艺部副队/队长 工作描述： 1. 主抓院文艺部全面工作，负责整个学院活动的统筹规划，就活动的细则和程序等相关事宜进行沟通等活动的总体安排和联络； 2. 全面负责召集各系文艺部长工作会议，发掘、锻炼和培养文艺骨干； 3. 负责礼仪队员的日常管理、活动培训； 4. 安排校级院级演出活动、校内外各种比赛及颁奖任务； 5. 在学生中大力开展美育活动，提高学生的文艺鉴赏能力。 成果： 迎新周吸引超过50人报名参加礼仪队，负责学校各种晚会走秀、庆典、比赛、会议等，取得校领导及学生的肯定。 ● 实习经验 此项为非必选项，根据实际情况选择 可填信息： 实习起止日期/所在公司名称/职位/工作描述（侧重描述自己负责的工作）/实习成果 注意： 实习经验的时间采取倒叙形式，最近经历写在前面； 实习经验的描述与目标岗位的招聘要求尽量匹配，用词精准； 实习成果尽量以数据来呈现，突出个人成果以及做出的贡献； 描述尽量具体简洁。 ● 推荐写法1 2017.03-2017.05五百丁发展改革委员会行政审批科实习 ● 文案撰写：负责主任交办的各种文字拟稿工作； ● 公文签发：收发有关文件、信函、电报等；办理公文的登记编号、签发、分送工作。催办上级和公司限期办理的事项； ● 会议记录：做好会议记录、整理会议纪要和简报，了解会后的贯彻执行情况； ● 文档管理：整理并打印公司工作报告、总结、规划、计划、决议、通告等，协助主任审核、校对以公司名义签发的公文稿； ● 资料整理：负责公司大事记和有关资料的采集整理工作； ● 文件传阅: 负责公司领导的文件传阅，处理公司领导签批的文件、函电，转递单位和个人给公司领导的请示报告等。 ● 推荐写法2 2017.03-2017.05五百丁发展改革委员会行政审批科实习 S：五百丁自控(Wubaiding Controls)是X国《财富》百强企业之一,创立于18XX年,目前已成长为汽车内饰、设施效益、和动力方案方面的全球领导者。 T：主要作为实习生协助该公司Accounts Payable澳洲部门的财务日常工作事宜。 A： ● 协助财务部门建立并完善企业财务管理体系，对财务部门的日常管理、财务预算、资金运作等各项工作进行控制操作； ● 协助财务部门完成账务处理、内部核算、报表、税务等工作； ● 协助财务部门进行企业成本管理工作，进行成本预测、控制、核算、分析等工作； ● 及时做好会计凭证、账册、报表等财会资料的收集、汇编、归档等会计档案管理工作； ● 完成财务主管安排的其他工作。 R：学习和了解了公司的企业文化和制度流程等，锻炼了自己的独立分析解决问题能力和逻辑思维能力及数据分析能力，增强了团队沟通协作能力和服务意识及工作执行力，积累了实习工作经验。 ● 推荐写法3 2017.04-2017.06五百丁广播电视台新媒体部实习新媒体运营 职责： 1. 自媒体运营负责移动互联网自媒体平台（微信、微博、手机终端为主）的日常运营及推广工作；负责能够独立运营微信公众号，为粉丝策划与提供优质、有高度传播性的内容； 2. 文案撰写：负责策划并执行微信营销线日常活动及跟踪维护，根据项目撰写高质量、具有吸引力及广泛传播性的应用型文章。 3. 市场活动策划：协助市场经理策划市场宣传活动，与媒体沟通宣传的要素，进行品牌的宣传，增强品牌影响力。 业绩 ： 1. 撰写软文发布量达***篇，单篇文章流量平均超过****pv，其中****等 ，更是突破3000uv。专题*****制作数量过百，每月推出一期，平均流量过万。 2. 所负责相关产品微信公众号粉丝数****人，平均文章阅读数1000+，微博粉丝数****人。 ● 项目经验 此项为非必选项，根据实际情况选择 可填信息： 项目名称、项目时间、担任角色、项目描述、业绩成果 注意： 1.内容清晰，结果导向； 2.与目标申请岗位相结合，升华内容； 3.IT项目可包含运行的软硬件环境、开发工具及目标系统等； 4.可参考STAR法则来写： Situation：在什么样的背景下？ Task：面临什么样的目标任务？ Action：针对当时的情况，采用了什么方法？ Result：结果怎样，学习到了什么？ ● 用数据说话 如： 带领团队/作为核心人员 通过XX 提升X%/节省XX环节XX时间/将销售额提高X%； 通过XX数据分析公司XX问题，提出XX解决方案成功将XX从X提升至X； 带领X名队员/在XX的情况下/迅速找到XX解决方案； 比去年同期提高X%/较同期入职人员高出#倍/比以前团队效率高出X%。 注意：无法用数据表达的成绩说服力较弱，如“获得领导嘉奖/表扬”之类的成绩尽量不要写。 ● 如果不方便透露客户名或项目细节怎么办？ 如果所在行业有严格保密规定（通常投行、咨询、四大等乙方机构都有保护客户隐私的严格规定）可以在简历上大致描述该公司所处行业+项目规模， 如“某保险行业领军企业XX元债券发行”、“某新能源行业集团省级单位系统整体升级”、“某外资整车厂年审项目”等。 ● 推荐写法1 2017.02-2017.03五百丁汽车HD10平台ACC、LKA、AEB 展示核心人员 项目描述：此项目为在五百丁大学车辆测试场的一个展示项目，主要展示L2级别的自动驾驶功能整合，可以视为自适应巡航（ACC）、车道保持控制（LKA）和自动紧急制动（AEB）功能的组合。 项目实施：项目采用的平台为陕汽HD10平台牵引式卡车，ACC 和AEB部分传感器为毫米波雷达，LKA 感知部分由公司算法部门承担，单目摄像头+单卡车载电脑完成车道线识别。ACC 算法使用距离误差和速度误差加权得到期望速度，CC中采用二段PID控制器实现加速部分控制，制动与加速之间加入人工deadband以消除期望速度在零附近时的突然制动或加速。LKA 算法采用pure pursuit前馈+横摆角速度误差反馈控制器。 项目成果：整个部分均在车载原型机AD5454上编程完成。 ● 推荐写法2 2014.08-2014.12课程注册系统负责人 项目描述：此项目采用MVC设计模式，MySql数据库， PHP，HTML，CSS的技术上制作的一个动态课程注册系统。 项目职责：担任研发工程师，参与需求调研，项目可行性分析，技术可行性分析和需求分析 ，编写出实现各项功能的完整代码 ，参与软件开发和重大问题解决 ，负责产品的测试与bug跟踪。 项目业绩：实现学生可以通过网站查询并注册现有课程，并可移除已选课程或添加新课程的功能。 ● 错误示范 2016.09-2016.09电影购票系统 使用myeclipse进行编程，同时连接数据库mysql进行数据存储，修改及更新。当时市面上可供参考的文档很少，bug较多，经过不断完善，可以满足系统的日常使用，包括电影院、电影、放映表的增删改查和订单表的查询与删除等功能。之后xx出现且效果不错，便仿照它制作了相应的功能。 注意：内容描述没有条理，难以抓住重点，未能说清自己在项目中的角色及项目，仅客观陈述对应聘毫无帮助。 ● 志愿者经验 此项为非必选项，根据实际情况选择 如果你的工作经验略显单薄，那么志愿者经验则能够帮助你在有限的条件下丰富你的简历，使你距离名企更进一步。志愿者经验不能仅是陈述过程，更重要的是要提炼出自己从中得到了什么成长，为被服务人群做了哪些贡献，体现出你是一个富有爱心，关怀社会，影响社会的人。 现在许多高校会规定学生要至少做40-50小时的社区服务才可以毕业，有些学校甚至要求100+小时的community service，对这些学校的同学来说，志愿者经验的比重及价值也相对更高，尤其对于要申请国外大学的同学，这部分内容一定要认真对待。 ● 什么样的志愿者活动才是出色的志愿者活动呢？ 有的人认为，去不发达地区或不发达国家做支教或其他公益活动比在附近街区进行的支教或志愿活动要好，但其实这种看法是片面的。去那些更远更偏僻的地方虽然听起来更高大上，但和你在附近街区里做的事情都是差不多的。 出色的志愿者活动，是那些你坚持了很长时间，并且你的服务对所服务对象产生了一定影响力的，是有实际意义的志愿活动。 注意：用数据说话。 用数字罗列你志愿者的工作，让HR可以量化你的工作和能力。 如，整理了多少本图书； 做了多少字的整理报告； 连续一年每个周末都会前往XX社区养老院看望X位孤寡老人，为老人们做过……； 每个暑假都会前去XX学校做支教老师，由于当地教育资源比较匮乏，在支教期间坚持帮助学生练习英语口语，回学校后发起募捐，筹得X元，帮助XX学校学生获得了更好的教育资源。 ● 推荐写法 2016.07-2016.09五百丁关爱孤儿志愿者活动活动运营策划助理 项目描述：这是一场和七色花孤儿早期干预项目的家庭一起进行的公益活动，也是一次亲子同理心教育工作坊。 职责描述：参与活动整体策划及运营，与10个家庭进行持续3周的前期沟通；负责现场6家媒体的人员接待工作；活动后整理了X字的总结汇报。 ● 荣誉奖项 此项为非必选项，根据实际情况选择 可填信息： 荣誉证书、竞赛获奖证书、奖学金等 注意： 时间倒叙，与目标岗位相关性强的写在前面 可以用数据来体现奖项的含金量 只写有代表性的奖项即可，同年或同类别的奖项可进行适当合并 ● 推荐写法 2015-2016 获第七届大广赛全国平面一等奖、五百丁大学“创业策划大赛”三等奖 2014-2015 获特等专业奖学金（3/80） 2013-2015 获国家励志奖学金3次 ● 错误示范 2015.04 获三好学生称号 2016.04 获三好学生称号 2015.11 获优秀学生干部称号 2015.12 获文明寝室称号 2016.10 获班级XX摄影比赛三等奖 注意：荣誉奖项倒叙书写，避免简单堆砌，与目标岗位相关性不强或含金量不高的奖项可不写（如班级摄影奖、文明寝室称号等） ● 技能特长 此项为非必选项，根据实际情况选择 可填信息： 行业中需要的技能和各类证书，如 英语技能：CET，托福，雅思，口译证书，专八等行业相关证书等； 专业技能：计算机等级考试证书，JAVA，C++，j2ee，mysql，maven，git，ant等； 个人素质方面的软实力，如：演讲与口才，组织与协调，客户接待，商务谈判等。 注意： 如果目标岗位的招聘信息对技能证书有要求，一定要写。 ● 个人标签 此项为非必选项，根据实际情况选择 有特点、能够体现自身性格及能力与目标岗位相符的个人标签可以写。 ● 作品展示 此项为非必选项，根据实际情况选择 设计师或技术类人员建议添加个人主页，更好的展示自己。 如： 技术博客：https://pages.github.com/ Github：https://github.com/geek 站酷、UI中国、花瓣等 PS.不要放非本人做的作品，如你只是个打杂的，结果把整个项目都放上去了…还是真诚求职比较好 如果你还在探索职业不知道自己想做什么，那么作品集展现广度是很好的选择。但如果你已经确定了求职方向，那么作品集的内容一定要专业专业再专业，不相关的作品可以忽略不展示。 ● 作品集中可添加案例研究 在作品集中加入案例研究，因为单纯视觉效果很棒的作品并不能告诉面试官你能否解决问题。应该谈谈你的设计过程——尝试过什么解决方案，如何尝试的，弃用的方案及原因是什么？ 展示你解决问题的能力就能显示出你值得被雇佣的价值。 ● 自我评价 此项为非必选项，根据实际情况选择 篇幅不要太长，注意结合简历整体的美观度，如果真的有很多话要说，建议以求职信的形式附上。 （求职信是求职者向目标用人单位或单位领导人介绍自己的实际才能、表达自己就业愿望的一种书信，是简历之外的加分项，通常与简历一起投递。） 注意： 自我评价应做到突出自身符合目标岗位要求的“卖点”； 避免过多使用形容词，而应该通过数据及实例来对自身价值进行深化。 ● 推荐写法1 首先，解释一下自己为什么要来应聘这个职位，表示自己的强烈意愿； 然后，阐明一下你能为这家企业创造哪些价值； 最后，总结一下自己在过往工作中做了什么，用数据简略地展示自己的成绩，强调自己的工作能力。 ● 推荐写法2 ● 七年以上网络运维工作及管理经验，项目实操经验丰富，在运维管理和推动方面极具优势； ● 精通计算机网络建设与开发，熟练网络安全技术、路由器、交换机等配置； ● 熟悉主流应用系统的管理、运维、故障处理、容错、备份，负载均衡等技术； ● 对网络安全体系有深入理解，有网络安全事件的紧急处置经验和能力，对国家企业信息化建设有较深认识； ● 思想独立，独立解决问题能力强，能快速适应新的工作学习和生活环境，个人学习能力强； ● 性格开朗，善于沟通，有较强的组织及协调能力，具有很强的抗压能力，工作中可以独挡一面。 ● 推荐写法3 ● 在校有两年独立项目实战经验，培养了较强的独立分析及解决问题的能力，养成了良好而规范的编程习惯，在团队协作中建立起了良好的团队沟通协作能力及服务意识，逻辑思维缜密，执行力及抗压能力强。 ● 在GITHUB有一个高STAR的开源项目。熟悉web开发，熟炼使用springmvc、hessian、redis、RocketMq中间件等，熟悉jvm、多线程、rpc等，熟练使用maven、git，熟悉并能熟练使用Linux操作系统，熟练使用jQuery框架，曾经开发过jQuery插件，了解XX行业的相关知识。 ● 我乐观开朗，踏实努力， 善于有效沟通与团队合作，能够合理规划时间与协作分工，必要时能够发挥领导和决策，能够同时注重细节并顾及整体，具有应对解决随机问题的能力，是被公认的高效率可信赖的伙伴。 ● 我十分认同贵公司学习可以改变命运的历练，正是不断的学习才能使我在自己所热爱的的职业上的专业能力能够不断提升，使自己能够持续前进，如果能够加入贵公司，对我来说将是另一段学习的开始，希望能和公司一起成长。 ● 封面 此项为非必选项 简历封面应突出本人的基本信息尤其是联系方式。 作为外在形式，简历封面一定程度上可以折射出求职者的素养与喜好，建议设计类人员选择使用或自行设计。 ● 自荐信 此项为非必选项 自荐信是求职者向目标用人单位或单位领导人介绍自己的实际才能、表达自己就业愿望的一种书信，是简历之外的加分项，通常与简历一起投递。是申请人通过阐述申请动机、描述相关经历来说服HR提供面试机会的途径。 自荐信(cover letter)在面对外企求职时显得尤为重要，长度通常在200-400字左右。 结合目标岗位的招聘信息，用言简意赅的语句阐述清楚以下内容即可： 1.感兴趣的目标岗位 2.相关工作经历及相关能力 3.为什么申请该职位 4.为什么申请该公司 案例 更多案例>> 五百丁理工大学电气工程及其自动化（本科） GPA：3.72/4（专业前10%） GRE：324 主修课程：电力系统（暂态、稳态）分析、发电厂变电所电气设备、发电厂电气主系统、电力调度、变电站综合自动化、可编程控制器技术、电力系统规划等。 注意：SAT/ACT/GRE/GMAT/LSAT这类硬性入学考试成绩可列在教育背景处，托福/雅思等语言成绩则建议在其他模块单独描述。 应用此案例 五百丁科技公司Java软件开发工程师 根据开发进度和任务分配，完成相应模块软件的设计、开发、编程任务； 进行程序单元、功能的测试，查出软件存在的缺陷并保证其质量； 按计划完成量化的工作要求，并能独立处理和解决所负责的任务。 应用此案例 五百丁金融信息服务公司产品专员 ● 负责APP产品的需求分析、需求整理、产品功能设计和业务流程设计。 ● 负责和设计、开发团队配合，推动项目进度及产品上线前的测试验收工作。 ● 收集用户反馈，促进产品迭代优化。 成果描述：熟悉了互联网产品交互设计流程，提高了开发及项目管理能力，提高了团队组织和协调能力，合作共事交流能力增强。 应用此案例 五百丁网络科技公司课程注册系统负责人 项目描述：此项目采用MVC设计模式，MySql数据库， PHP，HTML，CSS的技术上制作的一个动态课程注册系统。 项目职责：担任研发工程师，参与需求调研，项目可行性分析，技术可行性分析和需求分析 ，编写出实现各项功能的完整代码 ，参与软件开发和重大问题解决 ，负责产品的测试与bug跟踪。 项目业绩：实现学生可以通过网站查询并注册现有课程，并可移除已选课程或添加新课程的功能。 应用此案例 五百丁子商务有限公司UI设计师 2006年所带高二（4）班获校“精神文明班级”； 2008年 参与《教材全析》撰稿； 2009年所带高三（2）班团支部荣获当年五四红旗团支部荣誉称号； 2010年所带高三（1）班荣获校“精神文明班级”； 2010年《高中英语实验班》撰稿； 2009年、2012年、2015年 参加广东省普通高考评卷工作。 应用此案例"}],"posts":[{"title":"eclipse启动耗时统计插件","slug":"eclipse启动耗时统计插件","date":"2018-12-06T12:51:47.000Z","updated":"2018-12-06T15:42:09.474Z","comments":true,"path":"2018/12/06/eclipse启动耗时统计插件/","link":"","permalink":"http://yoursite.com/2018/12/06/eclipse启动耗时统计插件/","excerpt":"","text":"前言：《深入理解java虚拟机》，Eclipse运行实战调优中使用。 1、首先我们要先创建一个插件工程。File-&gt;New-&gt;Project-&gt;Plug-in Development-&gt;Plug-in Project2.点击Next3.再点击Next，选择Hello，World Command4.点击finish，创建的目录结构为5.在工程的目录下，建个名为ShowTime的类该类需要继承IStartup接口，并实现earlyStartup()方法，代码如下：12345678910111213141516171819202122232425262728293031package com.shsx.showtime;import org.eclipse.jface.dialogs.MessageDialog;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.eclipse.ui.IStartup; /** * * 统计Eclipse启动耗时时间 * @author Shsx * */public class ShowTime implements IStartup&#123; @Override public void earlyStartup() &#123; // TODO Auto-generated method stub Display.getDefault().syncExec(new Runnable() &#123; public void run()&#123; //获取eclipse启动的时间 long eclipseStartTime = Long.parseLong(System.getProperty(\"eclipse.startTime\")); //获取系统当前的时间 long costTime = System.currentTimeMillis() - eclipseStartTime; Shell shell = Display.getDefault().getActiveShell(); String message = \"Eclipse启动耗时 \" + costTime + \"ms\"; MessageDialog.openInformation(shell, \"Information\", message); &#125; &#125;); &#125; &#125; 6.打开plugin.xml文件，用下面的代码替换，注意class中的路径是你ShowTime类的路径。1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;?eclipse version=&quot;3.4&quot;?&gt;&lt;plugin&gt; &lt;extension point=&quot;org.eclipse.ui.startup&quot;&gt; &lt;startup class=&quot;com.shsx.showtime.ShowTime&quot;/&gt; &lt;/extension&gt;&lt;/plugin&gt; 7、测试插件，右击你的工程，点击Run As-&gt;Eclipse Applicaption8、导出插件右击你的工程，选择 Export-&gt;Plug-in Development-&gt;Deployable plug-ins and fragments,点击next 在Directory中填写你要导出的路径，点击finish。导出之后是一个名为plugins的文件夹，将文件夹中的Jar包复制到eclipse/plugins目录下即可，再次启动eclipse就可以看到插件生效了。8、插件中文乱码bulid.properties文件后面加上javacDefaultEncoding.. = utf-8，完整文件如下1234567source.. = src/output.. = bin/bin.includes = plugin.xml,\\ META-INF/,\\ .,\\ icons/javacDefaultEncoding.. = utf-8","categories":[{"name":"eclipse插件","slug":"eclipse插件","permalink":"http://yoursite.com/categories/eclipse插件/"}],"tags":[{"name":"eclipse插件","slug":"eclipse插件","permalink":"http://yoursite.com/tags/eclipse插件/"}]},{"title":"springboot入门一","slug":"springboot入门一","date":"2018-12-06T02:27:07.000Z","updated":"2018-12-06T02:29:43.412Z","comments":true,"path":"2018/12/06/springboot入门一/","link":"","permalink":"http://yoursite.com/2018/12/06/springboot入门一/","excerpt":"","text":"进入https://start.spring.io/，选择maven工程，jdk 8，点击Generate Project，生成demo工程","categories":[{"name":"springboot","slug":"springboot","permalink":"http://yoursite.com/categories/springboot/"}],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://yoursite.com/tags/springboot/"}]},{"title":"2018-12-6-英文单词","slug":"2018-12-6-英文单词","date":"2018-12-06T01:28:53.000Z","updated":"2018-12-06T12:11:05.679Z","comments":true,"path":"2018/12/06/2018-12-6-英文单词/","link":"","permalink":"http://yoursite.com/2018/12/06/2018-12-6-英文单词/","excerpt":"","text":"parallel英 [ˈpærəlel] 美 [ˈpærəˌlɛl]adj.平行的;相同的，类似的;[电]并联的;[计]并行的adv.平行地，并列地n.平行线（面）;相似物;类比;纬线vt.使平行;与…媲美;与…相比;与…相似scavenge英 [ˈskævɪndʒ] 美 [ˈskævəndʒ]vt.&amp; vi.清除污物，打扫;（在废物中）寻觅;（动物）食腐肉serial英 [ˈsɪəriəl] 美 [ˈsɪriəl]adj.连续的;连载的;顺序排列的;分期偿付的n.连载小说;电视连续剧;定期刊物;[军]行军梯队proxy英 [ˈprɒksi] 美 [ˈprɑ:ksi]n.代理服务器;代表权;代理人，代替物;委托书vendor英[ˈvendə(r)]美[ˈvɛndɚ]n. 卖主; 摊贩，小贩; [贸易] 自动售货机; &lt;正式&gt;供应商;[例句]Remember, the estate agent is working for the vendor.记住，房地产代理商是为房地产卖方服务的。[其他] 复数：vendors","categories":[{"name":"英文","slug":"英文","permalink":"http://yoursite.com/categories/英文/"}],"tags":[{"name":"英文","slug":"英文","permalink":"http://yoursite.com/tags/英文/"}]},{"title":"内存分配和回收策略","slug":"内存分配和回收策略","date":"2018-12-05T12:16:26.000Z","updated":"2018-12-05T12:46:19.845Z","comments":true,"path":"2018/12/05/内存分配和回收策略/","link":"","permalink":"http://yoursite.com/2018/12/05/内存分配和回收策略/","excerpt":"","text":"前言：自动管理内存最终解决两个问题，给对象分配内存以及回收分配给对象的内存大方向来说：对象在堆上分配，主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，将按照线程优先在TLAB上分配。分配的规则不是百分之百固定。 对象优先在Eden分配大多数情况下，对象在新生代Eden分配，当Eden没有足够的空间进行分配时，虚拟机将发起一次MinorGC、新生代GC（Minor GC），老年代GC（Major GC / Full GC）,Full GC 会比MinorGC慢10倍。 大对象直接进入老年代参数 -XX:PretenureSizeThreshold 参数，令大于这个设置值的对象直接进入老年代。避免在Eden和两个Survivor之间大量的内存复制 长期存活的对象进入老年代虚拟机给每个对象定义一个对象年龄（Age）计数器。如果在Eden出生，并且经过第一次MinorGC 后仍然存活，并且在Survivor容纳的恶化，将被移到Survivor空间中，并且对象年龄设为1，对象在Survivor区每熬过一次Minor GC，年龄就增加1，当年龄到15时（默认），晋升到老年代。对象晋升老年代的年龄阈值参数为 -XX:MaxTenuringThreshold 来设置 动态的年龄判定虚拟机并不是永远要求对象的年龄必须达到15才能晋升老年代，如果Survivor空间相同年龄的对象大小总和大于Survivor的一半，年龄大于或等于该年龄的对象直接进入老年代 空间分配担保在发生Minor GC 之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的空间。如果条件成立，Minor GC是安全的。如果不成立，查看HandlepromotionFailure设置值是否允许担保失败如果允许，那么检查老年代最大可用的连续空间是否大于历次晋升到老年代的平均大小，如果大于，进行Minor GC，尽管是有风险的如果小于或者HandlepromotionFailure不允许，改为进行Full GC","categories":[{"name":"jvm","slug":"jvm","permalink":"http://yoursite.com/categories/jvm/"}],"tags":[{"name":"jvm","slug":"jvm","permalink":"http://yoursite.com/tags/jvm/"}]},{"title":"垃圾收集器","slug":"垃圾收集器","date":"2018-12-05T11:04:10.000Z","updated":"2018-12-05T12:10:02.179Z","comments":true,"path":"2018/12/05/垃圾收集器/","link":"","permalink":"http://yoursite.com/2018/12/05/垃圾收集器/","excerpt":"","text":"前言：垃圾收集算法是方法论，那么垃圾收集器就是具体的实现。直到今天为止，还没有最好的收集器出现，更没有万能的收集器，我们选择的是对具体应用最合适的收集器。 Serial收集器Serial收集器是最基本，发展历史最悠久的收集器在jdk1.3之前，是新生代收集的唯一选择它是一个单线程的收集器，不仅仅是使用一个cpu或者是一个线程更重要的是它进行垃圾收集时，必须暂停其他所有的工作，直到它收集结束“stop the world” 会带给用户不良的体验。所以从jdk1.3到jdk1.7，HotSpot虚拟机开发团队为了消除或者减少工作线程因内存回收而导致停顿的努力一直进行。从Serial到Parallel，再到Concurrent Mark Sweep（CMS）再到Garbage First（G1）越来越优秀，也越来越复杂。用户线程的停顿时间不断在缩短，但是仍然没有办法完全消除Serial收集器并不是老而无用Serial收集器在Client模式先的虚拟机是一个很好的选择，它没有线程交互的开销，可以专心做垃圾收集 ParNew收集器ParNew收集器其实是Serial收集器的多线程版本。它可以和CMS收集器配合工作在单核CPU并不一定比Serial收集器好，随着CPU数量的增加，性能是好于Serial收集器的 Parallel Scavenge收集器Parallel Scavenge收集器是一个新生代收集器，采用的复制算法，又是并行的多线程收集器CMS收集器关注的是尽可能的缩短垃圾收集时用户线程的停顿时间。Parallel Scavenge收集器的目标是达到一个可控的吞吐量（Throughput）吞吐量就是CPU运行用户代码的时间/CPU总消耗时间的比值即：吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)虚拟机总共运行100分钟，垃圾收集花掉1分钟，吞吐量就是99%Parallel Scavenge收集器有一个自适应调节策略 Serial Old收集器Serial Old收集器是Serial的老年代版本。同样是单线程收集器使用标记-整理算法两大用途：1：在JDK1.5之前，与Parallel Scavenge收集器搭配使用2：作为CMS收集器的后备方案在并发收集发生 Concurrent Mode Failure时使用 Parallel Old收集器是Parallel Scavenge收集器老年代收集版本多线程标记——整理算法jdk1.6提供，此之前Parallel Scavenge收集器一直处于尴尬位置 CMS 收集器CMS（Concurrent Mark Sweep）收集器是一种以获得最短回收停顿时间为目标的收集器基于标记-清除算法实现分为4步：初始标记并发标记重新标记并发清除 初始标记和重新标记仍需要”Stop the World”.最消耗时间的并发标记和并发清除是可以和用户线程一起工作的。CMS 是一款非常优秀的收集器，有点事并发收集和低停顿缺点：1.CMS收集器资源非常敏感2.CMS收集器无法处理浮动垃圾可能会出现Concurrent Mode Failure失败而导致另一次的Full GC.由于CMS并发清理阶段用户线程还在运行，伴随着程序运行自然还会有新的垃圾不断产生，这部分垃圾出现在标记过程之后，CMS无法再当次收集中处理掉他们，只好等到下一次GC时再清理掉，这部分垃圾就称为浮动垃圾3.CMS是一款基于标记-清除的垃圾回收器。会产生大量空间碎片 G1收集器G1收集器是当今收集器技术发展的最前沿的成果之一。G1是面向服务器端应用的垃圾收集器特点：1.并行与并发2.分代收集3.空间整合，与CMS不同，G1的实现是标记-整理算法4.可预测停顿G1将整个java堆划分为多个大小相等的独立区域（Region），虽然还保留新生代和老年代的概念但它们已经不是物理隔离了，它们都是一部分Region（不需要连续）的集合。G1运作的步骤初始标记并发标记最终回收筛选回收","categories":[{"name":"jvm","slug":"jvm","permalink":"http://yoursite.com/categories/jvm/"}],"tags":[{"name":"jvm","slug":"jvm","permalink":"http://yoursite.com/tags/jvm/"}]},{"title":"垃圾收集算法","slug":"垃圾收集算法","date":"2018-12-05T10:38:21.000Z","updated":"2018-12-05T11:03:20.821Z","comments":true,"path":"2018/12/05/垃圾收集算法/","link":"","permalink":"http://yoursite.com/2018/12/05/垃圾收集算法/","excerpt":"","text":"标记-清楚算法最基础的算法是”标记-清楚”（Mark-Sweep）算法。该算法分为标记和清除两个阶段1.标记出所有回收的对象2.标记完成后回收被标记的对象不足：1.效率问题，标记和清除这两个过程效率都不高2.空间问题，清除标记后会产生大量的不连续的内存碎片 复制算法复制为解决效率问题，将可用内存分为容量大小相等的两块，每次只使用其中一块，当一块用完后，将存活的对象复制到另一块上面，然后再把已使用的内存空间清掉。每次对都对整个半区进行内存回收内存分配时，移动堆顶指针，按顺序分配内存实现简单，运行高效代价：将原来的内存缩小的一半，大家有点高目前的商业虚拟机在内存分配上做了优化，还回收新生代分为了一块较大的Eden区，两块小的Survivor区，比例是8:1:1,当Survivor空间不够，有老年区分配担保 标记——整理算法复制算法在对象存活率比较高时，比较多的复制，会导致效率低下。老年带一般不采用复制算法。标记整理的标记过程和标记清除的一样，但是回收对象的时候，将所有的存活的对象都移动到一段，然后直接清掉边界以外的内存 分代收集算法当前的商业虚拟机都采用的分代收集算法。根据对象的存活周期不同，将内存划分为几块。一般将java划分为新生代和老年代新生代用的是复制算法，老年代用的标记-清楚或者标记-整理算法","categories":[{"name":"jvm","slug":"jvm","permalink":"http://yoursite.com/categories/jvm/"}],"tags":[{"name":"jvm","slug":"jvm","permalink":"http://yoursite.com/tags/jvm/"}]},{"title":"github使用指南","slug":"github使用指南","date":"2018-12-05T03:02:12.000Z","updated":"2018-12-05T06:24:06.445Z","comments":true,"path":"2018/12/05/github使用指南/","link":"","permalink":"http://yoursite.com/2018/12/05/github使用指南/","excerpt":"","text":"简介创建一个hello world工程在计算机编程中是一个悠久的历史传统。这是一个简单的练习，让你开始学习新的东西。让我们开始使用github吧！你将学会什么：创建和使用GitHub仓库启动和管理一个新的分支对文件进行更改，提交并且推送到github打开并合并一个请求 github是什么？github是用于版本控制和协作的代码托管平台。它可以让你和其他人一起从任何地方参与项目。本教程教您GitHub的基本知识，如存储库、分支、提交和拉请求。您将创建自己的Hello World存储库，并学习GitHub的Pull Request工作流，这是一种创建和审查代码的流行方法。 本教程不需要编程完成本教程，你需要一github.com帐户和互联网接入。你不需要知道如何编码，使用命令行，或安装Git的版本控制软件是一个内置的GitHub上）。提示：在单独的浏览器窗口（或选项卡）中打开这个指南，这样在完成本教程中的步骤时可以看到它。 第一步：创建存储库存储库通常用于组织单个项目。存储库可以包含文件夹和文件、图像、视频、电子表格和数据集——项目需要的任何内容。我们建议包括一个自述文件，或者一个包含您项目的信息的文件。GITHUB使您在创建新的存储库的同时添加以上信息是一件简单的事情。它还提供其他常见选项，如许可证文件。您的hello-world存储库可以是存储好的想法、资源、甚至与其他人共享和讨论事情的地方。 创建一个新的存储库1.点击右上角的+号，选择New repository.2.仓库的名字叫做hello-world3.填写项目简介4.选择初始仓库的时候是否生成 README文件点击Create repository. 第二步：创建一个分支分支可以在同一个库不同版本之间工作。未完成。。。。","categories":[{"name":"github","slug":"github","permalink":"http://yoursite.com/categories/github/"}],"tags":[{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"}]},{"title":"2018/12/5英文单词学习","slug":"2018-12-5英文单词学习","date":"2018-12-05T02:41:18.000Z","updated":"2018-12-05T06:27:03.416Z","comments":true,"path":"2018/12/05/2018-12-5英文单词学习/","link":"","permalink":"http://yoursite.com/2018/12/05/2018-12-5英文单词学习/","excerpt":"","text":"verify美[ˈvɛrəˌfaɪ] 英[ˈverɪfaɪ]vt. 核实; 证明; 判定;[例句]I verified the source from which I had that information我核实了我所获消息的来源。[其他] 第三人称单数：verifies 现在分词：verifying 过去式：verified 过去分词：verified How would you describe your level of programming experience?如何描述你的编程水平？Very experienced 非常有经验Somewhat experienced 有点经验Totally new to programming 新手hobbyist英 [ˈhɒbiɪst] 美 [ˈhɑ:biɪst]n.沉溺于某种癖好者，嗜某爱好成癖的人 profile英 [ˈprəʊfaɪl] 美 [ˈproʊfaɪl]n.侧面，半面;外形，轮廓;[航]翼型;人物简介vt.描…的轮廓;给…画侧面图;为（某人）写传略;[机]铣出…的轮廓 your profile 你的简介","categories":[{"name":"英文","slug":"英文","permalink":"http://yoursite.com/categories/英文/"}],"tags":[{"name":"英文","slug":"英文","permalink":"http://yoursite.com/tags/英文/"}]},{"title":"k8s培训","slug":"k8s培训","date":"2018-12-04T02:14:37.000Z","updated":"2018-12-04T03:13:26.310Z","comments":true,"path":"2018/12/04/k8s培训/","link":"","permalink":"http://yoursite.com/2018/12/04/k8s培训/","excerpt":"","text":"为什么要用k8srancher ，k8s，docker原生， k8s多master的安装kube-controller—manager 有很多controller，私有云搭建使用这个cloud-controller—manager 近期出现的版本，给云供应商来控制kube-apiserver 通信的接口，对内通信还有通过etcd 元数据存了那些信息kube-sheduler所有的数据的存储，通过kube-apiserver沟通kubeletkube-proxy1.k8s cluster 所有元数据都存在etcd cluter中2.所有元数据的存储都通过API server来实现的总结manager用来管理 k8s的常用概念架构与运维路线图ansibleansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、cfengine、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。ansible是基于模块工作的，本身没有批量部署的能力。真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架。主要包括：(1)、连接插件connection plugins：负责和被监控端实现通信；(2)、host inventory：指定操作的主机，是一个配置文件里面定义监控的主机；(3)、各种模块核心模块、command模块、自定义模块；(4)、借助于插件完成记录日志邮件等功能；(5)、playbook：剧本执行多个任务时，非必需可以让节点一次性运行多个任务。 k8s 架构——常用概念 只能在单个主机上运行，跨主机通讯需要使用多个端口映射2.pod 多个容器可以使用同一ip地址 网络flannelcalico4.coredns每个服务都是唯一的域名","categories":[{"name":"k8s","slug":"k8s","permalink":"http://yoursite.com/categories/k8s/"}],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://yoursite.com/tags/k8s/"}]},{"title":"对象已死？","slug":"垃圾收集器与内存分配策略","date":"2018-12-03T12:06:00.000Z","updated":"2018-12-05T12:15:32.594Z","comments":true,"path":"2018/12/03/垃圾收集器与内存分配策略/","link":"","permalink":"http://yoursite.com/2018/12/03/垃圾收集器与内存分配策略/","excerpt":"","text":"引用计数算法给对象添加一个引用计数器，每当一个地方引用的时候，计数器加1，引用失效，计数器减1，任何时刻，计数器为0，则则对象不可能在被使用。此算法的问题：难以解决相互引用问题。objA有一个属性引用了objB,objB有一个属性引用了objA，如果外界没有objA和objB的引用，则这两个对象就应该被回收。 可达性分析算法基本思路是通过一系列的称为”GC Roots”的对象作为起始点，从这些节点开始往下搜索，搜索走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连（称GC Roots 到这个对象不可达）时，则证明此对象不可用，可回收。java中，可作为GC Roots的对象包括以下几种：1.虚拟机栈（栈帧中的本地变量表）中引用的对象2.方法区中静态属性引用的对象3.方法区中常量引用的对象4.本地方法栈中JNI引用的对象 再谈引用JDK1.2以前，java的引用定义：如果reference类型的数据中存储的数据代表的是另一块数据内存的起始地址，就称为这块内存代表着一个引用。 JDK1.2之后，java对引用进行了扩充，强引用（Strong Reference）,软引用（Soft Reference），弱引用（Weak Reference），虚引用（Phantom Reference）4种，这4种强度依次减弱。 强引用强引用普遍存在，类似Object obj=new Object(),只要强引用还存在，垃圾回收器永远不会回收掉引用的对象。 软引用描述一些还有用带不是必须的对象。在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行二次回收。如果还没有足够的内存，再抛出异常。JDK1.2之后，提供了SoftReference类来实现软引用 弱引用弱引用也是用来描述非必须对象的，它比软引用更弱一些，被弱引用引用的对象只能生存到下次垃圾收集之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉直被弱引用关联的对象。JDK1.2之后，通过WeakReference类来实现弱引用。 虚引用虚引用称为幽灵引用或者幻影引用。它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响。也不能通过虚引用来取得一个对象实例。唯一的目的是对象被回收的时候可以收到一个系统通知。JDK1.2以后通过PhantomReference来实现虚引用 生存还是死亡在可达性分析算法中不可达的对象，必须经历两次标记的过程才会被回收。对象进行可达性分析后发现不可达，那它会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法或finalize()已经被虚拟机调用过，虚拟机将这两种情况视为”没必要执行”。如果对象被判定为有必要执行finalize(),则将会将该对象放入一个队列。单独起一个线程调用队列中的finalize()方法。","categories":[{"name":"jvm","slug":"jvm","permalink":"http://yoursite.com/categories/jvm/"}],"tags":[{"name":"jvm","slug":"jvm","permalink":"http://yoursite.com/tags/jvm/"}]},{"title":"java内存区域","slug":"java内存区域","date":"2018-12-03T10:53:24.000Z","updated":"2018-12-03T12:03:12.823Z","comments":true,"path":"2018/12/03/java内存区域/","link":"","permalink":"http://yoursite.com/2018/12/03/java内存区域/","excerpt":"","text":"运行时数据区域程序计数器线程私有 java虚拟机栈线程私有 本地方法栈线程私有 java堆线程公有 方法区存放被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据线程公有（又称为永久代）运行时常量池（Runtime Constant Pool）是方法去的一部分，用于存放编译器的各种字面量和符号引用。 直接内存直接内存（Direct Memory）不是虚拟机运行数据的一部分，也不是java虚拟机滚翻中定义的区域在JDK1.4中新加入的NIO（New Input/Output）,引入了一种基于通道与缓冲区的I/O方式，可以使用Native方式直接分配内存，然后通过一个存储在java堆中的DirectBuffer对象作为这块内存的的引用进行操作。为了提高性能，避免在Java对和Native堆中来回复制。直接内存不受java堆大小的限制，但是会受到本机内存大小的限制。 对象的创建new 指令之后，先检查后面的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用是否已经加载解析和初始化过如果没有，先执行子昂用的类加载过程。类加载检查通过后，虚拟机为新生的对象分配内存分配内存有三种方式指针碰撞（Bump the Pionter）所有用过的内存放在一边，空闲的放在一边，中间放一个指针作为分界点的指示器，分配内存的时候将指针向空闲区域移动空闲列表（Free List）虚拟机维护一个列表，记录那部分内存可用，那部分内存不可用，分配内存的时候找一块足够大的空间划分给对象实例本地线程缓存（Thread Local Allocation Buffer） 如果对象在虚拟中创建频繁，如何进行同步1.虚拟机采用CAS配上失败重试的方式保证更新操作的原子性2.把分配内存的操作按照线程进行划分不同的区域，每个线程在Java堆中先预先分配一小块内存称为本地线程缓存，当用完了TLAB，在进行同步锁定，可通过-XX:+/-useTLAB参数来设定 分配完内存后，虚拟机将分配到的内存初始化为零值（不包括对象头），这一步保证对象不进行初始化也可以使用 接下来，虚拟机要对对象头进行必要的设置，如 类的元数据信息，对象的哈希码，对象的GC分代年龄，是否启用偏向锁等 对象的内存布局对象在内存中的存储布局分为3中：1.对象头（Header）对象都存两部分一部分用于存储对象自身运行时数据，如哈希码（hashCode），GC分代年龄，锁状态标志，线程持有锁，偏向线程ID，偏向时间戳等这部分数据的长度在32位和64位虚拟机中大小分别为32和64.此区域会根据一些参数的启用来复用存储空间。另一部分是类型指针，通过指针可以确定对象是哪个实例，但并不是所有的虚拟机实现都必须在对象数据上保留类型指针2.实例数据（Instance Data）对象真正存储的有效信息，也就是各个字段的内容，包括父类的3.对其填充（Padding）没有特别的意义，仅仅起占位符的作用。HotSpotVM的自动管理内存系统要求对象的大小必须是8字节的整倍数 对象的访问定位1.句柄访问java堆划分出了一块内存作为句柄池，reference存储的是对象句柄池的地址，句柄池包含了对象实例数据（java堆）和类型数据（方法区）的地址2.直接指针reference存储的是对象的地址好处是速度快，Sun HotSpot 使用的是直接指针","categories":[{"name":"jvm","slug":"jvm","permalink":"http://yoursite.com/categories/jvm/"}],"tags":[{"name":"jvm","slug":"jvm","permalink":"http://yoursite.com/tags/jvm/"}]},{"title":"2018/12/3要做的事情清单","slug":"2018-12-3要做的事情清单","date":"2018-12-03T02:19:30.000Z","updated":"2018-12-03T11:05:39.766Z","comments":true,"path":"2018/12/03/2018-12-3要做的事情清单/","link":"","permalink":"http://yoursite.com/2018/12/03/2018-12-3要做的事情清单/","excerpt":"","text":"9:00-11：30 工作11.30-12:00 吃饭12:00-13：30 中间学习10个英文单词或英文语句，休息Guard well your thoughts when alone and your words when accompanied.独处守住心，群处守住嘴guard 英 [gɑ:d] 美 [gɑ:rd]n.警卫;狱吏，看守;护卫队;防护装置vt.看守;保卫，守护;加防护装置;谨慎使用vi.警卫;警惕 accompaniedv.陪同;陪伴( accompany的过去式和过去分词 );伴随…同时发生;伴奏 Courage isn’t having the strength to go on.It’s going on when you don’t have strength.勇气不是有力气坚持下去，而是即使没有力气依然能够坚持。 courage英 [ˈkʌrɪdʒ] 美 [ˈkɜ:rɪdʒ]n.勇气;胆量;魄力;肝胆 strength英 [streŋθ] 美 [strɛŋkθ, strɛŋθ, strɛnθ]n.力量;优点，长处;（光、声、色等的）力度;人力[数] going on 发生; 接近，快到Direct Memory 直接内存NIO New Input/Outputchannel 通道buffer 缓冲区 13：30-17:00 工作17：00-19:00 一天总结，看java虚拟机这本书，并写一篇博客","categories":[{"name":"清单","slug":"清单","permalink":"http://yoursite.com/categories/清单/"}],"tags":[{"name":"清单","slug":"清单","permalink":"http://yoursite.com/tags/清单/"}]},{"title":"java线程安全与锁优化","slug":"java线程安全与锁优化","date":"2018-11-30T10:31:25.000Z","updated":"2018-11-30T12:41:14.396Z","comments":true,"path":"2018/11/30/java线程安全与锁优化/","link":"","permalink":"http://yoursite.com/2018/11/30/java线程安全与锁优化/","excerpt":"","text":"线程安全的实现方法1.互斥同步互斥同步是是常见的一种并发正确性保障手段。同步是指在在多线程并发访问共享数据时，保证共享数据在同一时刻只被一个（或者是一些，使用信号量的时候）线程使用。互斥是实现同步的一种手段互斥的实现三种方式 临界区 互斥量 信号量 java 中最基本的互斥同步手段是使用synchronizedsynchronized被编译后，同步块前后会形成monitorenter和monitorexit这两个字节码指令，这两个指令都需要一个reference类型的参数来指定锁定和解锁的对象如果synchronized指定了对象参数，那就是这个对象的reference如果没有指定，根据修饰的是类方法还是实例方法类确定修饰的类方法：Class对象实例方法：对象实例 使用java.util.concurrent下的ReentrantLock（重入锁）ReentrantLock相对与synchronized的增强 等待可中断是指当持有锁的线程长时间不释放锁的时候，正在等待的线程可以选择放弃等待，去做其他的事情。 可实现公平锁是指多个线程在等待同一个锁的时候，必须按着申请锁的时间顺序依次获取锁。synchronized和ReentrantLock默认是非公平锁 锁可以绑定多个条件synchronized锁对象的wait(),notify(),notifyAll()方法可以实现一个隐含的条件。想要增加条件关联，必须增加锁。而ReentrantLock只需要new Condition()即可jdk1.5版本ReentrantLock的吞吐量是优于synchronized的jdk1.6做了优化，提倡在synchronized能实现的情况下，优先使用synchronized 2.非阻塞同步互斥同步主要是线程阻塞和唤醒所带来的性能问题，所有这种同步也成为阻塞同步从处理问题的方式来看，互斥同步属于一种悲观并发策略，总是认为只要不同步，就会出现问题另一种方式是基于冲突检测的乐观并发策略，假设没有冲突，先进行操作，如果没有其他线程争用共享数据，则操作成功，如果有，产生了冲突，采用补偿机制，最常用的补偿机制是(不断重试，直到成功为止)最常用的技术就是CAS（Compare-and—Swap）CAS有三个值V(内存地址)A(旧的预期值)B(新值)当且仅当V符合旧的预期值A时，处理器用新的B更新V的值，否则不会更新，但是无论是否更新，都会返回V的旧值。 CAS有个漏洞ABA问题，可通过为值加版本号来解决 3.无同步方案可重入代码如果一个方法，结果是可预测的，输入相同的数据，返回相同的结果，它就满足可重入性的要求，也就是线程安全的线程本地存储如果一个变量要被多线程访问，可以使用volatile关键字声明它为”易变的”如果一个变量要被某线程独享，可以使用ThreadLocal，使用线程池的时候一定要注意线程复用问题 锁优化1.自旋锁和自适应自旋2.锁消除3.锁粗化4.轻量级锁5.偏向锁","categories":[{"name":"线程安全","slug":"线程安全","permalink":"http://yoursite.com/categories/线程安全/"}],"tags":[{"name":"线程安全","slug":"线程安全","permalink":"http://yoursite.com/tags/线程安全/"}]},{"title":"数据库三大范式","slug":"数据库三大范式","date":"2018-11-27T10:52:26.000Z","updated":"2018-11-27T13:09:40.768Z","comments":true,"path":"2018/11/27/数据库三大范式/","link":"","permalink":"http://yoursite.com/2018/11/27/数据库三大范式/","excerpt":"","text":"设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越良好结构的数据库，可以减少数据冗余。 第一范式所谓第一范式（1NF）是指在关系模型中，对于添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。什么叫做不可分割的原子项，比如有个用户信息表： 用户编号 姓名 专业 1 张三 兰州理工大学软件工程 2 李四 兰州龚家湾技校挖土机专业 我想找兰州龚家湾技校的人，直接查询专业是不方便的，按照我目前的需求，所以专业这个列还可以接着再拆分 用户编号 姓名 学校 专业名称 1 张三 兰州理工大学 软件工程 2 李四 兰州龚家湾技校 挖土机专业 这样就不错了，我想找按照学校过滤就方便多了 第二范式第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。比如我们在填报志愿（此处是假设，与现实填报志愿不符）的时候，我们的学生编号，学校编号，专业编号可以组成联合主键，可以确定一个填报志愿 申请志愿表 学生编号 姓名 学校编号 学校名称 学校邮编 专业编号 专业名称 填报时间 是否服从调剂 1 张三 1 兰州理工大学 247000 1 软件工程 2014-6-25 否 2 李四 2 山东蓝翔技校 349000 2 挖土机专业 2014-6-26 否 学生名称部分依赖于学生编号，学校邮编和学校名称部分依赖于学校编号，专业名称部分依赖于专业编号 下面我们对申请志愿表按照第二范式进行拆分 学生表 学生编号 姓名 1 张三 2 李四 学校表 学校编号 学校名称 学校邮编 1 兰州理工大学 247000 2 山东蓝翔技校 349000 3 兰州龚家湾技校 249997 专业表 专业编号 专业名称 1 软件工程 2 挖土机专业 新的申请志愿表 学生编号 学校编号 专业编号 填报时间 是否服从天调剂 1 1 1 2014-6-25 否 2 2 2 2014-6-25 否 第三范式在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。假设我们的申请志愿表有个唯一编号作为主键，即志愿编号 非主属性学校名称是依赖于非主属性学校编号的，还有专业名称依赖于专业编号等申请志愿表 志愿编号 学生编号 姓名 学校编号 学校名称 学校邮编 专业编号 专业名称 填报时间 是否服从调剂 001 1 张三 1 兰州理工大学 247000 1 软件工程 2014-6-25 否 002 2 李四 2 山东蓝翔技校 349000 2 挖土机专业 2014-6-26 否 所以学校表，专业表拆分和第二范式类似 新的申请志愿表 志愿编号 学生编号 学校编号 专业编号 填报时间 是否服从天调剂 001 1 1 1 2014-6-25 否 002 2 2 2 2014-6-25 否 其他表的拆分与第二范式相同，第三范式其实是第二范式的一个子集，满足三范式就一定满足第二范式","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/数据库/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"}]},{"title":"CAP原则","slug":"CAP原则","date":"2018-11-26T14:12:50.000Z","updated":"2018-11-26T15:23:35.776Z","comments":true,"path":"2018/11/26/CAP原则/","link":"","permalink":"http://yoursite.com/2018/11/26/CAP原则/","excerpt":"","text":"CAP原则CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可兼得 理论分布式系统的CAP理论：理论首先把分布式系统中的三个特性进行了如下归纳：● 一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）● 可用性（A）：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）● 分区容错性（P）：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。 与可用的决择CAP理论就是说在分布式存储系统中，最多只能实现上面的两点。而由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容忍性是我们必须需要实现的。所以我们只能在一致性和可用性之间进行权衡，没有NoSQL系统能同时保证这三点。","categories":[{"name":"分布式","slug":"分布式","permalink":"http://yoursite.com/categories/分布式/"}],"tags":[{"name":"分布式","slug":"分布式","permalink":"http://yoursite.com/tags/分布式/"}]},{"title":"查看端口被进程占用","slug":"查看端口被进程占用","date":"2018-11-26T08:49:33.000Z","updated":"2018-11-26T09:03:50.546Z","comments":true,"path":"2018/11/26/查看端口被进程占用/","link":"","permalink":"http://yoursite.com/2018/11/26/查看端口被进程占用/","excerpt":"","text":"windows查询20880被谁占用，在任务管理器找到相关进程（pid），结束任务即可12345678C:\\Users\\lenovo&gt;netstat -aon|findstr &quot;20880&quot; pid TCP 0.0.0.0:20880 0.0.0.0:0 LISTENING 15744 TCP 10.6.252.40:20880 10.6.252.40:62321 ESTABLISHED 15744 TCP 10.6.252.40:20880 10.6.252.40:62422 ESTABLISHED 15744 TCP 10.6.252.40:62321 10.6.252.40:20880 ESTABLISHED 11308 TCP 10.6.252.40:62422 10.6.252.40:20880 ESTABLISHED 2536 TCP [::]:20880 [::]:0 LISTENING 15744 linuxnetstat -tunlp |grep 端口号，用于查看指定的端口号的进程情况，如查看80端口的情况，netstat -tunlp |grep 8012345678910111213141516171819202122[root@iz2ze88p52tbioqel09nmrz ~]# netstat -tunlpActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program nametcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 20618/nginx: mastertcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1138/sshdtcp6 0 0 :::80 :::* LISTEN 20618/nginx: masterudp 0 0 0.0.0.0:57373 0.0.0.0:* 706/dhclientudp 0 0 0.0.0.0:68 0.0.0.0:* 706/dhclientudp 0 0 172.17.66.158:123 0.0.0.0:* 806/ntpdudp 0 0 127.0.0.1:123 0.0.0.0:* 806/ntpdudp 0 0 0.0.0.0:123 0.0.0.0:* 806/ntpdudp6 0 0 :::53341 :::* 706/dhclientudp6 0 0 :::123 :::* 806/ntpd[root@iz2ze88p52tbioqel09nmrz ~]# netstat -tunlp | grep 80tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 20618/nginx: mastertcp6 0 0 :::80 :::* LISTEN 20618/nginx: masterudp 0 0 172.17.66.158:123 0.0.0.0:* 806/ntpdudp 0 0 127.0.0.1:123 0.0.0.0:* 806/ntpdudp 0 0 0.0.0.0:123 0.0.0.0:* 806/ntpdudp6 0 0 :::123 :::* 806/ntpd 说明一下几个参数的含义：12345-t (tcp) 仅显示tcp相关选项-u (udp)仅显示udp相关选项-n 拒绝显示别名，能显示数字的全部转化为数字-l 仅列出在Listen(监听)的服务状态-p 显示建立相关链接的程序名 如果想解除端口占用 kill PID例如：1kill 20618","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"spring源码赏析二","slug":"spring源码赏析二","date":"2018-11-25T10:35:18.000Z","updated":"2018-11-25T11:37:43.192Z","comments":true,"path":"2018/11/25/spring源码赏析二/","link":"","permalink":"http://yoursite.com/2018/11/25/spring源码赏析二/","excerpt":"","text":"如果想要学习一个框架，第一步就是如何入手。怎样阅读spring源码呢，当然是从测试类入手啦！！！spring提供了非常全面的测试类，今天就从srping-beans.jar的RequiredAnnotationBeanPostProcessorTests测试类入手下面是testWithRequiredPropertyOmitted方法源码：12345678910111213141516171819202122@Test public void testWithRequiredPropertyOmitted() &#123; try &#123; DefaultListableBeanFactory factory = new DefaultListableBeanFactory(); BeanDefinition beanDef = BeanDefinitionBuilder .genericBeanDefinition(RequiredTestBean.class) .addPropertyValue(&quot;name&quot;, &quot;Rob Harrop&quot;) .addPropertyValue(&quot;favouriteColour&quot;, &quot;Blue&quot;) .addPropertyValue(&quot;jobTitle&quot;, &quot;Grand Poobah&quot;) .getBeanDefinition(); factory.registerBeanDefinition(&quot;testBean&quot;, beanDef); factory.addBeanPostProcessor(new RequiredAnnotationBeanPostProcessor()); factory.preInstantiateSingletons(); //在此抛出了异常 fail(&quot;Should have thrown BeanCreationException&quot;); &#125; catch (BeanCreationException ex) &#123; String message = ex.getCause().getMessage(); assertTrue(message.contains(&quot;Property&quot;)); assertTrue(message.contains(&quot;age&quot;)); assertTrue(message.contains(&quot;testBean&quot;)); &#125; &#125; RequiredTestBean.java注意age属性必须要注入的12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061public static class RequiredTestBean implements BeanNameAware, BeanFactoryAware &#123; private String name; private int age; private String favouriteColour; private String jobTitle; public int getAge() &#123; return age; &#125; @Required public void setAge(int age) &#123; this.age = age; &#125; public String getName() &#123; return name; &#125; @MyRequired public void setName(String name) &#123; this.name = name; &#125; public String getFavouriteColour() &#123; return favouriteColour; &#125; @Required public void setFavouriteColour(String favouriteColour) &#123; this.favouriteColour = favouriteColour; &#125; public String getJobTitle() &#123; return jobTitle; &#125; @Required public void setJobTitle(String jobTitle) &#123; this.jobTitle = jobTitle; &#125; @Override @Required public void setBeanName(String name) &#123; &#125; @Override @Required public void setBeanFactory(BeanFactory beanFactory) &#123; &#125; public static RequiredTestBean create() &#123; return new RequiredTestBean(); &#125;&#125; RequiredAnnotationBeanPostProcessor.java 主要是这个处理类来做事情，代码太多，我贴出来最重要的一个方法，异常也是该方法抛出的，这是程序抛出异常的最后一步：123456789101112131415161718192021@Override public PropertyValues postProcessPropertyValues( PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName) throws BeansException &#123; if (!this.validatedBeanNames.contains(beanName)) &#123; if (!shouldSkip(this.beanFactory, beanName)) &#123; List&lt;String&gt; invalidProperties = new ArrayList&lt;String&gt;(); for (PropertyDescriptor pd : pds) &#123; if (isRequiredProperty(pd) &amp;&amp; !pvs.contains(pd.getName())) &#123; invalidProperties.add(pd.getName()); &#125; &#125; if (!invalidProperties.isEmpty()) &#123; throw new BeanInitializationException(buildExceptionMessage(invalidProperties, beanName)); &#125; &#125; this.validatedBeanNames.add(beanName); &#125; return pvs; &#125; 下面我们开始debug:前期是各种类的注入，异常是最后一步抛出来的，我们直接从最后一步开始 第一步：factory.preInstantiateSingletons();调用的是：DefaultListableBeanFactory.preInstantiateSingletons() line: 7721234567@Override public void preInstantiateSingletons() throws BeansException &#123; .... getBean(beanName); .... &#125; 第二步：调用DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 1971234@Override public Object getBean(String name) throws BeansException &#123; return doGetBean(name, null, null, false); &#125; 第三步：调用DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class, Object[], boolean) line: 3021234567891011121314151617181920212223@SuppressWarnings(&quot;unchecked&quot;) protected &lt;T&gt; T doGetBean( final String name, final Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException &#123; .... sharedInstance = getSingleton(beanName, new ObjectFactory&lt;Object&gt;() &#123; @Override public Object getObject() throws BeansException &#123; try &#123; return createBean(beanName, mbd, args); //在回调方法里创建对象 &#125; catch (BeansException ex) &#123; // Explicitly remove instance from singleton cache: It might have been put there // eagerly by the creation process, to allow for circular reference resolution. // Also remove any beans that received a temporary reference to the bean. destroySingleton(beanName); throw ex; &#125; &#125; &#125;); ....&#125; 第四步：调用DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory&lt;?&gt;) line: 23012345public Object getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory) &#123; ... singletonObject = singletonFactory.getObject(); ...&#125; 第五步：调用AbstractBeanFactory$1.getObject() line: 306 ，回到第三步的ObjectFactory.getObject方法 第六步：DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 48212345678@Override protected Object createBean(String beanName, RootBeanDefinition mbd, Object[] args) throws BeanCreationException &#123; .... Object beanInstance = doCreateBean(beanName, mbdToUse, args); .... &#125; 第七步：调用DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 543123456protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args) &#123; ... populateBean(beanName, mbd, instanceWrapper); ...&#125; 第八步：调用DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).populateBean(String, RootBeanDefinition, BeanWrapper) line: 1214123456789101112131415161718192021protected void populateBean(String beanName, RootBeanDefinition mbd, BeanWrapper bw) &#123; .... boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors(); boolean needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE); if (hasInstAwareBpps || needsDepCheck) &#123; PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching); if (hasInstAwareBpps) &#123; for (BeanPostProcessor bp : getBeanPostProcessors()) &#123; if (bp instanceof InstantiationAwareBeanPostProcessor) &#123; InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp; pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName); //调用RequiredAnnotationBeanPostProcessor.postProcessPropertyValues方法 if (pvs == null) &#123; return; &#125; &#125; &#125; &#125; ....&#125; 到此，走到RequiredAnnotationBeanPostProcessor.postProcessPropertyValues方法，处理抛出了异常。","categories":[],"tags":[]},{"title":"spring源码 赏析：一","slug":"spring源码一","date":"2018-11-22T12:27:43.000Z","updated":"2018-11-25T10:31:41.859Z","comments":true,"path":"2018/11/22/spring源码一/","link":"","permalink":"http://yoursite.com/2018/11/22/spring源码一/","excerpt":"","text":"超级接口标记，指示bean有资格由Spring容器通过回调式方法通知特定框架对象。实际的方法签名由单独的子接口确定，但是通常应该只包含一个接受单个参数的空返回方法。注意，仅实现{@link Aware}不提供默认功能。相反，处理必须显式地完成，例如{@link org.springframework.beans…config.BeanPostProcessor BeanPostProcessor}。 参见{@link org.springframework.context…ApplicationContextAwareProcessor} 以及{@link org.springframework.beans…..AbstractAutowireCapableBeanFactory} 处理{@code *Aware}}接口回调的例子。1234567891011121314151617181920212223package org.springframework.beans.factory;/** * Marker superinterface indicating that a bean is eligible to be * notified by the Spring container of a particular framework object * through a callback-style method. Actual method signature is * determined by individual subinterfaces, but should typically * consist of just one void-returning method that accepts a single * argument. * * &lt;p&gt;Note that merely implementing &#123;@link Aware&#125; provides no default * functionality. Rather, processing must be done explicitly, for example * in a &#123;@link org.springframework.beans.factory.config.BeanPostProcessor BeanPostProcessor&#125;. * Refer to &#123;@link org.springframework.context.support.ApplicationContextAwareProcessor&#125; * and &#123;@link org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory&#125; * for examples of processing &#123;@code *Aware&#125; interface callbacks. * * @author Chris Beams * @since 3.1 */public interface Aware &#123;&#125; Java中isAssignableFrom的用法class1.isAssignableFrom(class2) 判定此 Class 对象所表示的类或接口与指定的 Class 参数所表示的类或接口是否相同，或是否是其超类或超接口。如果是则返回 true；否则返回 false。如果该 Class 表示一个基本类型，且指定的 Class 参数正是该 Class 对象，则该方法返回 true；否则返回 false。class2是不是class1的子类或者子接口1234567891011121314151617181920212223242526public String[] getBeanNamesForType(@Nullable ResolvableType type) &#123; boolean isFactoryType = false; if (type != null) &#123; Class&lt;?&gt; resolved = type.resolve(); if (resolved != null &amp;&amp; FactoryBean.class.isAssignableFrom(resolved)) &#123; isFactoryType = true; &#125; &#125; List&lt;String&gt; matches = new ArrayList&lt;&gt;(); for (Map.Entry&lt;String, Object&gt; entry : this.beans.entrySet()) &#123; String name = entry.getKey(); Object beanInstance = entry.getValue(); if (beanInstance instanceof FactoryBean &amp;&amp; !isFactoryType) &#123; Class&lt;?&gt; objectType = ((FactoryBean&lt;?&gt;) beanInstance).getObjectType(); if (objectType != null &amp;&amp; (type == null || type.isAssignableFrom(objectType))) &#123; matches.add(name); &#125; &#125; else &#123; if (type == null || type.isInstance(beanInstance)) &#123; matches.add(name); &#125; &#125; &#125; return StringUtils.toStringArray(matches); &#125; spring BeanDefinitionBuilder 建造者模式构造BeanDefinition123456BeanDefinition beanDef = BeanDefinitionBuilder .genericBeanDefinition(RequiredTestBean.class) .addPropertyValue(&quot;name&quot;, &quot;Rob Harrop&quot;) .addPropertyValue(&quot;favouriteColour&quot;, &quot;Blue&quot;) .addPropertyValue(&quot;jobTitle&quot;, &quot;Grand Poobah&quot;) .getBeanDefinition(); 关于spring5 ReactiveAdapterRegistry 编译后报错需要jdk91The type java.util.concurrent.Flow$Publisher cannot be resolved. It is indirectly referenced from required .class files","categories":[],"tags":[]},{"title":"如何基于hexo搭建博客","slug":"如何基于hexo搭建博客","date":"2018-11-21T04:51:00.000Z","updated":"2018-11-21T05:10:58.470Z","comments":true,"path":"2018/11/21/如何基于hexo搭建博客/","link":"","permalink":"http://yoursite.com/2018/11/21/如何基于hexo搭建博客/","excerpt":"","text":"前言：基于hexo建站百度已有类似很多文章，我就不重复画瓢了。不买服务器的话推荐gitee作为服务器托管。亲测gitee比github快10倍！！！ hexo相关官方网站我使用的hexo+gitee+next（主题） hexo：https://hexo.io/zh-cn/docs/ NexT（hexo主题）：https://theme-next.iissnan.com/ 如有问题请加QQ群：793379854（计算机课设不会做）","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"搭建hexo遇到的问题","slug":"搭建hexo遇到的问题","date":"2018-11-21T01:19:18.000Z","updated":"2018-11-21T02:04:58.971Z","comments":true,"path":"2018/11/21/搭建hexo遇到的问题/","link":"","permalink":"http://yoursite.com/2018/11/21/搭建hexo遇到的问题/","excerpt":"","text":"如何引用自己的文章12&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;例：&#123;% post_link 关于ShSx-G的由来 ShSx.G %&#125; 发布的图片太大（1M的图片在githubpage中卡的不能看）12我的解决方案是将图片压缩，我的用的一个在线压缩图片的网址是：https://tinypng.com/亲测1M的可以压到200k，图片清晰度还可以 nginx作为hexo的服务器访问503因为没有文件的访问权限测试nginx配置文件123[root@iz2ze88p52tbioqel09nmrz ~]# nginx -tnginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful 打开nginx.conf ,修改user nginx 为user root，然后重新载入配置文件命令：nginx -s reload12345678# For more information on configuration, see:# * Official English Documentation: http://nginx.org/en/docs/# * Official Russian Documentation: http://nginx.org/ru/docs/user root;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid; nginx其他常用命令1234nginx # 启动 Nginxnginx -s reload # 重新载入配置文件nginx -s reopen # 重启 Nginxnginx -s stop # 停止 Nginx","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"关于ShSx.G的由来","slug":"关于ShSx-G的由来","date":"2018-11-19T15:06:58.000Z","updated":"2018-11-21T05:14:01.531Z","comments":true,"path":"2018/11/19/关于ShSx-G的由来/","link":"","permalink":"http://yoursite.com/2018/11/19/关于ShSx-G的由来/","excerpt":"","text":"ShSx.G是我为我自己起的一个英文名字，鉴于我的英文知识比较匮乏，我也不知道这么拼写到底合不合法，反正都是英文字母和英文标点符号，应该没有什么大问题。 G的由来 我姓高，取高的拼音首字母G ShSx的由来来源于四大名著的拼音首字母，《三国演义》（S），《红楼梦》（H），《水浒传》（S），《西游记》（X）。忽略大小写，排名分先后，代表了四大名著在我心中的位置。 三国演义 此桥段是皇叔一言不慎，差点被砍死的截图。论：少说话，多做事的重要性 皇叔：我X，我刚才说了什么？ 刘表：这小子说谁呢？？","categories":[{"name":"about","slug":"about","permalink":"http://yoursite.com/categories/about/"}],"tags":[{"name":"ShSx.G","slug":"ShSx-G","permalink":"http://yoursite.com/tags/ShSx-G/"}]},{"title":"About Me","slug":"about","date":"2018-11-18T04:28:05.000Z","updated":"2018-12-02T08:34:22.656Z","comments":true,"path":"2018/11/18/about/","link":"","permalink":"http://yoursite.com/2018/11/18/about/","excerpt":"","text":"个人简介 我是 ShSx.G （主要是看大家都有），javaer，现在居住在北京，未来想去杭州发展。鉴于我的英文名字不好拼，拼出来也不好听，所以还是不要叫我的英文名字了。由于我擅长画瓢，可以叫我小瓢（^_^）！！！如果用一个词形容自己的话，我觉得是：善良。 教育背景 毕业院校 专业 时间 学历 兰州理工大学 软件工程 2013-9至2017-6 本科 工作经历 工作单位 职位 时间 用友 软件开发实习生 2016-12至2017-5 用友 软件开发工程师 2017-6至今 我做过什么 目前维护公司的ToB的审批流平台，与审批流相关的业务还算了解 工作中做过eclipse插件，以帮助公司的其他项目快速开发 使用java写了一个类似于有道词典的划屏取词的工具 使用Hexo+nignx+git搭建个人博客 我的希望 目前想在深圳或杭州找一份java开发的相关工作，如果有合适的岗位，可以给我发一份邮件，或者打电话聊聊，非常感谢(^_^)！我的邮箱：1183782035@qq.com我的电话：13401002587","categories":[{"name":"about","slug":"about","permalink":"http://yoursite.com/categories/about/"}],"tags":[{"name":"about","slug":"about","permalink":"http://yoursite.com/tags/about/"}]},{"title":"linux之ln的用法","slug":"linux之ln的用法","date":"2018-11-12T13:07:00.000Z","updated":"2018-11-20T16:07:28.197Z","comments":true,"path":"2018/11/12/linux之ln的用法/","link":"","permalink":"http://yoursite.com/2018/11/12/linux之ln的用法/","excerpt":"","text":"1、软链接就是：ln –s 源文件 目标文件，只会在选定的位置上生成一个文件的镜像，不会占用磁盘空间，类似与windows的快捷方式。 2、硬链接ln源文件目标文件，没有参数-s，会在选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。 例： ①ln -s /usr/software/nodejs/bin/npm /usr/local/bin/ ②ln -s /usr/software/nodejs/bin/node /usr/local/bin/","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-11-08T11:05:57.914Z","updated":"2018-11-20T16:08:39.598Z","comments":true,"path":"2018/11/08/hello-world/","link":"","permalink":"http://yoursite.com/2018/11/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hello","slug":"hello","permalink":"http://yoursite.com/categories/hello/"}],"tags":[]},{"title":"2018年1月3日-学习日志","slug":"2018年1月3日-学习日志","date":"2018-01-03T11:56:27.000Z","updated":"2018-11-21T12:49:53.697Z","comments":true,"path":"2018/01/03/2018年1月3日-学习日志/","link":"","permalink":"http://yoursite.com/2018/01/03/2018年1月3日-学习日志/","excerpt":"","text":"余尝曰：读《金瓶梅》而生怜悯心者，菩萨也；生畏惧心者，君子也；生欢喜心者，小人也；生效法心者，乃禽兽耳。 Sql优化之in与join的爱恨情仇流程设计相关流程查询原sql:12345SELECT * FROM `icop-bpm`.`act_re_model` m WHERE m.deployment_id_ IN (SELECT p.deployment_id_ FROM act_re_procdef p WHERE p.key_ IN( SELECT c.`prodefkey` FROM `bpm_billconfig` c WHERE c.`orgid` IN ('first0001company') AND c.`iscontainsub`=1 UNION SELECT c.`prodefkey` FROM `bpm_billconfig` c INNER JOIN `bpm_billconfig_org` g ON g.`configid` = c.`id` AND g.`orgid` ='8a83898e56f96bc6015703ab3032002b' WHERE c.`orgid` IN ('first0001company') AND (c.`iscontainsub` IS NULL OR c.`iscontainsub`=0))) AND name_ LIKE '%%' ORDER BY CONVERT( name_ USING GBK); 耗时:2.365sec优化后sql:1234SELECT * FROM `icop-bpm`.`act_re_model` m WHERE m.deployment_id_ IN( SELECT p.deployment_id_ FROM act_re_procdef p INNER JOIN (SELECT c.`prodefkey` AS prodefkey FROM `bpm_billconfig` c WHERE c.`orgid` IN ('first0001company') AND c.`iscontainsub`=1 UNION SELECT c.`prodefkey` AS prodefkey FROM `bpm_billconfig` c INNER JOIN `bpm_billconfig_org` g ON g.`configid` = c.`id` AND g.`orgid` ='8a83898e56f96bc6015703ab3032002b' WHERE c.`orgid` IN ('first0001company') AND (c.`iscontainsub` IS NULL OR c.`iscontainsub`=0)) g ON g.prodefkey=p.`KEY_`) AND name_ LIKE '%%' ORDER BY CONVERT( name_ USING GBK); 耗时:0.045sec总结:将流程部署表根据key的in查询修改为inner join 查询. java时间转换成毫秒值123456789101112private SimpleDateFormat dateformat;private long time;private long getMills()&#123; dateformat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"); //时间格式 try &#123; time = dateformat.parse(\"1971-01-01 00:00:00\").getTime();//格式转换 System.out.println(time); &#125; catch (java.text.ParseException e) &#123; e.printStackTrace(); &#125; return time;&#125; Js Date 对象原型添加格式化// 对Date的扩展，将 Date 转化为指定格式的String// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)// 例子：// (new Date()).Format(“yyyy-MM-dd hh:mm:ss.S”) ==&gt; 2006-07-02 08:09:04.423// (new Date()).Format(“yyyy-M-d h:m:s.S”) ==&gt; 2006-7-2 8:9:4.18123456789101112131415Date.prototype.Format = function (fmt) &#123; //author: nature var o = &#123; \"M+\": this.getMonth() + 1, //月份 \"d+\": this.getDate(), //日 \"h+\": this.getHours(), //小时 \"m+\": this.getMinutes(), //分 \"s+\": this.getSeconds(), //秒 \"q+\": Math.floor((this.getMonth() + 3) / 3), //季度 \"S\": this.getMilliseconds() //毫秒 &#125;; if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + \"\").substr(4 - RegExp.$1.length)); for (var k in o) if (new RegExp(\"(\" + k + \")\").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length))); return fmt;&#125; Springmvc @PathVariable()注解用法通过@ PathVariable注解获取的参数如果有小数点，会自动过滤掉小数点和小数点后面的字符，两种方法可以解决，第一种：1、问题SpringMVC项目中通过下面的ＵＲＬ进行GET请求。当version有多个小数点的时候。如version为1.0.1008。后台通过@PathVariable来获取version等于1.0。会丢失部分数据。URL:http://host_ip/consumer/appVersion/phone/android/download/{version}Controller:1234@RequestMapping(value=\"android/download/&#123;version&#125;\",method=RequestMethod.GET)public void download(HttpSession session,HttpServletResponse response,@PathVariable(\"version\")String version)&#123;&#125; 2、解决方案在version段后增加一个静态的字符段，这个段没有任何意义，可以为任意字符。URL:http://host_ip/consumer/appVersion/phone/android/download/{version}/static_str问题虽然解决了，但毕竟URL后多了个小尾巴，心情不愉悦。再次谷哥。参考：http://stackoverflow.com/questions/3526523/spring-mvc-pathvariable-getting-truncatedURL不加小尾巴。在@RequestMapping的value中使用SpEL来表示，value中的{version}换成{version:.+}。1234@RequestMapping(value=\"android/download/&#123;version:.+&#125;\",method=RequestMethod.GET)public void download(HttpSession session,HttpServletResponse response,@PathVariable(\"version\")String version)&#123;&#125; Mysql在windows上的安装Mysql windows上的安装分为两种：第一种是msi安装，该安装时直接下一步就行，如果以前安装过，在安装过程出现问题，记得删除注册表。第二种是免安装的，解压压缩文件包，但是需对my.ini文件进行配置，basedir和datadir是必须的，（1） 以管理员身份运行cmd，进入到bin目录下（2） 复制一个my-default.ini,名称为my.ini,配置basedir路径和datadir路径（3） 安装：执行 mysqld install, 正确的提示语为Service successfully installed.（4） 启动：net start mysql 启动成功：MySQL 服务已经启动成功。 Npm命令npm install 报错今天遇到一个问题，在npm install 的时候报错，我以为是远程库的问题，换了淘宝镜像之后还是不行最后在该路径下打印报错信息：D:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\pacote\\node_modules\\make-fetch-happen\\node_modules\\node-fetch-npm\\node_modules\\json-parse-better-errorsIndex.js文件1234try &#123; return JSON.parse(txt, reviver) &#125; catch (e) &#123;console.log(&quot;error message：&quot;+txt); 后来发现是缓存的问题：执行给命令：清理缓存1npm cache clean –force 然后在 npm install","categories":[],"tags":[]},{"title":"2017年12月28日-学习日志","slug":"2017年12月28日-学习日志","date":"2017-12-28T12:59:03.000Z","updated":"2018-11-21T13:08:26.468Z","comments":true,"path":"2017/12/28/2017年12月28日-学习日志/","link":"","permalink":"http://yoursite.com/2017/12/28/2017年12月28日-学习日志/","excerpt":"","text":"时间是不会等待的，无论发生什么事，它都会一如既往的向前走。 如何配置SLF4J不同的日志实现最近使用在学习shiro，在网上找了一个demo，在test的时候总是报错但是test是通过的百度知道上看到一篇很好的回答：使用slf4j库作为你的Java应用日志API层有很多好处，这里我会展示一小部分关于如何使用和配置它的例子。你可以把slf4j想成一个Java的接口，然后你需要实现这个接口，从而在运行时提供实际的日志记录，例如把日志写到控制台(STDOUT)或者一个文件上等等。每种实现（或成为绑定）都显而易见地有他们自己的方式来配置日志的输出，但是你的应用对实现者并无感知并且一直使用相同的org.slf4j.Logger API。让我们看看如何在实际中使用它。使用slf4j做简单的日志记录创建基于Maven的工程，在pom.xml中添加如下内容12345&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.5&lt;/version&gt;&lt;/dependency&gt; 现在你可以在你的Java代码中这样使用Logger1234567891011121314package deng;import org.slf4j.*;public class Hello &#123; static Logger LOGGER = LoggerFactory.getLogger(Hello.class); public static void main(String[] args) &#123; for (int i = 0; i &lt; 10; i++) if (i % 2 == 0) LOGGER.info(&quot;Hello &#123;&#125;&quot;, i); else LOGGER.debug(&quot;I am on index &#123;&#125;&quot;, i); &#125;&#125; 以上代码可以编译通过，但是当你运行它时，你会看到这样的输出1234bash&gt; java deng.HelloSLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.SLF4J: Defaulting to no-operation (NOP) logger implementationSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details. 上面的意思是，在运行时，你没有做日志的实现（或者说日志的绑定），所以slf4j简简单单的使用了一个什么也不会做的空实现。为了看到正确的输出，你应该尝试使用一个简单（simple）的实现，这个实现根本不需要任何配置！只要回到pom.xml然后添加如下配置12345&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt; &lt;version&gt;1.7.5&lt;/version&gt;&lt;/dependency&gt; 现在你可以在控制台(STDOUT)看见INFO级别的日志输出了。这个简单的logger会默认显示任何INFO或者更高级别的信息。想要看DEBUG级别的信息，你需要在Java启动时传入这个系统属性(system property)-Dorg.slf4j.simpleLogger.defaultLogLevel=DEBUG使用slf4j与Log4j日志现在我们可以试验并更换不同的日志实现，但你的程序代码可以保持不变。我们要做的是用另一个流行的日志实现来替换掉slf4j-simple，比如Log4j。12345&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.5&lt;/version&gt;&lt;/dependency&gt; 又一次，我们必须对我们选的每一个日志实现做配置。在这个例子中，我们需要一个文件src/main/resources/log4j.properties。12345log4j.rootLogger=DEBUG, STDOUTlog4j.logger.deng=INFOlog4j.appender.STDOUT=org.apache.log4j.ConsoleAppenderlog4j.appender.STDOUT.layout=org.apache.log4j.PatternLayoutlog4j.appender.STDOUT.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n 重运行你的程序，你会看到同样的输出结果。使用slf4j和JDK日志JDK实际上带有一个日志包，你可以在pom.xml中替换为另一个日志实现。12345&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-jdk14&lt;/artifactId&gt; &lt;version&gt;1.7.5&lt;/version&gt;&lt;/dependency&gt; 现在JDK日志的配置起来有一点困难。这里不仅需要一个配置文件src/main/resources/logging.properties，你还需要添加一个系统属性-Djava.util.logging.config.file=logging.properties这是一个logging.properties的示例1234level=INFOhandlers=java.util.logging.ConsoleHandlerjava.util.logging.ConsoleHandler.level=FINESTdeng.level=FINEST 使用slf4j和Logback日志Logback日志实现是一个高质量的实现。如果你想在项目中写认真的代码，你会想要考虑这中方式。还是修改你的pom.xml文件，替换成这样12345&lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.0.13&lt;/version&gt;&lt;/dependency&gt; 这是一个简单的配置src/main/resources/logback.xml12345678910111213&lt;configuration&gt; &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;logger name=&quot;deng&quot; level=&quot;DEBUG&quot;/&gt; &lt;root level=&quot;INFO&quot;&gt; &lt;appender-ref ref=&quot;STDOUT&quot; /&gt; &lt;/root&gt;&lt;/configuration&gt; 用slf4j写你自己的日志库如果你正在很多终端用户(END USER)提供Java库，那么让你的项目仅依赖slf4j-api绝对是个好想法，然后让你的用户在他们开发和运营环境中选择任意的日志实现。作为终端用户，他们可以快速地从上面提到的日志库中选择一个，并且从他们自己喜欢的日志实现的特性中受益。slf4j log4j logback之间的关系，哪个更好些SLF4J(The Simple Logging Facade for Java)官方文档是这样说明的 The Simple Logging Facade for Java (SLF4J) serves as a simple facade or abstraction for various logging frameworks, such as java.util.logging, logback and log4j. SLF4J allows the end-user to plug in the desired logging framework at deployment time. Note that SLF4J-enabling your library/application implies the addition of only a single mandatory dependency, namely slf4j-api-1.7.22.jar. 简答的讲就是slf4j是一系列的日志接口，而log4j logback是具体实现了的日志框架。 因为是接口，所以在项目中如果你不引用log4j 、logback或者其它日志框架你会发现，控制台的输出是这样的 从运行结果可以看到，由于没有给出具体的logger实现，无法在控制台输出日志。也就是说我们在具体开发中，需要绑定一个日志框架，才能正常的使用slf4j。 log4j和logback呢而log4j和logback就是两个受欢迎的日志框架。但两者又有不同。• log4j是apache实现的一个开源日志组件。（Wrapped implementations）• logback同样是由log4j的作者设计完成的，拥有更好的特性，用来取代log4j的一个日志框架。是slf4j的原生实现。（Native implementations） 接下来一起看一下应用程序对日志框架的调用关系，看下图 可以看到logback是直接实现了slf4j的接口，而log4j不是对slf4j的原生实现，所以slf4j api在调用log4j时需要一个适配层。 官方文档对logback是这样说的: Native implementation There are also SLF4J bindings external to the SLF4J project, e.g.logback which implements SLF4J natively. Logback’sch.qos.logback.classic.Logger class is a direct implementation of SLF4J’sorg.slf4j.Logger interface.Thus, using SLF4J in conjunction with logback involves strictly zero memory and computational overhead. 也就是说logback实现slf4j是不消耗内存和计算开销的。 最后总结一下： slf4j是java的一个日志门面，实现了日志框架一些通用的api，log4j和logback是具体的日志框架。 他们可以单独的使用，也可以绑定slf4j一起使用。• 单独使用。分别调用框架自己的方法来输出日志信息。• 绑定slf4j一起使用。调用slf4j的api来输入日志信息，具体使用与底层日志框架无关（需要底层框架的配置文件）显然这里我们不推荐单独使用日志框架。假设项目中已经使用了log4j，而我们此时加载了一个类库，而这个类库依赖另一个日志框架。这个时候我们就需要维护两个日志框架，这是一个非常麻烦的事情。而使用了slf4j就不同了，由于应用调用的抽象层的api，与底层日志框架是无关的，因此可以任意更换日志框架。解密Log4j、SLF4J、Common-logging的区别前面有一篇日志中简单的介绍了 log4j，同时也介绍了它与commons-logging的关系，但是突然冒出来一个slf4j，并且slf4j有取代commons-logging的趋势，所以，我们可以推知slf4j与commons-logging的作用应该相差不大的。 好，下面开始先讲讲slf4j。1.slf4j他只提供一个核心slf4j api(就是slf4j-api.jar包)，这个包只有日志的接口，并没有实现，所以如果要使用就得再给它提供一个实现了些接口的日志包，比 如：log4j,common logging,jdk log日志实现包等，但是这些日志实现又不能通过接口直接调用，实现上他们根本就和slf4j-api不一致，因此slf4j又增加了一层来转换各日志实 现包的使用，当然slf4j-simple除外。 slf4j+log4j组合使用模式： slf4j-api-1.5.11.jar slf4j-log4j12-1.5.11.jar log4j-1.2.15.jar log4j.properties(也可以是 log4j.xml) JCL+Log4J组合使用模式（即commons-logging+log4j）： commons-logging-1.1.jar log4j-1.2.15.jar log4j.properties 2.不同的获取logger的方式log4j：12import org.apache.log4j.Logger;Logger logger= Logger.getLogger(xx.class); slf4j+log4j：123import org.slf4j.Logger;import org.slf4j.LoggerFactory;Logger logger = LoggerFactory.getLogger(xx.class); jcl+log4j:123import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory;private static Log log = LogFactory.getLog(xx.class); 注意：common-longing是默认支持log4j的，使用其他日志工具需要做下面的配置：common-logging.properties org.apache.commons.logging.Log=org.apache.commons.logging.impl.Log4JCategoryLog 3.总结 总的来说，slf4j与commons-logging只是一个日志门面，实际还是要依赖真正的日志库log4j，虽然slf4j和commons-loggins自带了日志库，但是毕竟log4j才是最强大的。因为以前没有博客，我都是将自己喜欢的内容粘贴到word文档中，这是从以前word导入过来的内容，原url找不到了，不是原创，感谢开源，感谢分享，侵删！","categories":[],"tags":[]},{"title":"2017年12月14日-学习日志","slug":"2017年12月14日-学习日志","date":"2017-12-14T13:11:05.000Z","updated":"2018-11-21T13:17:36.336Z","comments":true,"path":"2017/12/14/2017年12月14日-学习日志/","link":"","permalink":"http://yoursite.com/2017/12/14/2017年12月14日-学习日志/","excerpt":"","text":"慢慢来不要急，你想要的都会有的 Js自调12!function ($) &#123; //code her&#125;(window.jQuery);高级的自调函数的一种写法(function ($) &#123; //code her&#125;)(window.jQuery) 普通自调函数的一种写法 括号使得里面的匿名函数变成函数表达式！的运算优先级低于括号朔所以可以达到相同的效果1var Name=function(parameters)&#123;//这里是块级作用域&#125;;Name();//调用匿名函数 函数表达式是在运行中以引用的方式赋值给一个变量的，如上面的函数创建的方式。而这里函数表达式和函数声明是不一样的，函数声明的通常形式如下：1function Name(parameters)&#123; //code here&#125; 函数声明会在程序刚开始运行的时候会被提升（所以可以在执行之后声明），但是并不执行，直到被调用的时候再执行。 Js()表达式总结：()运算，返回的是括号里面的最后一个参数","categories":[],"tags":[]},{"title":"马说","slug":"马说","date":"2017-11-25T12:59:22.000Z","updated":"2018-11-25T13:02:32.215Z","comments":true,"path":"2017/11/25/马说/","link":"","permalink":"http://yoursite.com/2017/11/25/马说/","excerpt":"","text":"马说 【作者】韩愈 【朝代】唐世有伯乐，然后有千里马。千里马常有，而伯乐不常有。故虽有名马，祇辱于奴隶人之手，骈死于槽枥之间，不以千里称也。 马之千里者，一食或尽粟一石。食马者不知其能千里而食也。是马也，虽有千里之能，食不饱，力不足，才美不外见，且欲与常马等不可得，安求其能千里也？ 策之不以其道，食之不能尽其材，鸣之而不能通其意，执策而临之，曰：“天下无马！”呜呼！其真无马邪？其真不知马也！","categories":[{"name":"思考","slug":"思考","permalink":"http://yoursite.com/categories/思考/"}],"tags":[{"name":"思考","slug":"思考","permalink":"http://yoursite.com/tags/思考/"}]},{"title":"hello","slug":"hello","date":"2017-11-09T02:41:53.000Z","updated":"2018-11-20T16:08:30.888Z","comments":true,"path":"2017/11/09/hello/","link":"","permalink":"http://yoursite.com/2017/11/09/hello/","excerpt":"","text":"这是一个标题这是一个指令System.print.out(\"Hello Hexo!\") Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing contentvvdafsadfasdf fasdfadfasdfasdf","categories":[{"name":"hello","slug":"hello","permalink":"http://yoursite.com/categories/hello/"}],"tags":[{"name":"hello","slug":"hello","permalink":"http://yoursite.com/tags/hello/"}]}]}
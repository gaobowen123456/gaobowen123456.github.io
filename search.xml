<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[k8s培训]]></title>
    <url>%2F2018%2F12%2F04%2Fk8s%E5%9F%B9%E8%AE%AD%2F</url>
    <content type="text"><![CDATA[为什么要用k8srancher ，k8s，docker原生， k8s多master的安装kube-controller—manager 有很多controller，私有云搭建使用这个cloud-controller—manager 近期出现的版本，给云供应商来控制kube-apiserver 通信的接口，对内通信还有通过etcd 元数据存了那些信息kube-sheduler所有的数据的存储，通过kube-apiserver沟通kubeletkube-proxy1.k8s cluster 所有元数据都存在etcd cluter中2.所有元数据的存储都通过API server来实现的总结manager用来管理 k8s的常用概念架构与运维路线图ansibleansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、cfengine、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。ansible是基于模块工作的，本身没有批量部署的能力。真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架。主要包括：(1)、连接插件connection plugins：负责和被监控端实现通信；(2)、host inventory：指定操作的主机，是一个配置文件里面定义监控的主机；(3)、各种模块核心模块、command模块、自定义模块；(4)、借助于插件完成记录日志邮件等功能；(5)、playbook：剧本执行多个任务时，非必需可以让节点一次性运行多个任务。 k8s 架构——常用概念 只能在单个主机上运行，跨主机通讯需要使用多个端口映射2.pod 多个容器可以使用同一ip地址 网络flannelcalico4.coredns每个服务都是唯一的域名]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[垃圾收集器与内存分配策略]]></title>
    <url>%2F2018%2F12%2F03%2F%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5%2F</url>
    <content type="text"><![CDATA[引用计数算法给对象添加一个引用计数器，每当一个地方引用的时候，计数器加1，引用失效，计数器减1，任何时刻，计数器为0，则则对象不可能在被使用。此算法的问题：难以解决相互引用问题。objA有一个属性引用了objB,objB有一个属性引用了objA，如果外界没有objA和objB的引用，则这两个对象就应该被回收。 可达性分析算法基本思路是通过一系列的称为”GC Roots”的对象作为起始点，从这些节点开始往下搜索，搜索走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连（称GC Roots 到这个对象不可达）时，则证明此对象不可用，可回收。java中，可作为GC Roots的对象包括以下几种：1.虚拟机栈（栈帧中的本地变量表）中引用的对象2.方法区中静态属性引用的对象3.方法区中常量引用的对象4.本地方法栈中JNI引用的对象 再谈引用JDK1.2以前，java的引用定义：如果reference类型的数据中存储的数据代表的是另一块数据内存的起始地址，就称为这块内存代表着一个引用。 JDK1.2之后，java对引用进行了扩充，强引用（Strong Reference）,软引用（Soft Reference），弱引用（Weak Reference），虚引用（Phantom Reference）4种，这4种强度依次减弱。 强引用强引用普遍存在，类似Object obj=new Object(),只要强引用还存在，垃圾回收器永远不会回收掉引用的对象。 软引用描述一些还有用带不是必须的对象。在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行二次回收。如果还没有足够的内存，再抛出异常。JDK1.2之后，提供了SoftReference类来实现软引用 弱引用弱引用也是用来描述非必须对象的，它比软引用更弱一些，被弱引用引用的对象只能生存到下次垃圾收集之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉直被弱引用关联的对象。JDK1.2之后，通过WeakReference类来实现弱引用。 虚引用虚引用称为幽灵引用或者幻影引用。它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响。也不能通过虚引用来取得一个对象实例。唯一的目的是对象被回收的时候可以收到一个系统通知。JDK1.2以后通过PhantomReference来实现虚引用 生存还是死亡在可达性分析算法中不可达的对象，必须经历两次标记的过程才会被回收。对象进行可达性分析后发现不可达，那它会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法或finalize()已经被虚拟机调用过，虚拟机将这两种情况视为”没必要执行”。如果对象被判定为有必要执行finalize(),则将会将该对象放入一个队列。单独起一个线程调用队列中的finalize()方法。]]></content>
      <categories>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java内存区域]]></title>
    <url>%2F2018%2F12%2F03%2Fjava%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%2F</url>
    <content type="text"><![CDATA[运行时数据区域程序计数器线程私有 java虚拟机栈线程私有 本地方法栈线程私有 java堆线程公有 方法区存放被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据线程公有（又称为永久代）运行时常量池（Runtime Constant Pool）是方法去的一部分，用于存放编译器的各种字面量和符号引用。 直接内存直接内存（Direct Memory）不是虚拟机运行数据的一部分，也不是java虚拟机滚翻中定义的区域在JDK1.4中新加入的NIO（New Input/Output）,引入了一种基于通道与缓冲区的I/O方式，可以使用Native方式直接分配内存，然后通过一个存储在java堆中的DirectBuffer对象作为这块内存的的引用进行操作。为了提高性能，避免在Java对和Native堆中来回复制。直接内存不受java堆大小的限制，但是会受到本机内存大小的限制。 对象的创建new 指令之后，先检查后面的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用是否已经加载解析和初始化过如果没有，先执行子昂用的类加载过程。类加载检查通过后，虚拟机为新生的对象分配内存分配内存有三种方式指针碰撞（Bump the Pionter）所有用过的内存放在一边，空闲的放在一边，中间放一个指针作为分界点的指示器，分配内存的时候将指针向空闲区域移动空闲列表（Free List）虚拟机维护一个列表，记录那部分内存可用，那部分内存不可用，分配内存的时候找一块足够大的空间划分给对象实例本地线程缓存（Thread Local Allocation Buffer） 如果对象在虚拟中创建频繁，如何进行同步1.虚拟机采用CAS配上失败重试的方式保证更新操作的原子性2.把分配内存的操作按照线程进行划分不同的区域，每个线程在Java堆中先预先分配一小块内存称为本地线程缓存，当用完了TLAB，在进行同步锁定，可通过-XX:+/-useTLAB参数来设定 分配完内存后，虚拟机将分配到的内存初始化为零值（不包括对象头），这一步保证对象不进行初始化也可以使用 接下来，虚拟机要对对象头进行必要的设置，如 类的元数据信息，对象的哈希码，对象的GC分代年龄，是否启用偏向锁等 对象的内存布局对象在内存中的存储布局分为3中：1.对象头（Header）对象都存两部分一部分用于存储对象自身运行时数据，如哈希码（hashCode），GC分代年龄，锁状态标志，线程持有锁，偏向线程ID，偏向时间戳等这部分数据的长度在32位和64位虚拟机中大小分别为32和64.此区域会根据一些参数的启用来复用存储空间。另一部分是类型指针，通过指针可以确定对象是哪个实例，但并不是所有的虚拟机实现都必须在对象数据上保留类型指针2.实例数据（Instance Data）对象真正存储的有效信息，也就是各个字段的内容，包括父类的3.对其填充（Padding）没有特别的意义，仅仅起占位符的作用。HotSpotVM的自动管理内存系统要求对象的大小必须是8字节的整倍数 对象的访问定位1.句柄访问java堆划分出了一块内存作为句柄池，reference存储的是对象句柄池的地址，句柄池包含了对象实例数据（java堆）和类型数据（方法区）的地址2.直接指针reference存储的是对象的地址好处是速度快，Sun HotSpot 使用的是直接指针]]></content>
      <categories>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018/12/3要做的事情清单]]></title>
    <url>%2F2018%2F12%2F03%2F2018-12-3%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85%E6%B8%85%E5%8D%95%2F</url>
    <content type="text"><![CDATA[9:00-11：30 工作11.30-12:00 吃饭12:00-13：30 中间学习10个英文单词或英文语句，休息Guard well your thoughts when alone and your words when accompanied.独处守住心，群处守住嘴guard 英 [gɑ:d] 美 [gɑ:rd]n.警卫;狱吏，看守;护卫队;防护装置vt.看守;保卫，守护;加防护装置;谨慎使用vi.警卫;警惕 accompaniedv.陪同;陪伴( accompany的过去式和过去分词 );伴随…同时发生;伴奏 Courage isn’t having the strength to go on.It’s going on when you don’t have strength.勇气不是有力气坚持下去，而是即使没有力气依然能够坚持。 courage英 [ˈkʌrɪdʒ] 美 [ˈkɜ:rɪdʒ]n.勇气;胆量;魄力;肝胆 strength英 [streŋθ] 美 [strɛŋkθ, strɛŋθ, strɛnθ]n.力量;优点，长处;（光、声、色等的）力度;人力[数] going on 发生; 接近，快到Direct Memory 直接内存NIO New Input/Outputchannel 通道buffer 缓冲区 13：30-17:00 工作17：00-19:00 一天总结，看java虚拟机这本书，并写一篇博客]]></content>
      <categories>
        <category>清单</category>
      </categories>
      <tags>
        <tag>清单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java线程安全与锁优化]]></title>
    <url>%2F2018%2F11%2F30%2Fjava%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[线程安全的实现方法1.互斥同步互斥同步是是常见的一种并发正确性保障手段。同步是指在在多线程并发访问共享数据时，保证共享数据在同一时刻只被一个（或者是一些，使用信号量的时候）线程使用。互斥是实现同步的一种手段互斥的实现三种方式 临界区 互斥量 信号量 java 中最基本的互斥同步手段是使用synchronizedsynchronized被编译后，同步块前后会形成monitorenter和monitorexit这两个字节码指令，这两个指令都需要一个reference类型的参数来指定锁定和解锁的对象如果synchronized指定了对象参数，那就是这个对象的reference如果没有指定，根据修饰的是类方法还是实例方法类确定修饰的类方法：Class对象实例方法：对象实例 使用java.util.concurrent下的ReentrantLock（重入锁）ReentrantLock相对与synchronized的增强 等待可中断是指当持有锁的线程长时间不释放锁的时候，正在等待的线程可以选择放弃等待，去做其他的事情。 可实现公平锁是指多个线程在等待同一个锁的时候，必须按着申请锁的时间顺序依次获取锁。synchronized和ReentrantLock默认是非公平锁 锁可以绑定多个条件synchronized锁对象的wait(),notify(),notifyAll()方法可以实现一个隐含的条件。想要增加条件关联，必须增加锁。而ReentrantLock只需要new Condition()即可jdk1.5版本ReentrantLock的吞吐量是优于synchronized的jdk1.6做了优化，提倡在synchronized能实现的情况下，优先使用synchronized 2.非阻塞同步互斥同步主要是线程阻塞和唤醒所带来的性能问题，所有这种同步也成为阻塞同步从处理问题的方式来看，互斥同步属于一种悲观并发策略，总是认为只要不同步，就会出现问题另一种方式是基于冲突检测的乐观并发策略，假设没有冲突，先进行操作，如果没有其他线程争用共享数据，则操作成功，如果有，产生了冲突，采用补偿机制，最常用的补偿机制是(不断重试，直到成功为止)最常用的技术就是CAS（Compare-and—Swap）CAS有三个值V(内存地址)A(旧的预期值)B(新值)当且仅当V符合旧的预期值A时，处理器用新的B更新V的值，否则不会更新，但是无论是否更新，都会返回V的旧值。 CAS有个漏洞ABA问题，可通过为值加版本号来解决 3.无同步方案可重入代码如果一个方法，结果是可预测的，输入相同的数据，返回相同的结果，它就满足可重入性的要求，也就是线程安全的线程本地存储如果一个变量要被多线程访问，可以使用volatile关键字声明它为”易变的”如果一个变量要被某线程独享，可以使用ThreadLocal，使用线程池的时候一定要注意线程复用问题 锁优化1.自旋锁和自适应自旋2.锁消除3.锁粗化4.轻量级锁5.偏向锁]]></content>
      <categories>
        <category>线程安全</category>
      </categories>
      <tags>
        <tag>线程安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库三大范式]]></title>
    <url>%2F2018%2F11%2F27%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越良好结构的数据库，可以减少数据冗余。 第一范式所谓第一范式（1NF）是指在关系模型中，对于添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。什么叫做不可分割的原子项，比如有个用户信息表： 用户编号 姓名 专业 1 张三 兰州理工大学软件工程 2 李四 兰州龚家湾技校挖土机专业 我想找兰州龚家湾技校的人，直接查询专业是不方便的，按照我目前的需求，所以专业这个列还可以接着再拆分 用户编号 姓名 学校 专业名称 1 张三 兰州理工大学 软件工程 2 李四 兰州龚家湾技校 挖土机专业 这样就不错了，我想找按照学校过滤就方便多了 第二范式第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。比如我们在填报志愿（此处是假设，与现实填报志愿不符）的时候，我们的学生编号，学校编号，专业编号可以组成联合主键，可以确定一个填报志愿 申请志愿表 学生编号 姓名 学校编号 学校名称 学校邮编 专业编号 专业名称 填报时间 是否服从调剂 1 张三 1 兰州理工大学 247000 1 软件工程 2014-6-25 否 2 李四 2 山东蓝翔技校 349000 2 挖土机专业 2014-6-26 否 学生名称部分依赖于学生编号，学校邮编和学校名称部分依赖于学校编号，专业名称部分依赖于专业编号 下面我们对申请志愿表按照第二范式进行拆分 学生表 学生编号 姓名 1 张三 2 李四 学校表 学校编号 学校名称 学校邮编 1 兰州理工大学 247000 2 山东蓝翔技校 349000 3 兰州龚家湾技校 249997 专业表 专业编号 专业名称 1 软件工程 2 挖土机专业 新的申请志愿表 学生编号 学校编号 专业编号 填报时间 是否服从天调剂 1 1 1 2014-6-25 否 2 2 2 2014-6-25 否 第三范式在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。假设我们的申请志愿表有个唯一编号作为主键，即志愿编号 非主属性学校名称是依赖于非主属性学校编号的，还有专业名称依赖于专业编号等申请志愿表 志愿编号 学生编号 姓名 学校编号 学校名称 学校邮编 专业编号 专业名称 填报时间 是否服从调剂 001 1 张三 1 兰州理工大学 247000 1 软件工程 2014-6-25 否 002 2 李四 2 山东蓝翔技校 349000 2 挖土机专业 2014-6-26 否 所以学校表，专业表拆分和第二范式类似 新的申请志愿表 志愿编号 学生编号 学校编号 专业编号 填报时间 是否服从天调剂 001 1 1 1 2014-6-25 否 002 2 2 2 2014-6-25 否 其他表的拆分与第二范式相同，第三范式其实是第二范式的一个子集，满足三范式就一定满足第二范式]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CAP原则]]></title>
    <url>%2F2018%2F11%2F26%2FCAP%E5%8E%9F%E5%88%99%2F</url>
    <content type="text"><![CDATA[CAP原则CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可兼得 理论分布式系统的CAP理论：理论首先把分布式系统中的三个特性进行了如下归纳：● 一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）● 可用性（A）：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）● 分区容错性（P）：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。 与可用的决择CAP理论就是说在分布式存储系统中，最多只能实现上面的两点。而由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容忍性是我们必须需要实现的。所以我们只能在一致性和可用性之间进行权衡，没有NoSQL系统能同时保证这三点。]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[查看端口被进程占用]]></title>
    <url>%2F2018%2F11%2F26%2F%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E8%A2%AB%E8%BF%9B%E7%A8%8B%E5%8D%A0%E7%94%A8%2F</url>
    <content type="text"><![CDATA[windows查询20880被谁占用，在任务管理器找到相关进程（pid），结束任务即可12345678C:\Users\lenovo&gt;netstat -aon|findstr &quot;20880&quot; pid TCP 0.0.0.0:20880 0.0.0.0:0 LISTENING 15744 TCP 10.6.252.40:20880 10.6.252.40:62321 ESTABLISHED 15744 TCP 10.6.252.40:20880 10.6.252.40:62422 ESTABLISHED 15744 TCP 10.6.252.40:62321 10.6.252.40:20880 ESTABLISHED 11308 TCP 10.6.252.40:62422 10.6.252.40:20880 ESTABLISHED 2536 TCP [::]:20880 [::]:0 LISTENING 15744 linuxnetstat -tunlp |grep 端口号，用于查看指定的端口号的进程情况，如查看80端口的情况，netstat -tunlp |grep 8012345678910111213141516171819202122[root@iz2ze88p52tbioqel09nmrz ~]# netstat -tunlpActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program nametcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 20618/nginx: mastertcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1138/sshdtcp6 0 0 :::80 :::* LISTEN 20618/nginx: masterudp 0 0 0.0.0.0:57373 0.0.0.0:* 706/dhclientudp 0 0 0.0.0.0:68 0.0.0.0:* 706/dhclientudp 0 0 172.17.66.158:123 0.0.0.0:* 806/ntpdudp 0 0 127.0.0.1:123 0.0.0.0:* 806/ntpdudp 0 0 0.0.0.0:123 0.0.0.0:* 806/ntpdudp6 0 0 :::53341 :::* 706/dhclientudp6 0 0 :::123 :::* 806/ntpd[root@iz2ze88p52tbioqel09nmrz ~]# netstat -tunlp | grep 80tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 20618/nginx: mastertcp6 0 0 :::80 :::* LISTEN 20618/nginx: masterudp 0 0 172.17.66.158:123 0.0.0.0:* 806/ntpdudp 0 0 127.0.0.1:123 0.0.0.0:* 806/ntpdudp 0 0 0.0.0.0:123 0.0.0.0:* 806/ntpdudp6 0 0 :::123 :::* 806/ntpd 说明一下几个参数的含义：12345-t (tcp) 仅显示tcp相关选项-u (udp)仅显示udp相关选项-n 拒绝显示别名，能显示数字的全部转化为数字-l 仅列出在Listen(监听)的服务状态-p 显示建立相关链接的程序名 如果想解除端口占用 kill PID例如：1kill 20618]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring源码赏析二]]></title>
    <url>%2F2018%2F11%2F25%2Fspring%E6%BA%90%E7%A0%81%E8%B5%8F%E6%9E%90%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[如果想要学习一个框架，第一步就是如何入手。怎样阅读spring源码呢，当然是从测试类入手啦！！！spring提供了非常全面的测试类，今天就从srping-beans.jar的RequiredAnnotationBeanPostProcessorTests测试类入手下面是testWithRequiredPropertyOmitted方法源码：12345678910111213141516171819202122@Test public void testWithRequiredPropertyOmitted() &#123; try &#123; DefaultListableBeanFactory factory = new DefaultListableBeanFactory(); BeanDefinition beanDef = BeanDefinitionBuilder .genericBeanDefinition(RequiredTestBean.class) .addPropertyValue(&quot;name&quot;, &quot;Rob Harrop&quot;) .addPropertyValue(&quot;favouriteColour&quot;, &quot;Blue&quot;) .addPropertyValue(&quot;jobTitle&quot;, &quot;Grand Poobah&quot;) .getBeanDefinition(); factory.registerBeanDefinition(&quot;testBean&quot;, beanDef); factory.addBeanPostProcessor(new RequiredAnnotationBeanPostProcessor()); factory.preInstantiateSingletons(); //在此抛出了异常 fail(&quot;Should have thrown BeanCreationException&quot;); &#125; catch (BeanCreationException ex) &#123; String message = ex.getCause().getMessage(); assertTrue(message.contains(&quot;Property&quot;)); assertTrue(message.contains(&quot;age&quot;)); assertTrue(message.contains(&quot;testBean&quot;)); &#125; &#125; RequiredTestBean.java注意age属性必须要注入的12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061public static class RequiredTestBean implements BeanNameAware, BeanFactoryAware &#123; private String name; private int age; private String favouriteColour; private String jobTitle; public int getAge() &#123; return age; &#125; @Required public void setAge(int age) &#123; this.age = age; &#125; public String getName() &#123; return name; &#125; @MyRequired public void setName(String name) &#123; this.name = name; &#125; public String getFavouriteColour() &#123; return favouriteColour; &#125; @Required public void setFavouriteColour(String favouriteColour) &#123; this.favouriteColour = favouriteColour; &#125; public String getJobTitle() &#123; return jobTitle; &#125; @Required public void setJobTitle(String jobTitle) &#123; this.jobTitle = jobTitle; &#125; @Override @Required public void setBeanName(String name) &#123; &#125; @Override @Required public void setBeanFactory(BeanFactory beanFactory) &#123; &#125; public static RequiredTestBean create() &#123; return new RequiredTestBean(); &#125;&#125; RequiredAnnotationBeanPostProcessor.java 主要是这个处理类来做事情，代码太多，我贴出来最重要的一个方法，异常也是该方法抛出的，这是程序抛出异常的最后一步：123456789101112131415161718192021@Override public PropertyValues postProcessPropertyValues( PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName) throws BeansException &#123; if (!this.validatedBeanNames.contains(beanName)) &#123; if (!shouldSkip(this.beanFactory, beanName)) &#123; List&lt;String&gt; invalidProperties = new ArrayList&lt;String&gt;(); for (PropertyDescriptor pd : pds) &#123; if (isRequiredProperty(pd) &amp;&amp; !pvs.contains(pd.getName())) &#123; invalidProperties.add(pd.getName()); &#125; &#125; if (!invalidProperties.isEmpty()) &#123; throw new BeanInitializationException(buildExceptionMessage(invalidProperties, beanName)); &#125; &#125; this.validatedBeanNames.add(beanName); &#125; return pvs; &#125; 下面我们开始debug:前期是各种类的注入，异常是最后一步抛出来的，我们直接从最后一步开始 第一步：factory.preInstantiateSingletons();调用的是：DefaultListableBeanFactory.preInstantiateSingletons() line: 7721234567@Override public void preInstantiateSingletons() throws BeansException &#123; .... getBean(beanName); .... &#125; 第二步：调用DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 1971234@Override public Object getBean(String name) throws BeansException &#123; return doGetBean(name, null, null, false); &#125; 第三步：调用DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class, Object[], boolean) line: 3021234567891011121314151617181920212223@SuppressWarnings(&quot;unchecked&quot;) protected &lt;T&gt; T doGetBean( final String name, final Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException &#123; .... sharedInstance = getSingleton(beanName, new ObjectFactory&lt;Object&gt;() &#123; @Override public Object getObject() throws BeansException &#123; try &#123; return createBean(beanName, mbd, args); //在回调方法里创建对象 &#125; catch (BeansException ex) &#123; // Explicitly remove instance from singleton cache: It might have been put there // eagerly by the creation process, to allow for circular reference resolution. // Also remove any beans that received a temporary reference to the bean. destroySingleton(beanName); throw ex; &#125; &#125; &#125;); ....&#125; 第四步：调用DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory&lt;?&gt;) line: 23012345public Object getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory) &#123; ... singletonObject = singletonFactory.getObject(); ...&#125; 第五步：调用AbstractBeanFactory$1.getObject() line: 306 ，回到第三步的ObjectFactory.getObject方法 第六步：DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 48212345678@Override protected Object createBean(String beanName, RootBeanDefinition mbd, Object[] args) throws BeanCreationException &#123; .... Object beanInstance = doCreateBean(beanName, mbdToUse, args); .... &#125; 第七步：调用DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 543123456protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args) &#123; ... populateBean(beanName, mbd, instanceWrapper); ...&#125; 第八步：调用DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).populateBean(String, RootBeanDefinition, BeanWrapper) line: 1214123456789101112131415161718192021protected void populateBean(String beanName, RootBeanDefinition mbd, BeanWrapper bw) &#123; .... boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors(); boolean needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE); if (hasInstAwareBpps || needsDepCheck) &#123; PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching); if (hasInstAwareBpps) &#123; for (BeanPostProcessor bp : getBeanPostProcessors()) &#123; if (bp instanceof InstantiationAwareBeanPostProcessor) &#123; InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp; pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName); //调用RequiredAnnotationBeanPostProcessor.postProcessPropertyValues方法 if (pvs == null) &#123; return; &#125; &#125; &#125; &#125; ....&#125; 到此，走到RequiredAnnotationBeanPostProcessor.postProcessPropertyValues方法，处理抛出了异常。]]></content>
  </entry>
  <entry>
    <title><![CDATA[spring源码 赏析：一]]></title>
    <url>%2F2018%2F11%2F22%2Fspring%E6%BA%90%E7%A0%81%E4%B8%80%2F</url>
    <content type="text"><![CDATA[超级接口标记，指示bean有资格由Spring容器通过回调式方法通知特定框架对象。实际的方法签名由单独的子接口确定，但是通常应该只包含一个接受单个参数的空返回方法。注意，仅实现{@link Aware}不提供默认功能。相反，处理必须显式地完成，例如{@link org.springframework.beans…config.BeanPostProcessor BeanPostProcessor}。 参见{@link org.springframework.context…ApplicationContextAwareProcessor} 以及{@link org.springframework.beans…..AbstractAutowireCapableBeanFactory} 处理{@code *Aware}}接口回调的例子。1234567891011121314151617181920212223package org.springframework.beans.factory;/** * Marker superinterface indicating that a bean is eligible to be * notified by the Spring container of a particular framework object * through a callback-style method. Actual method signature is * determined by individual subinterfaces, but should typically * consist of just one void-returning method that accepts a single * argument. * * &lt;p&gt;Note that merely implementing &#123;@link Aware&#125; provides no default * functionality. Rather, processing must be done explicitly, for example * in a &#123;@link org.springframework.beans.factory.config.BeanPostProcessor BeanPostProcessor&#125;. * Refer to &#123;@link org.springframework.context.support.ApplicationContextAwareProcessor&#125; * and &#123;@link org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory&#125; * for examples of processing &#123;@code *Aware&#125; interface callbacks. * * @author Chris Beams * @since 3.1 */public interface Aware &#123;&#125; Java中isAssignableFrom的用法class1.isAssignableFrom(class2) 判定此 Class 对象所表示的类或接口与指定的 Class 参数所表示的类或接口是否相同，或是否是其超类或超接口。如果是则返回 true；否则返回 false。如果该 Class 表示一个基本类型，且指定的 Class 参数正是该 Class 对象，则该方法返回 true；否则返回 false。class2是不是class1的子类或者子接口1234567891011121314151617181920212223242526public String[] getBeanNamesForType(@Nullable ResolvableType type) &#123; boolean isFactoryType = false; if (type != null) &#123; Class&lt;?&gt; resolved = type.resolve(); if (resolved != null &amp;&amp; FactoryBean.class.isAssignableFrom(resolved)) &#123; isFactoryType = true; &#125; &#125; List&lt;String&gt; matches = new ArrayList&lt;&gt;(); for (Map.Entry&lt;String, Object&gt; entry : this.beans.entrySet()) &#123; String name = entry.getKey(); Object beanInstance = entry.getValue(); if (beanInstance instanceof FactoryBean &amp;&amp; !isFactoryType) &#123; Class&lt;?&gt; objectType = ((FactoryBean&lt;?&gt;) beanInstance).getObjectType(); if (objectType != null &amp;&amp; (type == null || type.isAssignableFrom(objectType))) &#123; matches.add(name); &#125; &#125; else &#123; if (type == null || type.isInstance(beanInstance)) &#123; matches.add(name); &#125; &#125; &#125; return StringUtils.toStringArray(matches); &#125; spring BeanDefinitionBuilder 建造者模式构造BeanDefinition123456BeanDefinition beanDef = BeanDefinitionBuilder .genericBeanDefinition(RequiredTestBean.class) .addPropertyValue(&quot;name&quot;, &quot;Rob Harrop&quot;) .addPropertyValue(&quot;favouriteColour&quot;, &quot;Blue&quot;) .addPropertyValue(&quot;jobTitle&quot;, &quot;Grand Poobah&quot;) .getBeanDefinition(); 关于spring5 ReactiveAdapterRegistry 编译后报错需要jdk91The type java.util.concurrent.Flow$Publisher cannot be resolved. It is indirectly referenced from required .class files]]></content>
  </entry>
  <entry>
    <title><![CDATA[如何基于hexo搭建博客]]></title>
    <url>%2F2018%2F11%2F21%2F%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前言：基于hexo建站百度已有类似很多文章，我就不重复画瓢了。不买服务器的话推荐gitee作为服务器托管。亲测gitee比github快10倍！！！ hexo相关官方网站我使用的hexo+gitee+next（主题） hexo：https://hexo.io/zh-cn/docs/ NexT（hexo主题）：https://theme-next.iissnan.com/ 如有问题请加QQ群：793379854（计算机课设不会做）]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建hexo遇到的问题]]></title>
    <url>%2F2018%2F11%2F21%2F%E6%90%AD%E5%BB%BAhexo%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[如何引用自己的文章12&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;例：&#123;% post_link 关于ShSx-G的由来 ShSx.G %&#125; 发布的图片太大（1M的图片在githubpage中卡的不能看）12我的解决方案是将图片压缩，我的用的一个在线压缩图片的网址是：https://tinypng.com/亲测1M的可以压到200k，图片清晰度还可以 nginx作为hexo的服务器访问503因为没有文件的访问权限测试nginx配置文件123[root@iz2ze88p52tbioqel09nmrz ~]# nginx -tnginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful 打开nginx.conf ,修改user nginx 为user root，然后重新载入配置文件命令：nginx -s reload12345678# For more information on configuration, see:# * Official English Documentation: http://nginx.org/en/docs/# * Official Russian Documentation: http://nginx.org/ru/docs/user root;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid; nginx其他常用命令1234nginx # 启动 Nginxnginx -s reload # 重新载入配置文件nginx -s reopen # 重启 Nginxnginx -s stop # 停止 Nginx]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于ShSx.G的由来]]></title>
    <url>%2F2018%2F11%2F19%2F%E5%85%B3%E4%BA%8EShSx-G%E7%9A%84%E7%94%B1%E6%9D%A5%2F</url>
    <content type="text"><![CDATA[ShSx.G是我为我自己起的一个英文名字，鉴于我的英文知识比较匮乏，我也不知道这么拼写到底合不合法，反正都是英文字母和英文标点符号，应该没有什么大问题。 G的由来 我姓高，取高的拼音首字母G ShSx的由来来源于四大名著的拼音首字母，《三国演义》（S），《红楼梦》（H），《水浒传》（S），《西游记》（X）。忽略大小写，排名分先后，代表了四大名著在我心中的位置。 三国演义 此桥段是皇叔一言不慎，差点被砍死的截图。论：少说话，多做事的重要性 皇叔：我X，我刚才说了什么？ 刘表：这小子说谁呢？？]]></content>
      <categories>
        <category>about</category>
      </categories>
      <tags>
        <tag>ShSx.G</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[About Me]]></title>
    <url>%2F2018%2F11%2F18%2Fabout%2F</url>
    <content type="text"><![CDATA[个人简介 我是 ShSx.G （主要是看大家都有），javaer，现在居住在北京，未来想去杭州发展。鉴于我的英文名字不好拼，拼出来也不好听，所以还是不要叫我的英文名字了。由于我擅长画瓢，可以叫我小瓢（^_^）！！！如果用一个词形容自己的话，我觉得是：善良。 教育背景 毕业院校 专业 时间 学历 兰州理工大学 软件工程 2013-9至2017-6 本科 工作经历 工作单位 职位 时间 用友 软件开发实习生 2016-12至2017-5 用友 软件开发工程师 2017-6至今 我做过什么 目前维护公司的ToB的审批流平台，与审批流相关的业务还算了解 工作中做过eclipse插件，以帮助公司的其他项目快速开发 使用java写了一个类似于有道词典的划屏取词的工具 使用Hexo+nignx+git搭建个人博客 我的希望 目前想在深圳或杭州找一份java开发的相关工作，如果有合适的岗位，可以给我发一份邮件，或者打电话聊聊，非常感谢(^_^)！我的邮箱：1183782035@qq.com我的电话：13401002587]]></content>
      <categories>
        <category>about</category>
      </categories>
      <tags>
        <tag>about</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux之ln的用法]]></title>
    <url>%2F2018%2F11%2F12%2Flinux%E4%B9%8Bln%E7%9A%84%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1、软链接就是：ln –s 源文件 目标文件，只会在选定的位置上生成一个文件的镜像，不会占用磁盘空间，类似与windows的快捷方式。 2、硬链接ln源文件目标文件，没有参数-s，会在选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。 例： ①ln -s /usr/software/nodejs/bin/npm /usr/local/bin/ ②ln -s /usr/software/nodejs/bin/node /usr/local/bin/]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F11%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hello</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2018年1月3日-学习日志]]></title>
    <url>%2F2018%2F01%2F03%2F2018%E5%B9%B41%E6%9C%883%E6%97%A5-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[余尝曰：读《金瓶梅》而生怜悯心者，菩萨也；生畏惧心者，君子也；生欢喜心者，小人也；生效法心者，乃禽兽耳。 Sql优化之in与join的爱恨情仇流程设计相关流程查询原sql:12345SELECT * FROM `icop-bpm`.`act_re_model` m WHERE m.deployment_id_ IN (SELECT p.deployment_id_ FROM act_re_procdef p WHERE p.key_ IN( SELECT c.`prodefkey` FROM `bpm_billconfig` c WHERE c.`orgid` IN ('first0001company') AND c.`iscontainsub`=1 UNION SELECT c.`prodefkey` FROM `bpm_billconfig` c INNER JOIN `bpm_billconfig_org` g ON g.`configid` = c.`id` AND g.`orgid` ='8a83898e56f96bc6015703ab3032002b' WHERE c.`orgid` IN ('first0001company') AND (c.`iscontainsub` IS NULL OR c.`iscontainsub`=0))) AND name_ LIKE '%%' ORDER BY CONVERT( name_ USING GBK); 耗时:2.365sec优化后sql:1234SELECT * FROM `icop-bpm`.`act_re_model` m WHERE m.deployment_id_ IN( SELECT p.deployment_id_ FROM act_re_procdef p INNER JOIN (SELECT c.`prodefkey` AS prodefkey FROM `bpm_billconfig` c WHERE c.`orgid` IN ('first0001company') AND c.`iscontainsub`=1 UNION SELECT c.`prodefkey` AS prodefkey FROM `bpm_billconfig` c INNER JOIN `bpm_billconfig_org` g ON g.`configid` = c.`id` AND g.`orgid` ='8a83898e56f96bc6015703ab3032002b' WHERE c.`orgid` IN ('first0001company') AND (c.`iscontainsub` IS NULL OR c.`iscontainsub`=0)) g ON g.prodefkey=p.`KEY_`) AND name_ LIKE '%%' ORDER BY CONVERT( name_ USING GBK); 耗时:0.045sec总结:将流程部署表根据key的in查询修改为inner join 查询. java时间转换成毫秒值123456789101112private SimpleDateFormat dateformat;private long time;private long getMills()&#123; dateformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); //时间格式 try &#123; time = dateformat.parse("1971-01-01 00:00:00").getTime();//格式转换 System.out.println(time); &#125; catch (java.text.ParseException e) &#123; e.printStackTrace(); &#125; return time;&#125; Js Date 对象原型添加格式化// 对Date的扩展，将 Date 转化为指定格式的String// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)// 例子：// (new Date()).Format(“yyyy-MM-dd hh:mm:ss.S”) ==&gt; 2006-07-02 08:09:04.423// (new Date()).Format(“yyyy-M-d h:m:s.S”) ==&gt; 2006-7-2 8:9:4.18123456789101112131415Date.prototype.Format = function (fmt) &#123; //author: nature var o = &#123; "M+": this.getMonth() + 1, //月份 "d+": this.getDate(), //日 "h+": this.getHours(), //小时 "m+": this.getMinutes(), //分 "s+": this.getSeconds(), //秒 "q+": Math.floor((this.getMonth() + 3) / 3), //季度 "S": this.getMilliseconds() //毫秒 &#125;; if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length)); for (var k in o) if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length))); return fmt;&#125; Springmvc @PathVariable()注解用法通过@ PathVariable注解获取的参数如果有小数点，会自动过滤掉小数点和小数点后面的字符，两种方法可以解决，第一种：1、问题SpringMVC项目中通过下面的ＵＲＬ进行GET请求。当version有多个小数点的时候。如version为1.0.1008。后台通过@PathVariable来获取version等于1.0。会丢失部分数据。URL:http://host_ip/consumer/appVersion/phone/android/download/{version}Controller:1234@RequestMapping(value="android/download/&#123;version&#125;",method=RequestMethod.GET)public void download(HttpSession session,HttpServletResponse response,@PathVariable("version")String version)&#123;&#125; 2、解决方案在version段后增加一个静态的字符段，这个段没有任何意义，可以为任意字符。URL:http://host_ip/consumer/appVersion/phone/android/download/{version}/static_str问题虽然解决了，但毕竟URL后多了个小尾巴，心情不愉悦。再次谷哥。参考：http://stackoverflow.com/questions/3526523/spring-mvc-pathvariable-getting-truncatedURL不加小尾巴。在@RequestMapping的value中使用SpEL来表示，value中的{version}换成{version:.+}。1234@RequestMapping(value="android/download/&#123;version:.+&#125;",method=RequestMethod.GET)public void download(HttpSession session,HttpServletResponse response,@PathVariable("version")String version)&#123;&#125; Mysql在windows上的安装Mysql windows上的安装分为两种：第一种是msi安装，该安装时直接下一步就行，如果以前安装过，在安装过程出现问题，记得删除注册表。第二种是免安装的，解压压缩文件包，但是需对my.ini文件进行配置，basedir和datadir是必须的，（1） 以管理员身份运行cmd，进入到bin目录下（2） 复制一个my-default.ini,名称为my.ini,配置basedir路径和datadir路径（3） 安装：执行 mysqld install, 正确的提示语为Service successfully installed.（4） 启动：net start mysql 启动成功：MySQL 服务已经启动成功。 Npm命令npm install 报错今天遇到一个问题，在npm install 的时候报错，我以为是远程库的问题，换了淘宝镜像之后还是不行最后在该路径下打印报错信息：D:\Program Files\nodejs\node_modules\npm\node_modules\pacote\node_modules\make-fetch-happen\node_modules\node-fetch-npm\node_modules\json-parse-better-errorsIndex.js文件1234try &#123; return JSON.parse(txt, reviver) &#125; catch (e) &#123;console.log(&quot;error message：&quot;+txt); 后来发现是缓存的问题：执行给命令：清理缓存1npm cache clean –force 然后在 npm install]]></content>
  </entry>
  <entry>
    <title><![CDATA[2017年12月28日-学习日志]]></title>
    <url>%2F2017%2F12%2F28%2F2017%E5%B9%B412%E6%9C%8828%E6%97%A5-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[时间是不会等待的，无论发生什么事，它都会一如既往的向前走。 如何配置SLF4J不同的日志实现最近使用在学习shiro，在网上找了一个demo，在test的时候总是报错但是test是通过的百度知道上看到一篇很好的回答：使用slf4j库作为你的Java应用日志API层有很多好处，这里我会展示一小部分关于如何使用和配置它的例子。你可以把slf4j想成一个Java的接口，然后你需要实现这个接口，从而在运行时提供实际的日志记录，例如把日志写到控制台(STDOUT)或者一个文件上等等。每种实现（或成为绑定）都显而易见地有他们自己的方式来配置日志的输出，但是你的应用对实现者并无感知并且一直使用相同的org.slf4j.Logger API。让我们看看如何在实际中使用它。使用slf4j做简单的日志记录创建基于Maven的工程，在pom.xml中添加如下内容12345&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.5&lt;/version&gt;&lt;/dependency&gt; 现在你可以在你的Java代码中这样使用Logger1234567891011121314package deng;import org.slf4j.*;public class Hello &#123; static Logger LOGGER = LoggerFactory.getLogger(Hello.class); public static void main(String[] args) &#123; for (int i = 0; i &lt; 10; i++) if (i % 2 == 0) LOGGER.info(&quot;Hello &#123;&#125;&quot;, i); else LOGGER.debug(&quot;I am on index &#123;&#125;&quot;, i); &#125;&#125; 以上代码可以编译通过，但是当你运行它时，你会看到这样的输出1234bash&gt; java deng.HelloSLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.SLF4J: Defaulting to no-operation (NOP) logger implementationSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details. 上面的意思是，在运行时，你没有做日志的实现（或者说日志的绑定），所以slf4j简简单单的使用了一个什么也不会做的空实现。为了看到正确的输出，你应该尝试使用一个简单（simple）的实现，这个实现根本不需要任何配置！只要回到pom.xml然后添加如下配置12345&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt; &lt;version&gt;1.7.5&lt;/version&gt;&lt;/dependency&gt; 现在你可以在控制台(STDOUT)看见INFO级别的日志输出了。这个简单的logger会默认显示任何INFO或者更高级别的信息。想要看DEBUG级别的信息，你需要在Java启动时传入这个系统属性(system property)-Dorg.slf4j.simpleLogger.defaultLogLevel=DEBUG使用slf4j与Log4j日志现在我们可以试验并更换不同的日志实现，但你的程序代码可以保持不变。我们要做的是用另一个流行的日志实现来替换掉slf4j-simple，比如Log4j。12345&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.5&lt;/version&gt;&lt;/dependency&gt; 又一次，我们必须对我们选的每一个日志实现做配置。在这个例子中，我们需要一个文件src/main/resources/log4j.properties。12345log4j.rootLogger=DEBUG, STDOUTlog4j.logger.deng=INFOlog4j.appender.STDOUT=org.apache.log4j.ConsoleAppenderlog4j.appender.STDOUT.layout=org.apache.log4j.PatternLayoutlog4j.appender.STDOUT.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n 重运行你的程序，你会看到同样的输出结果。使用slf4j和JDK日志JDK实际上带有一个日志包，你可以在pom.xml中替换为另一个日志实现。12345&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-jdk14&lt;/artifactId&gt; &lt;version&gt;1.7.5&lt;/version&gt;&lt;/dependency&gt; 现在JDK日志的配置起来有一点困难。这里不仅需要一个配置文件src/main/resources/logging.properties，你还需要添加一个系统属性-Djava.util.logging.config.file=logging.properties这是一个logging.properties的示例1234level=INFOhandlers=java.util.logging.ConsoleHandlerjava.util.logging.ConsoleHandler.level=FINESTdeng.level=FINEST 使用slf4j和Logback日志Logback日志实现是一个高质量的实现。如果你想在项目中写认真的代码，你会想要考虑这中方式。还是修改你的pom.xml文件，替换成这样12345&lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.0.13&lt;/version&gt;&lt;/dependency&gt; 这是一个简单的配置src/main/resources/logback.xml12345678910111213&lt;configuration&gt; &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;logger name=&quot;deng&quot; level=&quot;DEBUG&quot;/&gt; &lt;root level=&quot;INFO&quot;&gt; &lt;appender-ref ref=&quot;STDOUT&quot; /&gt; &lt;/root&gt;&lt;/configuration&gt; 用slf4j写你自己的日志库如果你正在很多终端用户(END USER)提供Java库，那么让你的项目仅依赖slf4j-api绝对是个好想法，然后让你的用户在他们开发和运营环境中选择任意的日志实现。作为终端用户，他们可以快速地从上面提到的日志库中选择一个，并且从他们自己喜欢的日志实现的特性中受益。slf4j log4j logback之间的关系，哪个更好些SLF4J(The Simple Logging Facade for Java)官方文档是这样说明的 The Simple Logging Facade for Java (SLF4J) serves as a simple facade or abstraction for various logging frameworks, such as java.util.logging, logback and log4j. SLF4J allows the end-user to plug in the desired logging framework at deployment time. Note that SLF4J-enabling your library/application implies the addition of only a single mandatory dependency, namely slf4j-api-1.7.22.jar. 简答的讲就是slf4j是一系列的日志接口，而log4j logback是具体实现了的日志框架。 因为是接口，所以在项目中如果你不引用log4j 、logback或者其它日志框架你会发现，控制台的输出是这样的 从运行结果可以看到，由于没有给出具体的logger实现，无法在控制台输出日志。也就是说我们在具体开发中，需要绑定一个日志框架，才能正常的使用slf4j。 log4j和logback呢而log4j和logback就是两个受欢迎的日志框架。但两者又有不同。• log4j是apache实现的一个开源日志组件。（Wrapped implementations）• logback同样是由log4j的作者设计完成的，拥有更好的特性，用来取代log4j的一个日志框架。是slf4j的原生实现。（Native implementations） 接下来一起看一下应用程序对日志框架的调用关系，看下图 可以看到logback是直接实现了slf4j的接口，而log4j不是对slf4j的原生实现，所以slf4j api在调用log4j时需要一个适配层。 官方文档对logback是这样说的: Native implementation There are also SLF4J bindings external to the SLF4J project, e.g.logback which implements SLF4J natively. Logback’sch.qos.logback.classic.Logger class is a direct implementation of SLF4J’sorg.slf4j.Logger interface.Thus, using SLF4J in conjunction with logback involves strictly zero memory and computational overhead. 也就是说logback实现slf4j是不消耗内存和计算开销的。 最后总结一下： slf4j是java的一个日志门面，实现了日志框架一些通用的api，log4j和logback是具体的日志框架。 他们可以单独的使用，也可以绑定slf4j一起使用。• 单独使用。分别调用框架自己的方法来输出日志信息。• 绑定slf4j一起使用。调用slf4j的api来输入日志信息，具体使用与底层日志框架无关（需要底层框架的配置文件）显然这里我们不推荐单独使用日志框架。假设项目中已经使用了log4j，而我们此时加载了一个类库，而这个类库依赖另一个日志框架。这个时候我们就需要维护两个日志框架，这是一个非常麻烦的事情。而使用了slf4j就不同了，由于应用调用的抽象层的api，与底层日志框架是无关的，因此可以任意更换日志框架。解密Log4j、SLF4J、Common-logging的区别前面有一篇日志中简单的介绍了 log4j，同时也介绍了它与commons-logging的关系，但是突然冒出来一个slf4j，并且slf4j有取代commons-logging的趋势，所以，我们可以推知slf4j与commons-logging的作用应该相差不大的。 好，下面开始先讲讲slf4j。1.slf4j他只提供一个核心slf4j api(就是slf4j-api.jar包)，这个包只有日志的接口，并没有实现，所以如果要使用就得再给它提供一个实现了些接口的日志包，比 如：log4j,common logging,jdk log日志实现包等，但是这些日志实现又不能通过接口直接调用，实现上他们根本就和slf4j-api不一致，因此slf4j又增加了一层来转换各日志实 现包的使用，当然slf4j-simple除外。 slf4j+log4j组合使用模式： slf4j-api-1.5.11.jar slf4j-log4j12-1.5.11.jar log4j-1.2.15.jar log4j.properties(也可以是 log4j.xml) JCL+Log4J组合使用模式（即commons-logging+log4j）： commons-logging-1.1.jar log4j-1.2.15.jar log4j.properties 2.不同的获取logger的方式log4j：12import org.apache.log4j.Logger;Logger logger= Logger.getLogger(xx.class); slf4j+log4j：123import org.slf4j.Logger;import org.slf4j.LoggerFactory;Logger logger = LoggerFactory.getLogger(xx.class); jcl+log4j:123import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory;private static Log log = LogFactory.getLog(xx.class); 注意：common-longing是默认支持log4j的，使用其他日志工具需要做下面的配置：common-logging.properties org.apache.commons.logging.Log=org.apache.commons.logging.impl.Log4JCategoryLog 3.总结 总的来说，slf4j与commons-logging只是一个日志门面，实际还是要依赖真正的日志库log4j，虽然slf4j和commons-loggins自带了日志库，但是毕竟log4j才是最强大的。因为以前没有博客，我都是将自己喜欢的内容粘贴到word文档中，这是从以前word导入过来的内容，原url找不到了，不是原创，感谢开源，感谢分享，侵删！]]></content>
  </entry>
  <entry>
    <title><![CDATA[2017年12月14日-学习日志]]></title>
    <url>%2F2017%2F12%2F14%2F2017%E5%B9%B412%E6%9C%8814%E6%97%A5-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[慢慢来不要急，你想要的都会有的 Js自调12!function ($) &#123; //code her&#125;(window.jQuery);高级的自调函数的一种写法(function ($) &#123; //code her&#125;)(window.jQuery) 普通自调函数的一种写法 括号使得里面的匿名函数变成函数表达式！的运算优先级低于括号朔所以可以达到相同的效果1var Name=function(parameters)&#123;//这里是块级作用域&#125;;Name();//调用匿名函数 函数表达式是在运行中以引用的方式赋值给一个变量的，如上面的函数创建的方式。而这里函数表达式和函数声明是不一样的，函数声明的通常形式如下：1function Name(parameters)&#123; //code here&#125; 函数声明会在程序刚开始运行的时候会被提升（所以可以在执行之后声明），但是并不执行，直到被调用的时候再执行。 Js()表达式总结：()运算，返回的是括号里面的最后一个参数]]></content>
  </entry>
  <entry>
    <title><![CDATA[马说]]></title>
    <url>%2F2017%2F11%2F25%2F%E9%A9%AC%E8%AF%B4%2F</url>
    <content type="text"><![CDATA[马说 【作者】韩愈 【朝代】唐世有伯乐，然后有千里马。千里马常有，而伯乐不常有。故虽有名马，祇辱于奴隶人之手，骈死于槽枥之间，不以千里称也。 马之千里者，一食或尽粟一石。食马者不知其能千里而食也。是马也，虽有千里之能，食不饱，力不足，才美不外见，且欲与常马等不可得，安求其能千里也？ 策之不以其道，食之不能尽其材，鸣之而不能通其意，执策而临之，曰：“天下无马！”呜呼！其真无马邪？其真不知马也！]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello]]></title>
    <url>%2F2017%2F11%2F09%2Fhello%2F</url>
    <content type="text"><![CDATA[这是一个标题这是一个指令System.print.out("Hello Hexo!") Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing contentvvdafsadfasdf fasdfadfasdfasdf]]></content>
      <categories>
        <category>hello</category>
      </categories>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
</search>

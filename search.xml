<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[spring源码赏析二]]></title>
    <url>%2F2018%2F11%2F25%2Fspring%E6%BA%90%E7%A0%81%E8%B5%8F%E6%9E%90%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[如果想要学习一个框架，第一步就是如何入手。怎样阅读spring源码呢，当然是从测试类入手啦！！！spring提供了非常全面的测试类，今天就从srping-beans.jar的RequiredAnnotationBeanPostProcessorTests测试类入手下面是testWithRequiredPropertyOmitted方法源码：12345678910111213141516171819202122@Test public void testWithRequiredPropertyOmitted() &#123; try &#123; DefaultListableBeanFactory factory = new DefaultListableBeanFactory(); BeanDefinition beanDef = BeanDefinitionBuilder .genericBeanDefinition(RequiredTestBean.class) .addPropertyValue(&quot;name&quot;, &quot;Rob Harrop&quot;) .addPropertyValue(&quot;favouriteColour&quot;, &quot;Blue&quot;) .addPropertyValue(&quot;jobTitle&quot;, &quot;Grand Poobah&quot;) .getBeanDefinition(); factory.registerBeanDefinition(&quot;testBean&quot;, beanDef); factory.addBeanPostProcessor(new RequiredAnnotationBeanPostProcessor()); factory.preInstantiateSingletons(); //在此抛出了异常 fail(&quot;Should have thrown BeanCreationException&quot;); &#125; catch (BeanCreationException ex) &#123; String message = ex.getCause().getMessage(); assertTrue(message.contains(&quot;Property&quot;)); assertTrue(message.contains(&quot;age&quot;)); assertTrue(message.contains(&quot;testBean&quot;)); &#125; &#125; RequiredTestBean.java注意age属性必须要注入的12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061public static class RequiredTestBean implements BeanNameAware, BeanFactoryAware &#123; private String name; private int age; private String favouriteColour; private String jobTitle; public int getAge() &#123; return age; &#125; @Required public void setAge(int age) &#123; this.age = age; &#125; public String getName() &#123; return name; &#125; @MyRequired public void setName(String name) &#123; this.name = name; &#125; public String getFavouriteColour() &#123; return favouriteColour; &#125; @Required public void setFavouriteColour(String favouriteColour) &#123; this.favouriteColour = favouriteColour; &#125; public String getJobTitle() &#123; return jobTitle; &#125; @Required public void setJobTitle(String jobTitle) &#123; this.jobTitle = jobTitle; &#125; @Override @Required public void setBeanName(String name) &#123; &#125; @Override @Required public void setBeanFactory(BeanFactory beanFactory) &#123; &#125; public static RequiredTestBean create() &#123; return new RequiredTestBean(); &#125;&#125; RequiredAnnotationBeanPostProcessor.java 主要是这个处理类来做事情，代码太多，我贴出来最重要的一个方法，异常也是该方法抛出的，这是程序抛出异常的最后一步：123456789101112131415161718192021@Override public PropertyValues postProcessPropertyValues( PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName) throws BeansException &#123; if (!this.validatedBeanNames.contains(beanName)) &#123; if (!shouldSkip(this.beanFactory, beanName)) &#123; List&lt;String&gt; invalidProperties = new ArrayList&lt;String&gt;(); for (PropertyDescriptor pd : pds) &#123; if (isRequiredProperty(pd) &amp;&amp; !pvs.contains(pd.getName())) &#123; invalidProperties.add(pd.getName()); &#125; &#125; if (!invalidProperties.isEmpty()) &#123; throw new BeanInitializationException(buildExceptionMessage(invalidProperties, beanName)); &#125; &#125; this.validatedBeanNames.add(beanName); &#125; return pvs; &#125; 下面我们开始debug:前期是各种类的注入，异常是最后一步抛出来的，我们直接从最后一步开始 第一步：factory.preInstantiateSingletons();调用的是：DefaultListableBeanFactory.preInstantiateSingletons() line: 7721234567@Override public void preInstantiateSingletons() throws BeansException &#123; .... getBean(beanName); .... &#125; 第二步：调用DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 1971234@Override public Object getBean(String name) throws BeansException &#123; return doGetBean(name, null, null, false); &#125; 第三步：调用DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class, Object[], boolean) line: 3021234567891011121314151617181920212223@SuppressWarnings(&quot;unchecked&quot;) protected &lt;T&gt; T doGetBean( final String name, final Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException &#123; .... sharedInstance = getSingleton(beanName, new ObjectFactory&lt;Object&gt;() &#123; @Override public Object getObject() throws BeansException &#123; try &#123; return createBean(beanName, mbd, args); //在回调方法里创建对象 &#125; catch (BeansException ex) &#123; // Explicitly remove instance from singleton cache: It might have been put there // eagerly by the creation process, to allow for circular reference resolution. // Also remove any beans that received a temporary reference to the bean. destroySingleton(beanName); throw ex; &#125; &#125; &#125;); ....&#125; 第四步：调用DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory&lt;?&gt;) line: 23012345public Object getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory) &#123; ... singletonObject = singletonFactory.getObject(); ...&#125; 第五步：调用AbstractBeanFactory$1.getObject() line: 306 ，回到第三步的ObjectFactory.getObject方法 第六步：DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 48212345678@Override protected Object createBean(String beanName, RootBeanDefinition mbd, Object[] args) throws BeanCreationException &#123; .... Object beanInstance = doCreateBean(beanName, mbdToUse, args); .... &#125; 第七步：调用DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 543123456protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args) &#123; ... populateBean(beanName, mbd, instanceWrapper); ...&#125; 第八步：调用DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).populateBean(String, RootBeanDefinition, BeanWrapper) line: 1214123456789101112131415161718192021protected void populateBean(String beanName, RootBeanDefinition mbd, BeanWrapper bw) &#123; .... boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors(); boolean needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE); if (hasInstAwareBpps || needsDepCheck) &#123; PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching); if (hasInstAwareBpps) &#123; for (BeanPostProcessor bp : getBeanPostProcessors()) &#123; if (bp instanceof InstantiationAwareBeanPostProcessor) &#123; InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp; pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName); //调用RequiredAnnotationBeanPostProcessor.postProcessPropertyValues方法 if (pvs == null) &#123; return; &#125; &#125; &#125; &#125; ....&#125; 到此，走到RequiredAnnotationBeanPostProcessor.postProcessPropertyValues方法，处理抛出了异常。]]></content>
  </entry>
  <entry>
    <title><![CDATA[spring源码 赏析：一]]></title>
    <url>%2F2018%2F11%2F22%2Fspring%E6%BA%90%E7%A0%81%E4%B8%80%2F</url>
    <content type="text"><![CDATA[超级接口标记，指示bean有资格由Spring容器通过回调式方法通知特定框架对象。实际的方法签名由单独的子接口确定，但是通常应该只包含一个接受单个参数的空返回方法。注意，仅实现{@link Aware}不提供默认功能。相反，处理必须显式地完成，例如{@link org.springframework.beans…config.BeanPostProcessor BeanPostProcessor}。 参见{@link org.springframework.context…ApplicationContextAwareProcessor} 以及{@link org.springframework.beans…..AbstractAutowireCapableBeanFactory} 处理{@code *Aware}}接口回调的例子。1234567891011121314151617181920212223package org.springframework.beans.factory;/** * Marker superinterface indicating that a bean is eligible to be * notified by the Spring container of a particular framework object * through a callback-style method. Actual method signature is * determined by individual subinterfaces, but should typically * consist of just one void-returning method that accepts a single * argument. * * &lt;p&gt;Note that merely implementing &#123;@link Aware&#125; provides no default * functionality. Rather, processing must be done explicitly, for example * in a &#123;@link org.springframework.beans.factory.config.BeanPostProcessor BeanPostProcessor&#125;. * Refer to &#123;@link org.springframework.context.support.ApplicationContextAwareProcessor&#125; * and &#123;@link org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory&#125; * for examples of processing &#123;@code *Aware&#125; interface callbacks. * * @author Chris Beams * @since 3.1 */public interface Aware &#123;&#125; Java中isAssignableFrom的用法class1.isAssignableFrom(class2) 判定此 Class 对象所表示的类或接口与指定的 Class 参数所表示的类或接口是否相同，或是否是其超类或超接口。如果是则返回 true；否则返回 false。如果该 Class 表示一个基本类型，且指定的 Class 参数正是该 Class 对象，则该方法返回 true；否则返回 false。class2是不是class1的子类或者子接口1234567891011121314151617181920212223242526public String[] getBeanNamesForType(@Nullable ResolvableType type) &#123; boolean isFactoryType = false; if (type != null) &#123; Class&lt;?&gt; resolved = type.resolve(); if (resolved != null &amp;&amp; FactoryBean.class.isAssignableFrom(resolved)) &#123; isFactoryType = true; &#125; &#125; List&lt;String&gt; matches = new ArrayList&lt;&gt;(); for (Map.Entry&lt;String, Object&gt; entry : this.beans.entrySet()) &#123; String name = entry.getKey(); Object beanInstance = entry.getValue(); if (beanInstance instanceof FactoryBean &amp;&amp; !isFactoryType) &#123; Class&lt;?&gt; objectType = ((FactoryBean&lt;?&gt;) beanInstance).getObjectType(); if (objectType != null &amp;&amp; (type == null || type.isAssignableFrom(objectType))) &#123; matches.add(name); &#125; &#125; else &#123; if (type == null || type.isInstance(beanInstance)) &#123; matches.add(name); &#125; &#125; &#125; return StringUtils.toStringArray(matches); &#125; spring BeanDefinitionBuilder 建造者模式构造BeanDefinition123456BeanDefinition beanDef = BeanDefinitionBuilder .genericBeanDefinition(RequiredTestBean.class) .addPropertyValue(&quot;name&quot;, &quot;Rob Harrop&quot;) .addPropertyValue(&quot;favouriteColour&quot;, &quot;Blue&quot;) .addPropertyValue(&quot;jobTitle&quot;, &quot;Grand Poobah&quot;) .getBeanDefinition(); 关于spring5 ReactiveAdapterRegistry 编译后报错需要jdk91The type java.util.concurrent.Flow$Publisher cannot be resolved. It is indirectly referenced from required .class files]]></content>
  </entry>
  <entry>
    <title><![CDATA[如何基于hexo搭建博客]]></title>
    <url>%2F2018%2F11%2F21%2F%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前言：基于hexo建站百度已有类似很多文章，我就不重复画瓢了。不买服务器的话推荐gitee作为服务器托管。亲测gitee比github快10倍！！！ hexo相关官方网站我使用的hexo+gitee+next（主题） hexo：https://hexo.io/zh-cn/docs/ NexT（hexo主题）：https://theme-next.iissnan.com/ 如有问题请加QQ群：793379854（计算机课设不会做）]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建hexo遇到的问题]]></title>
    <url>%2F2018%2F11%2F21%2F%E6%90%AD%E5%BB%BAhexo%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[如何引用自己的文章12&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;例：&#123;% post_link 关于ShSx-G的由来 ShSx.G %&#125; 发布的图片太大（1M的图片在githubpage中卡的不能看）12我的解决方案是将图片压缩，我的用的一个在线压缩图片的网址是：https://tinypng.com/亲测1M的可以压到200k，图片清晰度还可以 nginx作为hexo的服务器访问503因为没有文件的访问权限测试nginx配置文件123[root@iz2ze88p52tbioqel09nmrz ~]# nginx -tnginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful 打开nginx.conf ,修改user nginx 为user root，然后重新载入配置文件命令：nginx -s reload12345678# For more information on configuration, see:# * Official English Documentation: http://nginx.org/en/docs/# * Official Russian Documentation: http://nginx.org/ru/docs/user root;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid; nginx其他常用命令1234nginx # 启动 Nginxnginx -s reload # 重新载入配置文件nginx -s reopen # 重启 Nginxnginx -s stop # 停止 Nginx]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于ShSx.G的由来]]></title>
    <url>%2F2018%2F11%2F19%2F%E5%85%B3%E4%BA%8EShSx-G%E7%9A%84%E7%94%B1%E6%9D%A5%2F</url>
    <content type="text"><![CDATA[ShSx.G是我为我自己起的一个英文名字，鉴于我的英文知识比较匮乏，我也不知道这么拼写到底合不合法，反正都是英文字母和英文标点符号，应该没有什么大问题。 G的由来 我姓高，取高的拼音首字母G ShSx的由来来源于四大名著的拼音首字母，《三国演义》（S），《红楼梦》（H），《水浒传》（S），《西游记》（X）。忽略大小写，排名分先后，代表了四大名著在我心中的位置。 三国演义 此桥段是皇叔一言不慎，差点被砍死的截图。论：少说话，多做事的重要性 皇叔：我X，我刚才说了什么？ 刘表：这小子说谁呢？？]]></content>
      <categories>
        <category>about</category>
      </categories>
      <tags>
        <tag>ShSx.G</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[About Me]]></title>
    <url>%2F2018%2F11%2F18%2Fabout%2F</url>
    <content type="text"><![CDATA[个人简介 我是 ShSx.G （主要是看大家都有），javaer，现在居住在北京，未来想去杭州发展。鉴于我的英文名字不好拼，拼出来也不好听，所以还是不要叫我的英文名字了。由于我擅长画瓢，可以叫我小瓢（^_^）！！！如果用一个词形容自己的话，我觉得是：善良。 教育背景 毕业院校 专业 时间 学历 兰州理工大学 软件工程 2013-9至2017-6 本科 工作经历 工作单位 职位 时间 用友 软件开发实习生 2016-12至2017-5 用友 软件开发工程师 2017-6至今 我做过什么 目前维护公司的ToB的审批流平台，与审批流相关的业务还算了解 工作中做过eclipse插件，以帮助公司的其他项目快速开发 使用java写了一个类似于有道词典的划屏取词的工具 使用Hexo+nignx+git搭建个人博客 我的希望 目前想在杭州找一份java开发的相关工作，如果有合适的岗位，可以给我发一份邮件，或者打电话聊聊，非常感谢(^_^)！我的邮箱：1183782035@qq.com我的电话：13401002587]]></content>
      <categories>
        <category>about</category>
      </categories>
      <tags>
        <tag>about</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux之ln的用法]]></title>
    <url>%2F2018%2F11%2F12%2Flinux%E4%B9%8Bln%E7%9A%84%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1、软链接就是：ln –s 源文件 目标文件，只会在选定的位置上生成一个文件的镜像，不会占用磁盘空间，类似与windows的快捷方式。 2、硬链接ln源文件目标文件，没有参数-s，会在选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。 例： ①ln -s /usr/software/nodejs/bin/npm /usr/local/bin/ ②ln -s /usr/software/nodejs/bin/node /usr/local/bin/]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F11%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hello</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2018年1月3日-学习日志]]></title>
    <url>%2F2018%2F01%2F03%2F2018%E5%B9%B41%E6%9C%883%E6%97%A5-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[余尝曰：读《金瓶梅》而生怜悯心者，菩萨也；生畏惧心者，君子也；生欢喜心者，小人也；生效法心者，乃禽兽耳。 Sql优化之in与join的爱恨情仇流程设计相关流程查询原sql:12345SELECT * FROM `icop-bpm`.`act_re_model` m WHERE m.deployment_id_ IN (SELECT p.deployment_id_ FROM act_re_procdef p WHERE p.key_ IN( SELECT c.`prodefkey` FROM `bpm_billconfig` c WHERE c.`orgid` IN ('first0001company') AND c.`iscontainsub`=1 UNION SELECT c.`prodefkey` FROM `bpm_billconfig` c INNER JOIN `bpm_billconfig_org` g ON g.`configid` = c.`id` AND g.`orgid` ='8a83898e56f96bc6015703ab3032002b' WHERE c.`orgid` IN ('first0001company') AND (c.`iscontainsub` IS NULL OR c.`iscontainsub`=0))) AND name_ LIKE '%%' ORDER BY CONVERT( name_ USING GBK); 耗时:2.365sec优化后sql:1234SELECT * FROM `icop-bpm`.`act_re_model` m WHERE m.deployment_id_ IN( SELECT p.deployment_id_ FROM act_re_procdef p INNER JOIN (SELECT c.`prodefkey` AS prodefkey FROM `bpm_billconfig` c WHERE c.`orgid` IN ('first0001company') AND c.`iscontainsub`=1 UNION SELECT c.`prodefkey` AS prodefkey FROM `bpm_billconfig` c INNER JOIN `bpm_billconfig_org` g ON g.`configid` = c.`id` AND g.`orgid` ='8a83898e56f96bc6015703ab3032002b' WHERE c.`orgid` IN ('first0001company') AND (c.`iscontainsub` IS NULL OR c.`iscontainsub`=0)) g ON g.prodefkey=p.`KEY_`) AND name_ LIKE '%%' ORDER BY CONVERT( name_ USING GBK); 耗时:0.045sec总结:将流程部署表根据key的in查询修改为inner join 查询. java时间转换成毫秒值123456789101112private SimpleDateFormat dateformat;private long time;private long getMills()&#123; dateformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); //时间格式 try &#123; time = dateformat.parse("1971-01-01 00:00:00").getTime();//格式转换 System.out.println(time); &#125; catch (java.text.ParseException e) &#123; e.printStackTrace(); &#125; return time;&#125; Js Date 对象原型添加格式化// 对Date的扩展，将 Date 转化为指定格式的String// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)// 例子：// (new Date()).Format(“yyyy-MM-dd hh:mm:ss.S”) ==&gt; 2006-07-02 08:09:04.423// (new Date()).Format(“yyyy-M-d h:m:s.S”) ==&gt; 2006-7-2 8:9:4.18123456789101112131415Date.prototype.Format = function (fmt) &#123; //author: nature var o = &#123; "M+": this.getMonth() + 1, //月份 "d+": this.getDate(), //日 "h+": this.getHours(), //小时 "m+": this.getMinutes(), //分 "s+": this.getSeconds(), //秒 "q+": Math.floor((this.getMonth() + 3) / 3), //季度 "S": this.getMilliseconds() //毫秒 &#125;; if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length)); for (var k in o) if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length))); return fmt;&#125; Springmvc @PathVariable()注解用法通过@ PathVariable注解获取的参数如果有小数点，会自动过滤掉小数点和小数点后面的字符，两种方法可以解决，第一种：1、问题SpringMVC项目中通过下面的ＵＲＬ进行GET请求。当version有多个小数点的时候。如version为1.0.1008。后台通过@PathVariable来获取version等于1.0。会丢失部分数据。URL:http://host_ip/consumer/appVersion/phone/android/download/{version}Controller:1234@RequestMapping(value="android/download/&#123;version&#125;",method=RequestMethod.GET)public void download(HttpSession session,HttpServletResponse response,@PathVariable("version")String version)&#123;&#125; 2、解决方案在version段后增加一个静态的字符段，这个段没有任何意义，可以为任意字符。URL:http://host_ip/consumer/appVersion/phone/android/download/{version}/static_str问题虽然解决了，但毕竟URL后多了个小尾巴，心情不愉悦。再次谷哥。参考：http://stackoverflow.com/questions/3526523/spring-mvc-pathvariable-getting-truncatedURL不加小尾巴。在@RequestMapping的value中使用SpEL来表示，value中的{version}换成{version:.+}。1234@RequestMapping(value="android/download/&#123;version:.+&#125;",method=RequestMethod.GET)public void download(HttpSession session,HttpServletResponse response,@PathVariable("version")String version)&#123;&#125; Mysql在windows上的安装Mysql windows上的安装分为两种：第一种是msi安装，该安装时直接下一步就行，如果以前安装过，在安装过程出现问题，记得删除注册表。第二种是免安装的，解压压缩文件包，但是需对my.ini文件进行配置，basedir和datadir是必须的，（1） 以管理员身份运行cmd，进入到bin目录下（2） 复制一个my-default.ini,名称为my.ini,配置basedir路径和datadir路径（3） 安装：执行 mysqld install, 正确的提示语为Service successfully installed.（4） 启动：net start mysql 启动成功：MySQL 服务已经启动成功。 Npm命令npm install 报错今天遇到一个问题，在npm install 的时候报错，我以为是远程库的问题，换了淘宝镜像之后还是不行最后在该路径下打印报错信息：D:\Program Files\nodejs\node_modules\npm\node_modules\pacote\node_modules\make-fetch-happen\node_modules\node-fetch-npm\node_modules\json-parse-better-errorsIndex.js文件1234try &#123; return JSON.parse(txt, reviver) &#125; catch (e) &#123;console.log(&quot;error message：&quot;+txt); 后来发现是缓存的问题：执行给命令：清理缓存1npm cache clean –force 然后在 npm install]]></content>
  </entry>
  <entry>
    <title><![CDATA[2017年12月28日-学习日志]]></title>
    <url>%2F2017%2F12%2F28%2F2017%E5%B9%B412%E6%9C%8828%E6%97%A5-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[时间是不会等待的，无论发生什么事，它都会一如既往的向前走。 如何配置SLF4J不同的日志实现最近使用在学习shiro，在网上找了一个demo，在test的时候总是报错但是test是通过的百度知道上看到一篇很好的回答：使用slf4j库作为你的Java应用日志API层有很多好处，这里我会展示一小部分关于如何使用和配置它的例子。你可以把slf4j想成一个Java的接口，然后你需要实现这个接口，从而在运行时提供实际的日志记录，例如把日志写到控制台(STDOUT)或者一个文件上等等。每种实现（或成为绑定）都显而易见地有他们自己的方式来配置日志的输出，但是你的应用对实现者并无感知并且一直使用相同的org.slf4j.Logger API。让我们看看如何在实际中使用它。使用slf4j做简单的日志记录创建基于Maven的工程，在pom.xml中添加如下内容12345&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.5&lt;/version&gt;&lt;/dependency&gt; 现在你可以在你的Java代码中这样使用Logger1234567891011121314package deng;import org.slf4j.*;public class Hello &#123; static Logger LOGGER = LoggerFactory.getLogger(Hello.class); public static void main(String[] args) &#123; for (int i = 0; i &lt; 10; i++) if (i % 2 == 0) LOGGER.info(&quot;Hello &#123;&#125;&quot;, i); else LOGGER.debug(&quot;I am on index &#123;&#125;&quot;, i); &#125;&#125; 以上代码可以编译通过，但是当你运行它时，你会看到这样的输出1234bash&gt; java deng.HelloSLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.SLF4J: Defaulting to no-operation (NOP) logger implementationSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details. 上面的意思是，在运行时，你没有做日志的实现（或者说日志的绑定），所以slf4j简简单单的使用了一个什么也不会做的空实现。为了看到正确的输出，你应该尝试使用一个简单（simple）的实现，这个实现根本不需要任何配置！只要回到pom.xml然后添加如下配置12345&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt; &lt;version&gt;1.7.5&lt;/version&gt;&lt;/dependency&gt; 现在你可以在控制台(STDOUT)看见INFO级别的日志输出了。这个简单的logger会默认显示任何INFO或者更高级别的信息。想要看DEBUG级别的信息，你需要在Java启动时传入这个系统属性(system property)-Dorg.slf4j.simpleLogger.defaultLogLevel=DEBUG使用slf4j与Log4j日志现在我们可以试验并更换不同的日志实现，但你的程序代码可以保持不变。我们要做的是用另一个流行的日志实现来替换掉slf4j-simple，比如Log4j。12345&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.5&lt;/version&gt;&lt;/dependency&gt; 又一次，我们必须对我们选的每一个日志实现做配置。在这个例子中，我们需要一个文件src/main/resources/log4j.properties。12345log4j.rootLogger=DEBUG, STDOUTlog4j.logger.deng=INFOlog4j.appender.STDOUT=org.apache.log4j.ConsoleAppenderlog4j.appender.STDOUT.layout=org.apache.log4j.PatternLayoutlog4j.appender.STDOUT.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n 重运行你的程序，你会看到同样的输出结果。使用slf4j和JDK日志JDK实际上带有一个日志包，你可以在pom.xml中替换为另一个日志实现。12345&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-jdk14&lt;/artifactId&gt; &lt;version&gt;1.7.5&lt;/version&gt;&lt;/dependency&gt; 现在JDK日志的配置起来有一点困难。这里不仅需要一个配置文件src/main/resources/logging.properties，你还需要添加一个系统属性-Djava.util.logging.config.file=logging.properties这是一个logging.properties的示例1234level=INFOhandlers=java.util.logging.ConsoleHandlerjava.util.logging.ConsoleHandler.level=FINESTdeng.level=FINEST 使用slf4j和Logback日志Logback日志实现是一个高质量的实现。如果你想在项目中写认真的代码，你会想要考虑这中方式。还是修改你的pom.xml文件，替换成这样12345&lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.0.13&lt;/version&gt;&lt;/dependency&gt; 这是一个简单的配置src/main/resources/logback.xml12345678910111213&lt;configuration&gt; &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;logger name=&quot;deng&quot; level=&quot;DEBUG&quot;/&gt; &lt;root level=&quot;INFO&quot;&gt; &lt;appender-ref ref=&quot;STDOUT&quot; /&gt; &lt;/root&gt;&lt;/configuration&gt; 用slf4j写你自己的日志库如果你正在很多终端用户(END USER)提供Java库，那么让你的项目仅依赖slf4j-api绝对是个好想法，然后让你的用户在他们开发和运营环境中选择任意的日志实现。作为终端用户，他们可以快速地从上面提到的日志库中选择一个，并且从他们自己喜欢的日志实现的特性中受益。slf4j log4j logback之间的关系，哪个更好些SLF4J(The Simple Logging Facade for Java)官方文档是这样说明的 The Simple Logging Facade for Java (SLF4J) serves as a simple facade or abstraction for various logging frameworks, such as java.util.logging, logback and log4j. SLF4J allows the end-user to plug in the desired logging framework at deployment time. Note that SLF4J-enabling your library/application implies the addition of only a single mandatory dependency, namely slf4j-api-1.7.22.jar. 简答的讲就是slf4j是一系列的日志接口，而log4j logback是具体实现了的日志框架。 因为是接口，所以在项目中如果你不引用log4j 、logback或者其它日志框架你会发现，控制台的输出是这样的 从运行结果可以看到，由于没有给出具体的logger实现，无法在控制台输出日志。也就是说我们在具体开发中，需要绑定一个日志框架，才能正常的使用slf4j。 log4j和logback呢而log4j和logback就是两个受欢迎的日志框架。但两者又有不同。• log4j是apache实现的一个开源日志组件。（Wrapped implementations）• logback同样是由log4j的作者设计完成的，拥有更好的特性，用来取代log4j的一个日志框架。是slf4j的原生实现。（Native implementations） 接下来一起看一下应用程序对日志框架的调用关系，看下图 可以看到logback是直接实现了slf4j的接口，而log4j不是对slf4j的原生实现，所以slf4j api在调用log4j时需要一个适配层。 官方文档对logback是这样说的: Native implementation There are also SLF4J bindings external to the SLF4J project, e.g.logback which implements SLF4J natively. Logback’sch.qos.logback.classic.Logger class is a direct implementation of SLF4J’sorg.slf4j.Logger interface.Thus, using SLF4J in conjunction with logback involves strictly zero memory and computational overhead. 也就是说logback实现slf4j是不消耗内存和计算开销的。 最后总结一下： slf4j是java的一个日志门面，实现了日志框架一些通用的api，log4j和logback是具体的日志框架。 他们可以单独的使用，也可以绑定slf4j一起使用。• 单独使用。分别调用框架自己的方法来输出日志信息。• 绑定slf4j一起使用。调用slf4j的api来输入日志信息，具体使用与底层日志框架无关（需要底层框架的配置文件）显然这里我们不推荐单独使用日志框架。假设项目中已经使用了log4j，而我们此时加载了一个类库，而这个类库依赖另一个日志框架。这个时候我们就需要维护两个日志框架，这是一个非常麻烦的事情。而使用了slf4j就不同了，由于应用调用的抽象层的api，与底层日志框架是无关的，因此可以任意更换日志框架。解密Log4j、SLF4J、Common-logging的区别前面有一篇日志中简单的介绍了 log4j，同时也介绍了它与commons-logging的关系，但是突然冒出来一个slf4j，并且slf4j有取代commons-logging的趋势，所以，我们可以推知slf4j与commons-logging的作用应该相差不大的。 好，下面开始先讲讲slf4j。1.slf4j他只提供一个核心slf4j api(就是slf4j-api.jar包)，这个包只有日志的接口，并没有实现，所以如果要使用就得再给它提供一个实现了些接口的日志包，比 如：log4j,common logging,jdk log日志实现包等，但是这些日志实现又不能通过接口直接调用，实现上他们根本就和slf4j-api不一致，因此slf4j又增加了一层来转换各日志实 现包的使用，当然slf4j-simple除外。 slf4j+log4j组合使用模式： slf4j-api-1.5.11.jar slf4j-log4j12-1.5.11.jar log4j-1.2.15.jar log4j.properties(也可以是 log4j.xml) JCL+Log4J组合使用模式（即commons-logging+log4j）： commons-logging-1.1.jar log4j-1.2.15.jar log4j.properties 2.不同的获取logger的方式log4j：12import org.apache.log4j.Logger;Logger logger= Logger.getLogger(xx.class); slf4j+log4j：123import org.slf4j.Logger;import org.slf4j.LoggerFactory;Logger logger = LoggerFactory.getLogger(xx.class); jcl+log4j:123import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory;private static Log log = LogFactory.getLog(xx.class); 注意：common-longing是默认支持log4j的，使用其他日志工具需要做下面的配置：common-logging.properties org.apache.commons.logging.Log=org.apache.commons.logging.impl.Log4JCategoryLog 3.总结 总的来说，slf4j与commons-logging只是一个日志门面，实际还是要依赖真正的日志库log4j，虽然slf4j和commons-loggins自带了日志库，但是毕竟log4j才是最强大的。因为以前没有博客，我都是将自己喜欢的内容粘贴到word文档中，这是从以前word导入过来的内容，原url找不到了，不是原创，感谢开源，感谢分享，侵删！]]></content>
  </entry>
  <entry>
    <title><![CDATA[2017年12月14日-学习日志]]></title>
    <url>%2F2017%2F12%2F14%2F2017%E5%B9%B412%E6%9C%8814%E6%97%A5-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[慢慢来不要急，你想要的都会有的 Js自调12!function ($) &#123; //code her&#125;(window.jQuery);高级的自调函数的一种写法(function ($) &#123; //code her&#125;)(window.jQuery) 普通自调函数的一种写法 括号使得里面的匿名函数变成函数表达式！的运算优先级低于括号朔所以可以达到相同的效果1var Name=function(parameters)&#123;//这里是块级作用域&#125;;Name();//调用匿名函数 函数表达式是在运行中以引用的方式赋值给一个变量的，如上面的函数创建的方式。而这里函数表达式和函数声明是不一样的，函数声明的通常形式如下：1function Name(parameters)&#123; //code here&#125; 函数声明会在程序刚开始运行的时候会被提升（所以可以在执行之后声明），但是并不执行，直到被调用的时候再执行。 Js()表达式总结：()运算，返回的是括号里面的最后一个参数]]></content>
  </entry>
  <entry>
    <title><![CDATA[hello]]></title>
    <url>%2F2017%2F11%2F09%2Fhello%2F</url>
    <content type="text"><![CDATA[这是一个标题这是一个指令System.print.out("Hello Hexo!") Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing contentvvdafsadfasdf fasdfadfasdfasdf]]></content>
      <categories>
        <category>hello</category>
      </categories>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
</search>

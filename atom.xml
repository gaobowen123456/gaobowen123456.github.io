<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>照葫芦画瓢</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-04T03:13:26.310Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ShSx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>k8s培训</title>
    <link href="http://yoursite.com/2018/12/04/k8s%E5%9F%B9%E8%AE%AD/"/>
    <id>http://yoursite.com/2018/12/04/k8s培训/</id>
    <published>2018-12-04T02:14:37.000Z</published>
    <updated>2018-12-04T03:13:26.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要用k8s"><a href="#为什么要用k8s" class="headerlink" title="为什么要用k8s"></a>为什么要用k8s</h1><p>rancher ，k8s，docker原生，</p><h1 id="k8s多master的安装"><a href="#k8s多master的安装" class="headerlink" title="k8s多master的安装"></a>k8s多master的安装</h1><p>kube-controller—manager  有很多controller，私有云搭建使用这个<br>cloud-controller—manager 近期出现的版本，给云供应商来控制<br>kube-apiserver 通信的接口，对内通信还有通过<br>etcd 元数据存了那些信息<br>kube-sheduler<br>所有的数据的存储，通过kube-apiserver沟通<br>kubelet<br>kube-proxy<br>1.k8s cluster 所有元数据都存在etcd cluter中<br>2.所有元数据的存储都通过API server来实现的<br>总结manager用来管理</p><h1 id="k8s的常用概念"><a href="#k8s的常用概念" class="headerlink" title="k8s的常用概念"></a>k8s的常用概念</h1><h1 id="架构与运维路线图"><a href="#架构与运维路线图" class="headerlink" title="架构与运维路线图"></a>架构与运维路线图</h1><h1 id="ansible"><a href="#ansible" class="headerlink" title="ansible"></a>ansible</h1><p>ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、cfengine、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。<br>ansible是基于模块工作的，本身没有批量部署的能力。真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架。主要包括：<br>(1)、连接插件connection plugins：负责和被监控端实现通信；<br>(2)、host inventory：指定操作的主机，是一个配置文件里面定义监控的主机；<br>(3)、各种模块核心模块、command模块、自定义模块；<br>(4)、借助于插件完成记录日志邮件等功能；<br>(5)、playbook：剧本执行多个任务时，非必需可以让节点一次性运行多个任务。</p><h1 id="k8s-架构——常用概念"><a href="#k8s-架构——常用概念" class="headerlink" title="k8s 架构——常用概念"></a>k8s 架构——常用概念</h1><ol><li>只能在单个主机上运行，跨主机通讯需要使用多个端口映射<br>2.pod  多个容器可以使用同一ip地址</li><li>网络<br>flannel<br>calico<br>4.coredns<br>每个服务都是唯一的域名</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么要用k8s&quot;&gt;&lt;a href=&quot;#为什么要用k8s&quot; class=&quot;headerlink&quot; title=&quot;为什么要用k8s&quot;&gt;&lt;/a&gt;为什么要用k8s&lt;/h1&gt;&lt;p&gt;rancher ，k8s，docker原生，&lt;/p&gt;
&lt;h1 id=&quot;k8s多master的
      
    
    </summary>
    
      <category term="k8s" scheme="http://yoursite.com/categories/k8s/"/>
    
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>垃圾收集器与内存分配策略</title>
    <link href="http://yoursite.com/2018/12/03/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2018/12/03/垃圾收集器与内存分配策略/</id>
    <published>2018-12-03T12:06:00.000Z</published>
    <updated>2018-12-04T02:11:12.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h1><p>给对象添加一个引用计数器，每当一个地方引用的时候，计数器加1，引用失效，计数器减1，任何时刻，计数器为0，<br>则则对象不可能在被使用。<br>此算法的问题：难以解决相互引用问题。<br>objA有一个属性引用了objB,objB有一个属性引用了objA，如果外界没有objA和objB的引用，则这两个对象就应该被回收。</p><h1 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h1><p>基本思路是通过一系列的称为”GC Roots”的对象作为起始点，从这些节点开始往下搜索，搜索走过的路径称为引用链（Reference Chain），<br>当一个对象到GC Roots没有任何引用链相连（称GC Roots 到这个对象不可达）时，则证明此对象不可用，可回收。<br>java中，可作为GC Roots的对象包括以下几种：<br>1.虚拟机栈（栈帧中的本地变量表）中引用的对象<br>2.方法区中静态属性引用的对象<br>3.方法区中常量引用的对象<br>4.本地方法栈中JNI引用的对象</p><h1 id="再谈引用"><a href="#再谈引用" class="headerlink" title="再谈引用"></a>再谈引用</h1><p>JDK1.2以前，java的引用定义：<br>如果reference类型的数据中存储的数据代表的是另一块数据内存的起始地址，就称为这块内存代表着一个引用。</p><p>JDK1.2之后，java对引用进行了扩充，强引用（Strong Reference）,软引用（Soft Reference），弱引用（Weak Reference），虚引用（Phantom Reference）4种，这4种强度依次减弱。</p><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>强引用普遍存在，类似Object obj=new Object(),只要强引用还存在，垃圾回收器永远不会回收掉引用的对象。</p><h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>描述一些还有用带不是必须的对象。在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行二次回收。<br>如果还没有足够的内存，再抛出异常。JDK1.2之后，提供了SoftReference类来实现软引用</p><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>弱引用也是用来描述非必须对象的，它比软引用更弱一些，被弱引用引用的对象只能生存到下次垃圾收集之前。当垃圾收集器工作时，<br>无论当前内存是否足够，都会回收掉直被弱引用关联的对象。JDK1.2之后，通过WeakReference类来实现弱引用。</p><h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>虚引用称为幽灵引用或者幻影引用。它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响。<br>也不能通过虚引用来取得一个对象实例。唯一的目的是对象被回收的时候可以收到一个系统通知。<br>JDK1.2以后通过PhantomReference来实现虚引用</p><h1 id="生存还是死亡"><a href="#生存还是死亡" class="headerlink" title="生存还是死亡"></a>生存还是死亡</h1><p>在可达性分析算法中不可达的对象，必须经历两次标记的过程才会被回收。<br>对象进行可达性分析后发现不可达，那它会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。<br>当对象没有覆盖finalize()方法或finalize()已经被虚拟机调用过，虚拟机将这两种情况视为”没必要执行”。<br>如果对象被判定为有必要执行finalize(),则将会将该对象放入一个队列。单独起一个线程调用队列中的finalize()方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引用计数算法&quot;&gt;&lt;a href=&quot;#引用计数算法&quot; class=&quot;headerlink&quot; title=&quot;引用计数算法&quot;&gt;&lt;/a&gt;引用计数算法&lt;/h1&gt;&lt;p&gt;给对象添加一个引用计数器，每当一个地方引用的时候，计数器加1，引用失效，计数器减1，任何时刻，计数器为0，&lt;
      
    
    </summary>
    
      <category term="jvm" scheme="http://yoursite.com/categories/jvm/"/>
    
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>java内存区域</title>
    <link href="http://yoursite.com/2018/12/03/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
    <id>http://yoursite.com/2018/12/03/java内存区域/</id>
    <published>2018-12-03T10:53:24.000Z</published>
    <updated>2018-12-03T12:03:12.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h1><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>线程私有</p><h2 id="java虚拟机栈"><a href="#java虚拟机栈" class="headerlink" title="java虚拟机栈"></a>java虚拟机栈</h2><p>线程私有</p><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>线程私有</p><h2 id="java堆"><a href="#java堆" class="headerlink" title="java堆"></a>java堆</h2><p>线程公有</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>存放被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据<br>线程公有（又称为永久代）<br>运行时常量池（Runtime Constant Pool）是方法去的一部分，用于存放编译器的各种字面量和符号引用。</p><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>直接内存（Direct Memory）不是虚拟机运行数据的一部分，也不是java虚拟机滚翻中定义的区域<br>在JDK1.4中新加入的NIO（New Input/Output）,引入了一种基于通道与缓冲区的I/O方式，可以使用Native<br>方式直接分配内存，然后通过一个存储在java堆中的DirectBuffer对象作为这块内存的的引用进行操作。<br>为了提高性能，避免在Java对和Native堆中来回复制。<br>直接内存不受java堆大小的限制，但是会受到本机内存大小的限制。</p><h1 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h1><p>new 指令之后，先检查后面的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用是否已经加载解析和初始化过<br>如果没有，先执行子昂用的类加载过程。<br>类加载检查通过后，虚拟机为新生的对象分配内存<br>分配内存有三种方式<br>指针碰撞（Bump the Pionter）<br>所有用过的内存放在一边，空闲的放在一边，中间放一个指针作为分界点的指示器，分配内存的时候将指针向空闲区域移动<br>空闲列表（Free List）<br>虚拟机维护一个列表，记录那部分内存可用，那部分内存不可用，分配内存的时候找一块足够大的空间划分给对象实例<br>本地线程缓存（Thread Local Allocation Buffer）</p><p>如果对象在虚拟中创建频繁，如何进行同步<br>1.虚拟机采用CAS配上失败重试的方式保证更新操作的原子性<br>2.把分配内存的操作按照线程进行划分不同的区域，每个线程在Java堆中先预先分配一小块内存称为本地线程缓存，当用完了TLAB，在进行同步锁定，可通过-XX:+/-useTLAB参数来设定</p><p>分配完内存后，虚拟机将分配到的内存初始化为零值（不包括对象头），这一步保证对象不进行初始化也可以使用</p><p>接下来，虚拟机要对对象头进行必要的设置，如 类的元数据信息，对象的哈希码，对象的GC分代年龄，是否启用偏向锁等</p><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p>对象在内存中的存储布局分为3中：<br>1.对象头（Header）<br>对象都存两部分<br>一部分用于存储对象自身运行时数据，如哈希码（hashCode），GC分代年龄，锁状态标志，线程持有锁，偏向线程ID，偏向时间戳等<br>这部分数据的长度在32位和64位虚拟机中大小分别为32和64.此区域会根据一些参数的启用来复用存储空间。<br>另一部分是类型指针，通过指针可以确定对象是哪个实例，但并不是所有的虚拟机实现都必须在对象数据上保留类型指针<br>2.实例数据（Instance Data）<br>对象真正存储的有效信息，也就是各个字段的内容，包括父类的<br>3.对其填充（Padding）<br>没有特别的意义，仅仅起占位符的作用。HotSpotVM的自动管理内存系统要求对象的大小必须是8字节的整倍数</p><h1 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h1><p>1.句柄访问<br>java堆划分出了一块内存作为句柄池，reference存储的是对象句柄池的地址，<br>句柄池包含了对象实例数据（java堆）和类型数据（方法区）的地址<br>2.直接指针<br>reference存储的是对象的地址<br>好处是速度快，Sun HotSpot 使用的是直接指针</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;运行时数据区域&quot;&gt;&lt;a href=&quot;#运行时数据区域&quot; class=&quot;headerlink&quot; title=&quot;运行时数据区域&quot;&gt;&lt;/a&gt;运行时数据区域&lt;/h1&gt;&lt;h2 id=&quot;程序计数器&quot;&gt;&lt;a href=&quot;#程序计数器&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="jvm" scheme="http://yoursite.com/categories/jvm/"/>
    
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>2018/12/3要做的事情清单</title>
    <link href="http://yoursite.com/2018/12/03/2018-12-3%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85%E6%B8%85%E5%8D%95/"/>
    <id>http://yoursite.com/2018/12/03/2018-12-3要做的事情清单/</id>
    <published>2018-12-03T02:19:30.000Z</published>
    <updated>2018-12-03T11:05:39.766Z</updated>
    
    <content type="html"><![CDATA[<h3 id="9-00-11：30-工作"><a href="#9-00-11：30-工作" class="headerlink" title="9:00-11：30 工作"></a>9:00-11：30 工作</h3><h3 id="11-30-12-00-吃饭"><a href="#11-30-12-00-吃饭" class="headerlink" title="11.30-12:00 吃饭"></a>11.30-12:00 吃饭</h3><h3 id="12-00-13：30-中间学习10个英文单词或英文语句，休息"><a href="#12-00-13：30-中间学习10个英文单词或英文语句，休息" class="headerlink" title="12:00-13：30 中间学习10个英文单词或英文语句，休息"></a>12:00-13：30 中间学习10个英文单词或英文语句，休息</h3><p>Guard well your thoughts when alone and your words when accompanied.<br>独处守住心，群处守住嘴<br>guard 英 [gɑ:d]   美 [gɑ:rd]<br>n.<br>警卫;狱吏，看守;护卫队;防护装置<br>vt.<br>看守;保卫，守护;加防护装置;谨慎使用<br>vi.<br>警卫;警惕</p><p>accompanied<br>v.<br>陪同;陪伴( accompany的过去式和过去分词 );伴随…同时发生;伴奏</p><p>Courage isn’t having the strength to go on.<br>It’s going on when you don’t have strength.<br>勇气不是有力气坚持下去，而是即使没有力气依然能够坚持。</p><p>courage<br>英 [ˈkʌrɪdʒ]   美 [ˈkɜ:rɪdʒ]<br>n.<br>勇气;胆量;魄力;肝胆</p><p>strength<br>英 [streŋθ]   美 [strɛŋkθ, strɛŋθ, strɛnθ]<br>n.<br>力量;优点，长处;（光、声、色等的）力度;人力[数]</p><p>going on 发生; 接近，快到<br>Direct Memory 直接内存<br>NIO  New Input/Output<br>channel 通道<br>buffer 缓冲区</p><h3 id="13：30-17-00-工作"><a href="#13：30-17-00-工作" class="headerlink" title="13：30-17:00 工作"></a>13：30-17:00 工作</h3><h3 id="17：00-19-00-一天总结，看java虚拟机这本书，并写一篇博客"><a href="#17：00-19-00-一天总结，看java虚拟机这本书，并写一篇博客" class="headerlink" title="17：00-19:00 一天总结，看java虚拟机这本书，并写一篇博客"></a>17：00-19:00 一天总结，看java虚拟机这本书，并写一篇博客</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;9-00-11：30-工作&quot;&gt;&lt;a href=&quot;#9-00-11：30-工作&quot; class=&quot;headerlink&quot; title=&quot;9:00-11：30 工作&quot;&gt;&lt;/a&gt;9:00-11：30 工作&lt;/h3&gt;&lt;h3 id=&quot;11-30-12-00-吃饭&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="清单" scheme="http://yoursite.com/categories/%E6%B8%85%E5%8D%95/"/>
    
    
      <category term="清单" scheme="http://yoursite.com/tags/%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>java线程安全与锁优化</title>
    <link href="http://yoursite.com/2018/11/30/java%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2018/11/30/java线程安全与锁优化/</id>
    <published>2018-11-30T10:31:25.000Z</published>
    <updated>2018-11-30T12:41:14.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程安全的实现方法"><a href="#线程安全的实现方法" class="headerlink" title="线程安全的实现方法"></a>线程安全的实现方法</h1><h2 id="1-互斥同步"><a href="#1-互斥同步" class="headerlink" title="1.互斥同步"></a>1.互斥同步</h2><p>互斥同步是是常见的一种并发正确性保障手段。<br>同步是指在在多线程并发访问共享数据时，保证共享数据在同一时刻只被一个（或者是一些，使用信号量的时候）线程使用。<br>互斥是实现同步的一种手段<br>互斥的实现三种方式</p><ol><li>临界区</li><li>互斥量</li><li>信号量</li></ol><h3 id="java-中最基本的互斥同步手段是使用synchronized"><a href="#java-中最基本的互斥同步手段是使用synchronized" class="headerlink" title="java 中最基本的互斥同步手段是使用synchronized"></a>java 中最基本的互斥同步手段是使用synchronized</h3><p>synchronized被编译后，同步块前后会形成monitorenter和monitorexit这两个字节码指令，<br>这两个指令都需要一个reference类型的参数来指定锁定和解锁的对象<br>如果synchronized指定了对象参数，那就是这个对象的reference<br>如果没有指定，根据修饰的是类方法还是实例方法类确定<br>修饰的类方法：Class对象<br>实例方法：对象实例</p><h3 id="使用java-util-concurrent下的ReentrantLock（重入锁）"><a href="#使用java-util-concurrent下的ReentrantLock（重入锁）" class="headerlink" title="使用java.util.concurrent下的ReentrantLock（重入锁）"></a>使用java.util.concurrent下的ReentrantLock（重入锁）</h3><p>ReentrantLock相对与synchronized的增强</p><h5 id="等待可中断"><a href="#等待可中断" class="headerlink" title="等待可中断"></a>等待可中断</h5><p>是指当持有锁的线程长时间不释放锁的时候，正在等待的线程可以选择放弃等待，去做其他的事情。</p><h5 id="可实现公平锁"><a href="#可实现公平锁" class="headerlink" title="可实现公平锁"></a>可实现公平锁</h5><p>是指多个线程在等待同一个锁的时候，必须按着申请锁的时间顺序依次获取锁。synchronized和ReentrantLock默认是非公平锁</p><h5 id="锁可以绑定多个条件"><a href="#锁可以绑定多个条件" class="headerlink" title="锁可以绑定多个条件"></a>锁可以绑定多个条件</h5><p>synchronized锁对象的wait(),notify(),notifyAll()方法可以实现一个隐含的条件。想要增加条件关联，必须增加锁。<br>而ReentrantLock只需要new Condition()即可<br>jdk1.5版本ReentrantLock的吞吐量是优于synchronized的<br>jdk1.6做了优化，提倡在synchronized能实现的情况下，优先使用synchronized</p><h2 id="2-非阻塞同步"><a href="#2-非阻塞同步" class="headerlink" title="2.非阻塞同步"></a>2.非阻塞同步</h2><p><strong>互斥同步主要是线程阻塞和唤醒所带来的性能问题，所有这种同步也成为阻塞同步</strong><br>从处理问题的方式来看，互斥同步属于一种<strong>悲观并发策略</strong>，总是认为只要不同步，就会出现问题<br>另一种方式是基于冲突检测的<strong>乐观并发策略</strong>，假设没有冲突，先进行操作，如果没有其他线程争用共享数据，<br>则操作成功，如果有，产生了冲突，采用补偿机制，最常用的补偿机制是<strong>(不断重试，直到成功为止)</strong><br>最常用的技术就是<strong>CAS（Compare-and—Swap）</strong><br>CAS有三个值<br>V(内存地址)<br>A(旧的预期值)<br>B(新值)<br>当且仅当V符合旧的预期值A时，处理器用新的B更新V的值，否则不会更新，但是无论是否更新，都会返回V的旧值。</p><p>CAS有个漏洞<strong>ABA</strong>问题，可通过为值加版本号来解决</p><h2 id="3-无同步方案"><a href="#3-无同步方案" class="headerlink" title="3.无同步方案"></a>3.无同步方案</h2><p><strong>可重入代码</strong><br>如果一个方法，结果是可预测的，输入相同的数据，返回相同的结果，它就满足可重入性的要求，也就是线程安全的<br><strong>线程本地存储</strong><br>如果一个变量要被多线程访问，可以使用volatile关键字声明它为”易变的”<br>如果一个变量要被某线程独享，可以使用ThreadLocal，使用线程池的时候一定要注意线程复用问题</p><h1 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h1><h2 id="1-自旋锁和自适应自旋"><a href="#1-自旋锁和自适应自旋" class="headerlink" title="1.自旋锁和自适应自旋"></a>1.自旋锁和自适应自旋</h2><h2 id="2-锁消除"><a href="#2-锁消除" class="headerlink" title="2.锁消除"></a>2.锁消除</h2><h2 id="3-锁粗化"><a href="#3-锁粗化" class="headerlink" title="3.锁粗化"></a>3.锁粗化</h2><h2 id="4-轻量级锁"><a href="#4-轻量级锁" class="headerlink" title="4.轻量级锁"></a>4.轻量级锁</h2><h2 id="5-偏向锁"><a href="#5-偏向锁" class="headerlink" title="5.偏向锁"></a>5.偏向锁</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线程安全的实现方法&quot;&gt;&lt;a href=&quot;#线程安全的实现方法&quot; class=&quot;headerlink&quot; title=&quot;线程安全的实现方法&quot;&gt;&lt;/a&gt;线程安全的实现方法&lt;/h1&gt;&lt;h2 id=&quot;1-互斥同步&quot;&gt;&lt;a href=&quot;#1-互斥同步&quot; class=&quot;head
      
    
    </summary>
    
      <category term="线程安全" scheme="http://yoursite.com/categories/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="线程安全" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据库三大范式</title>
    <link href="http://yoursite.com/2018/11/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/11/27/数据库三大范式/</id>
    <published>2018-11-27T10:52:26.000Z</published>
    <updated>2018-11-27T13:09:40.768Z</updated>
    
    <content type="html"><![CDATA[<p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越良好结构的数据库，可以减少数据冗余。</p><h1 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h1><p>所谓第一范式（1NF）是指在关系模型中，对于添加的一个规范要求，所有的域都应该是原子性的，<strong>即数据库表的每一列都是不可分割的原子数据项</strong>，而不能是集合，数组，记录等非原子数据项。<br>什么叫做不可分割的原子项，比如有个<br>用户信息表：</p><table><thead><tr><th>用户编号</th><th>姓名</th><th>专业</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>兰州理工大学软件工程</td></tr><tr><td>2</td><td>李四</td><td>兰州龚家湾技校挖土机专业</td></tr></tbody></table><p>我想找兰州龚家湾技校的人，直接查询专业是不方便的，按照我目前的需求，<br>所以专业这个列还可以接着再拆分</p><table><thead><tr><th>用户编号</th><th>姓名</th><th>学校</th><th>专业名称</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>兰州理工大学</td><td>软件工程</td></tr><tr><td>2</td><td>李四</td><td>兰州龚家湾技校</td><td>挖土机专业</td></tr></tbody></table><p>这样就不错了，我想找按照学校过滤就方便多了</p><h1 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h1><p>第二范式（2NF）<strong>要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，</strong>如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，<strong>第二范式就是在第一范式的基础上属性完全依赖于主键</strong>。<br>比如我们在填报志愿（此处是假设，与现实填报志愿不符）的时候，我们的<strong>学生编号，学校编号，专业编号可以组成联合主键</strong>，可以确定一个填报志愿</p><p>申请志愿表</p><table><thead><tr><th>学生编号</th><th>姓名</th><th>学校编号</th><th>学校名称</th><th>学校邮编</th><th>专业编号</th><th>专业名称</th><th>填报时间</th><th>是否服从调剂</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>1</td><td>兰州理工大学</td><td>247000</td><td>1</td><td>软件工程</td><td>2014-6-25</td><td>否</td></tr><tr><td>2</td><td>李四</td><td>2</td><td>山东蓝翔技校</td><td>349000</td><td>2</td><td>挖土机专业</td><td>2014-6-26</td><td>否</td></tr></tbody></table><p>学生名称部分依赖于学生编号，学校邮编和学校名称部分依赖于学校编号，专业名称部分依赖于专业编号</p><p>下面我们对申请志愿表按照第二范式进行拆分</p><p>学生表</p><table><thead><tr><th>学生编号</th><th>姓名</th></tr></thead><tbody><tr><td>1</td><td>张三</td></tr><tr><td>2</td><td>李四</td></tr></tbody></table><p>学校表</p><table><thead><tr><th>学校编号</th><th>学校名称</th><th>学校邮编</th></tr></thead><tbody><tr><td>1</td><td>兰州理工大学</td><td>247000</td></tr><tr><td>2</td><td>山东蓝翔技校</td><td>349000</td></tr><tr><td>3</td><td>兰州龚家湾技校</td><td>249997</td></tr></tbody></table><p>专业表</p><table><thead><tr><th>专业编号</th><th>专业名称</th></tr></thead><tbody><tr><td>1</td><td>软件工程</td></tr><tr><td>2</td><td>挖土机专业</td></tr></tbody></table><p>新的申请志愿表</p><table><thead><tr><th>学生编号</th><th>学校编号</th><th>专业编号</th><th>填报时间</th><th>是否服从天调剂</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td><td>2014-6-25</td><td>否</td></tr><tr><td>2</td><td>2</td><td>2</td><td>2014-6-25</td><td>否</td></tr></tbody></table><h1 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h1><p>在2NF基础上，<strong>任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖</strong><br>第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。<br>简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。<br>假设我们的申请志愿表有个<strong>唯一编号作为主键，即志愿编号</strong></p><p><strong>非主属性学校名称是依赖于非主属性学校编号的，还有专业名称依赖于专业编号等</strong><br>申请志愿表</p><table><thead><tr><th>志愿编号</th><th>学生编号</th><th>姓名</th><th>学校编号</th><th>学校名称</th><th>学校邮编</th><th>专业编号</th><th>专业名称</th><th>填报时间</th><th>是否服从调剂</th></tr></thead><tbody><tr><td>001</td><td>1</td><td>张三</td><td>1</td><td>兰州理工大学</td><td>247000</td><td>1</td><td>软件工程</td><td>2014-6-25</td><td>否</td></tr><tr><td>002</td><td>2</td><td>李四</td><td>2</td><td>山东蓝翔技校</td><td>349000</td><td>2</td><td>挖土机专业</td><td>2014-6-26</td><td>否</td></tr></tbody></table><p>所以学校表，专业表拆分和第二范式类似</p><p>新的申请志愿表</p><table><thead><tr><th>志愿编号</th><th>学生编号</th><th>学校编号</th><th>专业编号</th><th>填报时间</th><th>是否服从天调剂</th></tr></thead><tbody><tr><td>001</td><td>1</td><td>1</td><td>1</td><td>2014-6-25</td><td>否</td></tr><tr><td>002</td><td>2</td><td>2</td><td>2</td><td>2014-6-25</td><td>否</td></tr></tbody></table><p>其他表的拆分与第二范式相同，第三范式其实是第二范式的一个子集，满足三范式就一定满足第二范式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越良好结构的数据库，可以减少数据冗余。&lt;/p&gt;
&lt;h1 id=&quot;第一范式&quot;&gt;&lt;a href=&quot;#第一范式&quot; class=&quot;header
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>CAP原则</title>
    <link href="http://yoursite.com/2018/11/26/CAP%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2018/11/26/CAP原则/</id>
    <published>2018-11-26T14:12:50.000Z</published>
    <updated>2018-11-26T15:23:35.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CAP原则"><a href="#CAP原则" class="headerlink" title="CAP原则"></a>CAP原则</h1><p>CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可兼得</p><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>分布式系统的CAP理论：理论首先把分布式系统中的三个特性进行了如下归纳：<br>● 一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）<br>● 可用性（A）：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）<br>● 分区容错性（P）：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。</p><h2 id="与可用的决择"><a href="#与可用的决择" class="headerlink" title="与可用的决择"></a>与可用的决择</h2><p>CAP理论就是说在分布式存储系统中，最多只能实现上面的两点。<br>而由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容忍性是我们必须需要实现的。<br>所以我们只能在一致性和可用性之间进行权衡，没有NoSQL系统能同时保证这三点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CAP原则&quot;&gt;&lt;a href=&quot;#CAP原则&quot; class=&quot;headerlink&quot; title=&quot;CAP原则&quot;&gt;&lt;/a&gt;CAP原则&lt;/h1&gt;&lt;p&gt;CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可
      
    
    </summary>
    
      <category term="分布式" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>查看端口被进程占用</title>
    <link href="http://yoursite.com/2018/11/26/%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E8%A2%AB%E8%BF%9B%E7%A8%8B%E5%8D%A0%E7%94%A8/"/>
    <id>http://yoursite.com/2018/11/26/查看端口被进程占用/</id>
    <published>2018-11-26T08:49:33.000Z</published>
    <updated>2018-11-26T09:03:50.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><p>查询20880被谁占用，在任务管理器找到相关进程（pid），结束任务即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\lenovo&gt;netstat -aon|findstr &quot;20880&quot;</span><br><span class="line">                                                                       pid                              </span><br><span class="line">  TCP    0.0.0.0:20880          0.0.0.0:0              LISTENING       15744</span><br><span class="line">  TCP    10.6.252.40:20880      10.6.252.40:62321      ESTABLISHED     15744</span><br><span class="line">  TCP    10.6.252.40:20880      10.6.252.40:62422      ESTABLISHED     15744</span><br><span class="line">  TCP    10.6.252.40:62321      10.6.252.40:20880      ESTABLISHED     11308</span><br><span class="line">  TCP    10.6.252.40:62422      10.6.252.40:20880      ESTABLISHED     2536</span><br><span class="line">  TCP    [::]:20880             [::]:0                 LISTENING       15744</span><br></pre></td></tr></table></figure></p><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><p>netstat -tunlp |grep 端口号，用于查看指定的端口号的进程情况，如查看80端口的情况，netstat -tunlp |grep 80<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze88p52tbioqel09nmrz ~]# netstat -tunlp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      20618/nginx: master</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1138/sshd</span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      20618/nginx: master</span><br><span class="line">udp        0      0 0.0.0.0:57373           0.0.0.0:*                           706/dhclient</span><br><span class="line">udp        0      0 0.0.0.0:68              0.0.0.0:*                           706/dhclient</span><br><span class="line">udp        0      0 172.17.66.158:123       0.0.0.0:*                           806/ntpd</span><br><span class="line">udp        0      0 127.0.0.1:123           0.0.0.0:*                           806/ntpd</span><br><span class="line">udp        0      0 0.0.0.0:123             0.0.0.0:*                           806/ntpd</span><br><span class="line">udp6       0      0 :::53341                :::*                                706/dhclient</span><br><span class="line">udp6       0      0 :::123                  :::*                                806/ntpd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@iz2ze88p52tbioqel09nmrz ~]# netstat -tunlp | grep 80</span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      20618/nginx: master</span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      20618/nginx: master</span><br><span class="line">udp        0      0 172.17.66.158:123       0.0.0.0:*                           806/ntpd</span><br><span class="line">udp        0      0 127.0.0.1:123           0.0.0.0:*                           806/ntpd</span><br><span class="line">udp        0      0 0.0.0.0:123             0.0.0.0:*                           806/ntpd</span><br><span class="line">udp6       0      0 :::123                  :::*                                806/ntpd</span><br></pre></td></tr></table></figure></p><p>说明一下几个参数的含义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-t (tcp) 仅显示tcp相关选项</span><br><span class="line">-u (udp)仅显示udp相关选项</span><br><span class="line">-n 拒绝显示别名，能显示数字的全部转化为数字</span><br><span class="line">-l 仅列出在Listen(监听)的服务状态</span><br><span class="line">-p 显示建立相关链接的程序名</span><br></pre></td></tr></table></figure></p><p>如果想解除端口占用 kill PID<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill 20618</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;windows&quot;&gt;&lt;a href=&quot;#windows&quot; class=&quot;headerlink&quot; title=&quot;windows&quot;&gt;&lt;/a&gt;windows&lt;/h1&gt;&lt;p&gt;查询20880被谁占用，在任务管理器找到相关进程（pid），结束任务即可&lt;br&gt;&lt;figure cl
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>spring源码赏析二</title>
    <link href="http://yoursite.com/2018/11/25/spring%E6%BA%90%E7%A0%81%E8%B5%8F%E6%9E%90%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/11/25/spring源码赏析二/</id>
    <published>2018-11-25T10:35:18.000Z</published>
    <updated>2018-11-25T11:37:43.192Z</updated>
    
    <content type="html"><![CDATA[<p>如果想要学习一个框架，第一步就是如何入手。怎样阅读spring源码呢，当然是从测试类入手啦！！！spring提供了非常全面的测试类，今天就从srping-beans.jar的RequiredAnnotationBeanPostProcessorTests测试类入手<br>下面是testWithRequiredPropertyOmitted方法源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testWithRequiredPropertyOmitted() &#123;</span><br><span class="line">try &#123;</span><br><span class="line">DefaultListableBeanFactory factory = new DefaultListableBeanFactory();</span><br><span class="line">BeanDefinition beanDef = BeanDefinitionBuilder</span><br><span class="line">.genericBeanDefinition(RequiredTestBean.class)</span><br><span class="line">.addPropertyValue(&quot;name&quot;, &quot;Rob Harrop&quot;)</span><br><span class="line">.addPropertyValue(&quot;favouriteColour&quot;, &quot;Blue&quot;)</span><br><span class="line">.addPropertyValue(&quot;jobTitle&quot;, &quot;Grand Poobah&quot;)</span><br><span class="line">.getBeanDefinition();</span><br><span class="line">factory.registerBeanDefinition(&quot;testBean&quot;, beanDef);</span><br><span class="line">factory.addBeanPostProcessor(new RequiredAnnotationBeanPostProcessor());</span><br><span class="line">factory.preInstantiateSingletons();    //在此抛出了异常</span><br><span class="line">fail(&quot;Should have thrown BeanCreationException&quot;);</span><br><span class="line">&#125;</span><br><span class="line">catch (BeanCreationException ex) &#123;</span><br><span class="line">String message = ex.getCause().getMessage();</span><br><span class="line">assertTrue(message.contains(&quot;Property&quot;));</span><br><span class="line">assertTrue(message.contains(&quot;age&quot;));</span><br><span class="line">assertTrue(message.contains(&quot;testBean&quot;));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>RequiredTestBean.java<br>注意age属性必须要注入的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">public static class RequiredTestBean implements BeanNameAware, BeanFactoryAware &#123;</span><br><span class="line"></span><br><span class="line">private String name;</span><br><span class="line"></span><br><span class="line">private int age;</span><br><span class="line"></span><br><span class="line">private String favouriteColour;</span><br><span class="line"></span><br><span class="line">private String jobTitle;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public int getAge() &#123;</span><br><span class="line">return age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Required</span><br><span class="line">public void setAge(int age) &#123;</span><br><span class="line">this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@MyRequired</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getFavouriteColour() &#123;</span><br><span class="line">return favouriteColour;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Required</span><br><span class="line">public void setFavouriteColour(String favouriteColour) &#123;</span><br><span class="line">this.favouriteColour = favouriteColour;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getJobTitle() &#123;</span><br><span class="line">return jobTitle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Required</span><br><span class="line">public void setJobTitle(String jobTitle) &#123;</span><br><span class="line">this.jobTitle = jobTitle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">@Required</span><br><span class="line">public void setBeanName(String name) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">@Required</span><br><span class="line">public void setBeanFactory(BeanFactory beanFactory) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static RequiredTestBean create() &#123;</span><br><span class="line">return new RequiredTestBean();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="RequiredAnnotationBeanPostProcessor-java-主要是这个处理类来做事情，"><a href="#RequiredAnnotationBeanPostProcessor-java-主要是这个处理类来做事情，" class="headerlink" title="RequiredAnnotationBeanPostProcessor.java 主要是这个处理类来做事情，"></a>RequiredAnnotationBeanPostProcessor.java 主要是这个处理类来做事情，</h1><p>代码太多，我贴出来最重要的一个方法，异常也是该方法抛出的，<strong>这是程序抛出异常的最后一步</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public PropertyValues postProcessPropertyValues(</span><br><span class="line">PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)</span><br><span class="line">throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">if (!this.validatedBeanNames.contains(beanName)) &#123;</span><br><span class="line">if (!shouldSkip(this.beanFactory, beanName)) &#123;</span><br><span class="line">List&lt;String&gt; invalidProperties = new ArrayList&lt;String&gt;();</span><br><span class="line">for (PropertyDescriptor pd : pds) &#123;</span><br><span class="line">if (isRequiredProperty(pd) &amp;&amp; !pvs.contains(pd.getName())) &#123;</span><br><span class="line">invalidProperties.add(pd.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (!invalidProperties.isEmpty()) &#123;</span><br><span class="line">throw new BeanInitializationException(buildExceptionMessage(invalidProperties, beanName));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">this.validatedBeanNames.add(beanName);</span><br><span class="line">&#125;</span><br><span class="line">return pvs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面我们开始debug:<br>前期是各种类的注入，异常是最后一步抛出来的，我们直接从最后一步开始</p><h1 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h1><p>factory.preInstantiateSingletons();<br>调用的是：DefaultListableBeanFactory.preInstantiateSingletons() line: 772<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void preInstantiateSingletons() throws BeansException &#123;</span><br><span class="line">....</span><br><span class="line">getBean(beanName);</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h1><p>调用DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 197<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object getBean(String name) throws BeansException &#123;</span><br><span class="line">return doGetBean(name, null, null, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h1><p>调用DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class<t>, Object[], boolean) line: 302<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">protected &lt;T&gt; T doGetBean(</span><br><span class="line">final String name, final Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly)</span><br><span class="line">throws BeansException &#123;</span><br><span class="line">....</span><br><span class="line">sharedInstance = getSingleton(beanName, new ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public Object getObject() throws BeansException &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return createBean(beanName, mbd, args);   //在回调方法里创建对象</span><br><span class="line">&#125;</span><br><span class="line">catch (BeansException ex) &#123;</span><br><span class="line">// Explicitly remove instance from singleton cache: It might have been put there</span><br><span class="line">// eagerly by the creation process, to allow for circular reference resolution.</span><br><span class="line">// Also remove any beans that received a temporary reference to the bean.</span><br><span class="line">destroySingleton(beanName);</span><br><span class="line">throw ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></p><h1 id="第四步："><a href="#第四步：" class="headerlink" title="第四步："></a>第四步：</h1><p>调用DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory&lt;?&gt;) line: 230<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public Object getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory) &#123;</span><br><span class="line">...</span><br><span class="line">singletonObject = singletonFactory.getObject();</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="第五步："><a href="#第五步：" class="headerlink" title="第五步："></a>第五步：</h1><p>调用AbstractBeanFactory$1.getObject() line: 306    ，回到第三步的ObjectFactory.getObject方法</p><h1 id="第六步："><a href="#第六步：" class="headerlink" title="第六步："></a>第六步：</h1><p>DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 482<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object createBean(String beanName, RootBeanDefinition mbd, Object[] args) throws BeanCreationException &#123;</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="第七步："><a href="#第七步：" class="headerlink" title="第七步："></a>第七步：</h1><p>调用DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 543<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args) &#123;</span><br><span class="line">...</span><br><span class="line">populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="第八步："><a href="#第八步：" class="headerlink" title="第八步："></a>第八步：</h1><p>调用DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).populateBean(String, RootBeanDefinition, BeanWrapper) line: 1214<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">protected void populateBean(String beanName, RootBeanDefinition mbd, BeanWrapper bw) &#123;</span><br><span class="line">....</span><br><span class="line">boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">boolean needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line"></span><br><span class="line">if (hasInstAwareBpps || needsDepCheck) &#123;</span><br><span class="line">PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">if (hasInstAwareBpps) &#123;</span><br><span class="line">for (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">if (bp instanceof InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName); //调用RequiredAnnotationBeanPostProcessor.postProcessPropertyValues方法</span><br><span class="line">if (pvs == null) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>到此，走到RequiredAnnotationBeanPostProcessor.postProcessPropertyValues方法，处理抛出了异常。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果想要学习一个框架，第一步就是如何入手。怎样阅读spring源码呢，当然是从测试类入手啦！！！spring提供了非常全面的测试类，今天就从srping-beans.jar的RequiredAnnotationBeanPostProcessorTests测试类入手&lt;br&gt;下
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>spring源码 赏析：一</title>
    <link href="http://yoursite.com/2018/11/22/spring%E6%BA%90%E7%A0%81%E4%B8%80/"/>
    <id>http://yoursite.com/2018/11/22/spring源码一/</id>
    <published>2018-11-22T12:27:43.000Z</published>
    <updated>2018-11-25T10:31:41.859Z</updated>
    
    <content type="html"><![CDATA[<p>超级接口标记，指示bean有资格由Spring容器通过回调式方法通知特定框架对象。实际的方法签名由单独的子接口确定，但是通常应该只包含一个接受单个参数的空返回方法。<br></p><p>注意，仅实现{@link Aware}不提供默认功能。<br>相反，处理必须显式地完成，<br>例如{@link org.springframework.beans…config.BeanPostProcessor BeanPostProcessor}。</p><p>参见{@link org.springframework.context…ApplicationContextAwareProcessor}</p><p>以及{@link org.springframework.beans…..AbstractAutowireCapableBeanFactory}</p><p>处理{@code *Aware}}接口回调的例子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package org.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Marker superinterface indicating that a bean is eligible to be</span><br><span class="line"> * notified by the Spring container of a particular framework object</span><br><span class="line"> * through a callback-style method. Actual method signature is</span><br><span class="line"> * determined by individual subinterfaces, but should typically</span><br><span class="line"> * consist of just one void-returning method that accepts a single</span><br><span class="line"> * argument.</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;Note that merely implementing &#123;@link Aware&#125; provides no default</span><br><span class="line"> * functionality. Rather, processing must be done explicitly, for example</span><br><span class="line"> * in a &#123;@link org.springframework.beans.factory.config.BeanPostProcessor BeanPostProcessor&#125;.</span><br><span class="line"> * Refer to &#123;@link org.springframework.context.support.ApplicationContextAwareProcessor&#125;</span><br><span class="line"> * and &#123;@link org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory&#125;</span><br><span class="line"> * for examples of processing &#123;@code *Aware&#125; interface callbacks.</span><br><span class="line"> *</span><br><span class="line"> * @author Chris Beams</span><br><span class="line"> * @since 3.1</span><br><span class="line"> */</span><br><span class="line">public interface Aware &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Java中isAssignableFrom的用法"><a href="#Java中isAssignableFrom的用法" class="headerlink" title="Java中isAssignableFrom的用法"></a>Java中isAssignableFrom的用法</h1><p>class1.isAssignableFrom(class2) 判定此 Class 对象所表示的类或接口与指定的 Class 参数所表示的类或接口是否相同，或是否是其超类或超接口。如果是则返回 true；否则返回 false。如果该 Class 表示一个基本类型，且指定的 Class 参数正是该 Class 对象，则该方法返回 true；否则返回 false。<br>class2是不是class1的子类或者子接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public String[] getBeanNamesForType(@Nullable ResolvableType type) &#123;</span><br><span class="line">boolean isFactoryType = false;</span><br><span class="line">if (type != null) &#123;</span><br><span class="line">Class&lt;?&gt; resolved = type.resolve();</span><br><span class="line">if (resolved != null &amp;&amp; FactoryBean.class.isAssignableFrom(resolved)) &#123;</span><br><span class="line">isFactoryType = true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">List&lt;String&gt; matches = new ArrayList&lt;&gt;();</span><br><span class="line">for (Map.Entry&lt;String, Object&gt; entry : this.beans.entrySet()) &#123;</span><br><span class="line">String name = entry.getKey();</span><br><span class="line">Object beanInstance = entry.getValue();</span><br><span class="line">if (beanInstance instanceof FactoryBean &amp;&amp; !isFactoryType) &#123;</span><br><span class="line">Class&lt;?&gt; objectType = ((FactoryBean&lt;?&gt;) beanInstance).getObjectType();</span><br><span class="line">if (objectType != null &amp;&amp; (type == null || type.isAssignableFrom(objectType))) &#123;</span><br><span class="line">matches.add(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">if (type == null || type.isInstance(beanInstance)) &#123;</span><br><span class="line">matches.add(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return StringUtils.toStringArray(matches);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="spring-BeanDefinitionBuilder-建造者模式构造BeanDefinition"><a href="#spring-BeanDefinitionBuilder-建造者模式构造BeanDefinition" class="headerlink" title="spring  BeanDefinitionBuilder 建造者模式构造BeanDefinition"></a>spring  BeanDefinitionBuilder 建造者模式构造BeanDefinition</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BeanDefinition beanDef = BeanDefinitionBuilder</span><br><span class="line">.genericBeanDefinition(RequiredTestBean.class)</span><br><span class="line">.addPropertyValue(&quot;name&quot;, &quot;Rob Harrop&quot;)</span><br><span class="line">.addPropertyValue(&quot;favouriteColour&quot;, &quot;Blue&quot;)</span><br><span class="line">.addPropertyValue(&quot;jobTitle&quot;, &quot;Grand Poobah&quot;)</span><br><span class="line">.getBeanDefinition();</span><br></pre></td></tr></table></figure><h1 id="关于spring5-ReactiveAdapterRegistry-编译后报错需要jdk9"><a href="#关于spring5-ReactiveAdapterRegistry-编译后报错需要jdk9" class="headerlink" title="关于spring5 ReactiveAdapterRegistry 编译后报错需要jdk9"></a>关于spring5 ReactiveAdapterRegistry 编译后报错需要jdk9</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The type java.util.concurrent.Flow$Publisher cannot be resolved. It is indirectly referenced from required .class files</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;超级接口标记，指示bean有资格由Spring容器通过回调式方法通知特定框架对象。实际的方法签名由单独的子接口确定，但是通常应该只包含一个接受单个参数的空返回方法。&lt;br&gt;&lt;/p&gt;&lt;p&gt;注意，仅实现{@link Aware}不提供默认功能。&lt;br&gt;相反，处理必须显式地完成，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何基于hexo搭建博客</title>
    <link href="http://yoursite.com/2018/11/21/%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/11/21/如何基于hexo搭建博客/</id>
    <published>2018-11-21T04:51:00.000Z</published>
    <updated>2018-11-21T05:10:58.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>基于hexo建站百度已有类似很多文章，我就不重复画瓢了。<br>不买服务器的话推荐gitee作为服务器托管。亲测gitee比github快10倍！！！</p><h1 id="hexo相关官方网站"><a href="#hexo相关官方网站" class="headerlink" title="hexo相关官方网站"></a>hexo相关官方网站</h1><p>我使用的hexo+gitee+next（主题）<br>   hexo：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a><br>   NexT（hexo主题）：<a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">https://theme-next.iissnan.com/</a></p><hr><p>如有问题请加QQ群：<strong>793379854（计算机课设不会做）</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;基于hexo建站百度已有类似很多文章，我就不重复画瓢了。&lt;br&gt;不买服务器的话推荐gitee作为服务器托管。亲测gitee比gith
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>搭建hexo遇到的问题</title>
    <link href="http://yoursite.com/2018/11/21/%E6%90%AD%E5%BB%BAhexo%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/11/21/搭建hexo遇到的问题/</id>
    <published>2018-11-21T01:19:18.000Z</published>
    <updated>2018-11-21T02:04:58.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何引用自己的文章"><a href="#如何引用自己的文章" class="headerlink" title="如何引用自己的文章"></a>如何引用自己的文章</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</span><br><span class="line">例：&#123;% post_link  关于ShSx-G的由来 ShSx.G %&#125;</span><br></pre></td></tr></table></figure><h1 id="发布的图片太大（1M的图片在githubpage中卡的不能看）"><a href="#发布的图片太大（1M的图片在githubpage中卡的不能看）" class="headerlink" title="发布的图片太大（1M的图片在githubpage中卡的不能看）"></a>发布的图片太大（1M的图片在githubpage中卡的不能看）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我的解决方案是将图片压缩，我的用的一个在线压缩图片的网址是：https://tinypng.com/</span><br><span class="line">亲测1M的可以压到200k，图片清晰度还可以</span><br></pre></td></tr></table></figure><h1 id="nginx作为hexo的服务器访问503"><a href="#nginx作为hexo的服务器访问503" class="headerlink" title="nginx作为hexo的服务器访问503"></a>nginx作为hexo的服务器访问503</h1><p>因为没有文件的访问权限<br>测试nginx配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze88p52tbioqel09nmrz ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure></p><p>打开nginx.conf ,修改user nginx  为user root，然后重新载入配置文件<br>命令：nginx -s reload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># For more information on configuration, see:</span><br><span class="line">#   * Official English Documentation: http://nginx.org/en/docs/</span><br><span class="line">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><br><span class="line"></span><br><span class="line">user root;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br></pre></td></tr></table></figure></p><p>nginx其他常用命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx                      # 启动 Nginx</span><br><span class="line">nginx -s reload            # 重新载入配置文件</span><br><span class="line">nginx -s reopen            # 重启 Nginx</span><br><span class="line">nginx -s stop              # 停止 Nginx</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何引用自己的文章&quot;&gt;&lt;a href=&quot;#如何引用自己的文章&quot; class=&quot;headerlink&quot; title=&quot;如何引用自己的文章&quot;&gt;&lt;/a&gt;如何引用自己的文章&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>关于ShSx.G的由来</title>
    <link href="http://yoursite.com/2018/11/19/%E5%85%B3%E4%BA%8EShSx-G%E7%9A%84%E7%94%B1%E6%9D%A5/"/>
    <id>http://yoursite.com/2018/11/19/关于ShSx-G的由来/</id>
    <published>2018-11-19T15:06:58.000Z</published>
    <updated>2018-11-21T05:14:01.531Z</updated>
    
    <content type="html"><![CDATA[<p>ShSx.G是我为我自己起的一个英文名字，鉴于我的英文知识比较匮乏，我也不知道这么拼写到底合不合法，反正都是<br>英文字母和英文标点符号，应该没有什么大问题。</p><h1 id="G的由来"><a href="#G的由来" class="headerlink" title="G的由来"></a>G的由来</h1><p>  我姓高，取高的拼音首字母G</p><h1 id="ShSx的由来"><a href="#ShSx的由来" class="headerlink" title="ShSx的由来"></a>ShSx的由来</h1><p>来源于四大名著的拼音首字母，《三国演义》（S），《红楼梦》（H），《水浒传》（S），《西游记》（X）。<br>忽略大小写，排名分先后，代表了四大名著在我心中的位置。</p><h2 id="三国演义"><a href="#三国演义" class="headerlink" title="三国演义"></a>三国演义</h2><hr><p>此桥段是皇叔一言不慎，差点被砍死的截图。论：<strong>少说话，多做事的重要性</strong></p><p><img src="/images/微信截图1.png" alt="Image text"><br><img src="/images/微信截图2.png" alt="Image text"><br><img src="/images/微信截图3.png" alt="Image text"><br><img src="/images/微信截图4.png" alt="Image text"><br><img src="/images/微信截图5.png" alt="Image text"><br><img src="/images/微信截图6.png" alt="Image text"><br><img src="/images/微信截图7.png" alt="Image text"><br><img src="/images/微信截图8.png" alt="Image text"><br><img src="/images/微信截图9.png" alt="Image text"></p><p><img src="/images/微信截图10.png" alt="Image text"><br><strong>皇叔：我X，我刚才说了什么？</strong></p><p><img src="/images/微信截图11.png" alt="Image text"><br><strong>刘表：这小子说谁呢？？</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ShSx.G是我为我自己起的一个英文名字，鉴于我的英文知识比较匮乏，我也不知道这么拼写到底合不合法，反正都是&lt;br&gt;英文字母和英文标点符号，应该没有什么大问题。&lt;/p&gt;
&lt;h1 id=&quot;G的由来&quot;&gt;&lt;a href=&quot;#G的由来&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="about" scheme="http://yoursite.com/categories/about/"/>
    
    
      <category term="ShSx.G" scheme="http://yoursite.com/tags/ShSx-G/"/>
    
  </entry>
  
  <entry>
    <title>About Me</title>
    <link href="http://yoursite.com/2018/11/18/about/"/>
    <id>http://yoursite.com/2018/11/18/about/</id>
    <published>2018-11-18T04:28:05.000Z</published>
    <updated>2018-12-02T08:34:22.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h1><hr><p>我是 <a href="/2018/11/19/关于ShSx-G的由来/" title="ShSx.G">ShSx.G</a> （主要是看大家都有），javaer，现在居住在北京，未来想去杭州发展。<br>鉴于我的英文名字不好拼，拼出来也不好听，所以还是不要叫我的英文名字了。<br>由于我擅长画瓢，可以叫我小瓢（^_^）！！！<br>如果用一个词形容自己的话，我觉得是：善良。</p><h1 id="教育背景"><a href="#教育背景" class="headerlink" title="教育背景"></a>教育背景</h1><hr><table><thead><tr><th>毕业院校</th><th>专业</th><th>时间</th><th>学历</th></tr></thead><tbody><tr><td>兰州理工大学</td><td>软件工程</td><td>2013-9至2017-6</td><td>本科</td></tr></tbody></table><h1 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h1><hr><table><thead><tr><th>工作单位</th><th>职位</th><th>时间</th></tr></thead><tbody><tr><td>用友</td><td>软件开发实习生</td><td>2016-12至2017-5</td></tr><tr><td>用友</td><td>软件开发工程师</td><td>2017-6至今</td></tr></tbody></table><h1 id="我做过什么"><a href="#我做过什么" class="headerlink" title="我做过什么"></a>我做过什么</h1><hr><ol><li>目前维护公司的ToB的审批流平台，与审批流相关的业务还算了解</li><li>工作中做过eclipse插件，以帮助公司的其他项目快速开发</li><li>使用java写了一个类似于有道词典的划屏取词的工具</li><li>使用Hexo+nignx+git搭建个人博客</li></ol><h1 id="我的希望"><a href="#我的希望" class="headerlink" title="我的希望"></a>我的希望</h1><hr><p>目前想在深圳或杭州找一份java开发的相关工作，如果有合适的岗位，可以给我发一份邮件，或者打电话聊聊，非常感谢(^_^)！<br>我的邮箱：<a href="mailto:1183782035@qq.com" target="_blank" rel="noopener">1183782035@qq.com</a><br>我的电话：13401002587</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;个人简介&quot;&gt;&lt;a href=&quot;#个人简介&quot; class=&quot;headerlink&quot; title=&quot;个人简介&quot;&gt;&lt;/a&gt;个人简介&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;我是 &lt;a href=&quot;/2018/11/19/关于ShSx-G的由来/&quot; title=&quot;ShSx.G&quot;&gt;ShSx
      
    
    </summary>
    
      <category term="about" scheme="http://yoursite.com/categories/about/"/>
    
    
      <category term="about" scheme="http://yoursite.com/tags/about/"/>
    
  </entry>
  
  <entry>
    <title>linux之ln的用法</title>
    <link href="http://yoursite.com/2018/11/12/linux%E4%B9%8Bln%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2018/11/12/linux之ln的用法/</id>
    <published>2018-11-12T13:07:00.000Z</published>
    <updated>2018-11-20T16:07:28.197Z</updated>
    
    <content type="html"><![CDATA[<p>1、软链接就是：ln –s 源文件 目标文件，<br>只会在选定的位置上生成一个文件的镜像，不会占用磁盘空间，类似与windows的快捷方式。</p><p>2、硬链接ln源文件目标文件，没有参数-s，<br>会在选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。</p><p>例：</p><pre><code>①ln -s /usr/software/nodejs/bin/npm /usr/local/bin/ ②ln -s /usr/software/nodejs/bin/node /usr/local/bin/</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、软链接就是：ln –s 源文件 目标文件，&lt;br&gt;只会在选定的位置上生成一个文件的镜像，不会占用磁盘空间，类似与windows的快捷方式。&lt;/p&gt;
&lt;p&gt;2、硬链接ln源文件目标文件，没有参数-s，&lt;br&gt;会在选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/11/08/hello-world/"/>
    <id>http://yoursite.com/2018/11/08/hello-world/</id>
    <published>2018-11-08T11:05:57.914Z</published>
    <updated>2018-11-20T16:08:39.598Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="hello" scheme="http://yoursite.com/categories/hello/"/>
    
    
  </entry>
  
  <entry>
    <title>2018年1月3日-学习日志</title>
    <link href="http://yoursite.com/2018/01/03/2018%E5%B9%B41%E6%9C%883%E6%97%A5-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://yoursite.com/2018/01/03/2018年1月3日-学习日志/</id>
    <published>2018-01-03T11:56:27.000Z</published>
    <updated>2018-11-21T12:49:53.697Z</updated>
    
    <content type="html"><![CDATA[<p>余尝曰：读《金瓶梅》而生怜悯心者，菩萨也；生畏惧心者，君子也；生欢喜心者，小人也；生效法心者，乃禽兽耳。</p><h1 id="Sql优化之in与join的爱恨情仇"><a href="#Sql优化之in与join的爱恨情仇" class="headerlink" title="Sql优化之in与join的爱恨情仇"></a>Sql优化之in与join的爱恨情仇</h1><p>流程设计相关流程查询原sql:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`icop-bpm`</span>.<span class="string">`act_re_model`</span> m <span class="keyword">WHERE</span> m.deployment_id_ <span class="keyword">IN</span> (<span class="keyword">SELECT</span> p.deployment_id_ <span class="keyword">FROM</span> act_re_procdef p <span class="keyword">WHERE</span> p.key_ <span class="keyword">IN</span>(</span><br><span class="line"> <span class="keyword">SELECT</span> c.<span class="string">`prodefkey`</span> <span class="keyword">FROM</span> <span class="string">`bpm_billconfig`</span> c <span class="keyword">WHERE</span> c.<span class="string">`orgid`</span> <span class="keyword">IN</span> (<span class="string">'first0001company'</span>) <span class="keyword">AND</span> c.<span class="string">`iscontainsub`</span>=<span class="number">1</span> </span><br><span class="line"> <span class="keyword">UNION</span></span><br><span class="line"> <span class="keyword">SELECT</span> c.<span class="string">`prodefkey`</span> <span class="keyword">FROM</span> <span class="string">`bpm_billconfig`</span> c  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`bpm_billconfig_org`</span> g <span class="keyword">ON</span> g.<span class="string">`configid`</span> = c.<span class="string">`id`</span> <span class="keyword">AND</span> g.<span class="string">`orgid`</span> =<span class="string">'8a83898e56f96bc6015703ab3032002b'</span> <span class="keyword">WHERE</span> c.<span class="string">`orgid`</span> <span class="keyword">IN</span> (<span class="string">'first0001company'</span>) <span class="keyword">AND</span> (c.<span class="string">`iscontainsub`</span>  <span class="keyword">IS</span>  <span class="literal">NULL</span> <span class="keyword">OR</span> c.<span class="string">`iscontainsub`</span>=<span class="number">0</span>))) </span><br><span class="line"> <span class="keyword">AND</span> name_ <span class="keyword">LIKE</span> <span class="string">'%%'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">CONVERT</span>( name_ <span class="keyword">USING</span> GBK);</span><br></pre></td></tr></table></figure></p><p>耗时:2.365sec<br>优化后sql:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`icop-bpm`</span>.<span class="string">`act_re_model`</span> m <span class="keyword">WHERE</span> m.deployment_id_ <span class="keyword">IN</span>(</span><br><span class="line"> <span class="keyword">SELECT</span> p.deployment_id_ <span class="keyword">FROM</span> act_re_procdef p <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> c.<span class="string">`prodefkey`</span> <span class="keyword">AS</span> prodefkey <span class="keyword">FROM</span> <span class="string">`bpm_billconfig`</span> c <span class="keyword">WHERE</span> c.<span class="string">`orgid`</span> <span class="keyword">IN</span> (<span class="string">'first0001company'</span>) <span class="keyword">AND</span> c.<span class="string">`iscontainsub`</span>=<span class="number">1</span> </span><br><span class="line"> <span class="keyword">UNION</span></span><br><span class="line"> <span class="keyword">SELECT</span> c.<span class="string">`prodefkey`</span> <span class="keyword">AS</span>  prodefkey <span class="keyword">FROM</span> <span class="string">`bpm_billconfig`</span> c  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`bpm_billconfig_org`</span> g <span class="keyword">ON</span> g.<span class="string">`configid`</span> = c.<span class="string">`id`</span> <span class="keyword">AND</span> g.<span class="string">`orgid`</span> =<span class="string">'8a83898e56f96bc6015703ab3032002b'</span> <span class="keyword">WHERE</span> c.<span class="string">`orgid`</span> <span class="keyword">IN</span> (<span class="string">'first0001company'</span>) <span class="keyword">AND</span> (c.<span class="string">`iscontainsub`</span>  <span class="keyword">IS</span>  <span class="literal">NULL</span> <span class="keyword">OR</span> c.<span class="string">`iscontainsub`</span>=<span class="number">0</span>)) g <span class="keyword">ON</span> g.prodefkey=p.<span class="string">`KEY_`</span>) <span class="keyword">AND</span> name_ <span class="keyword">LIKE</span> <span class="string">'%%'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">CONVERT</span>( name_ <span class="keyword">USING</span> GBK);</span><br></pre></td></tr></table></figure></p><p>耗时:0.045sec<br>总结:<strong>将流程部署表根据key的in查询修改为inner join 查询.</strong></p><h1 id="java时间转换成毫秒值"><a href="#java时间转换成毫秒值" class="headerlink" title="java时间转换成毫秒值"></a>java时间转换成毫秒值</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SimpleDateFormat dateformat;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getMills</span><span class="params">()</span></span>&#123;</span><br><span class="line">    dateformat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>); <span class="comment">//时间格式</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        time = dateformat.parse(<span class="string">"1971-01-01 00:00:00"</span>).getTime();<span class="comment">//格式转换</span></span><br><span class="line">        System.out.println(time);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (java.text.ParseException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> time;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Js-Date-对象原型添加格式化"><a href="#Js-Date-对象原型添加格式化" class="headerlink" title="Js Date 对象原型添加格式化"></a>Js Date 对象原型添加格式化</h1><p>// 对Date的扩展，将 Date 转化为指定格式的String<br>// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，<br>// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)<br>// 例子：<br>// (new Date()).Format(“yyyy-MM-dd hh:mm:ss.S”) ==&gt; 2006-07-02 08:09:04.423<br>// (new Date()).Format(“yyyy-M-d h:m:s.S”)      ==&gt; 2006-7-2 8:9:4.18<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.Format = <span class="function"><span class="keyword">function</span> (<span class="params">fmt</span>) </span>&#123; <span class="comment">//author: nature</span></span><br><span class="line">    <span class="keyword">var</span> o = &#123;</span><br><span class="line">        <span class="string">"M+"</span>: <span class="keyword">this</span>.getMonth() + <span class="number">1</span>, <span class="comment">//月份 </span></span><br><span class="line">        <span class="string">"d+"</span>: <span class="keyword">this</span>.getDate(), <span class="comment">//日 </span></span><br><span class="line">        <span class="string">"h+"</span>: <span class="keyword">this</span>.getHours(), <span class="comment">//小时 </span></span><br><span class="line">        <span class="string">"m+"</span>: <span class="keyword">this</span>.getMinutes(), <span class="comment">//分 </span></span><br><span class="line">        <span class="string">"s+"</span>: <span class="keyword">this</span>.getSeconds(), <span class="comment">//秒 </span></span><br><span class="line">        <span class="string">"q+"</span>: <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">//季度 </span></span><br><span class="line">        <span class="string">"S"</span>: <span class="keyword">this</span>.getMilliseconds() <span class="comment">//毫秒 </span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt)) fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear() + <span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + k + <span class="string">")"</span>).test(fmt)) fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length == <span class="number">1</span>) ? (o[k]) : ((<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length)));</span><br><span class="line">    <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Springmvc-PathVariable-注解用法"><a href="#Springmvc-PathVariable-注解用法" class="headerlink" title="Springmvc @PathVariable()注解用法"></a>Springmvc @PathVariable()注解用法</h1><p>通过@ PathVariable注解获取的参数如果有小数点，会自动过滤掉小数点和小数点后面的字符，两种方法可以解决，<br>第一种：<br>1、问题<br>SpringMVC项目中通过下面的ＵＲＬ进行GET请求。当version有多个小数点的时候。如version为1.0.1008。后台通过@PathVariable来获取version等于1.0。会丢失部分数据。<br>URL:<br><a href="http://host_ip/consumer/appVersion/phone/android/download/{version}" target="_blank" rel="noopener">http://host_ip/consumer/appVersion/phone/android/download/{version}</a><br>Controller:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"android/download/&#123;version&#125;"</span>,method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(HttpSession session,HttpServletResponse response,@PathVariable(<span class="string">"version"</span>)</span>String version)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、解决方案<br>在version段后增加一个静态的字符段，这个段没有任何意义，可以为任意字符。<br>URL:<br><a href="http://host_ip/consumer/appVersion/phone/android/download/{version}/static_str" target="_blank" rel="noopener">http://host_ip/consumer/appVersion/phone/android/download/{version}/static_str</a><br>问题虽然解决了，但毕竟URL后多了个小尾巴，心情不愉悦。<br>再次谷哥。<br>参考：<br><a href="http://stackoverflow.com/questions/3526523/spring-mvc-pathvariable-getting-truncated" target="_blank" rel="noopener">http://stackoverflow.com/questions/3526523/spring-mvc-pathvariable-getting-truncated</a><br>URL不加小尾巴。<br>在@RequestMapping的value中使用SpEL来表示，value中的{version}换成{version:.+}。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"android/download/&#123;version:.+&#125;"</span>,method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(HttpSession session,HttpServletResponse response,@PathVariable(<span class="string">"version"</span>)</span>String version)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Mysql在windows上的安装"><a href="#Mysql在windows上的安装" class="headerlink" title="Mysql在windows上的安装"></a>Mysql在windows上的安装</h1><p>Mysql windows上的安装分为两种：<br>第一种是msi安装，该安装时直接下一步就行，如果以前安装过，在安装过程出现问题，记得删除注册表。<br>第二种是免安装的，解压压缩文件包，但是需对my.ini文件进行配置，basedir和datadir是必须的，<br>（1）    以管理员身份运行cmd，进入到bin目录下<br>（2）    复制一个my-default.ini,名称为my.ini,配置basedir路径和datadir路径<br>（3）    安装：执行 mysqld install, 正确的提示语为Service successfully installed.<br>（4）    启动：net start mysql  启动成功：MySQL 服务已经启动成功。</p><h1 id="Npm命令npm-install-报错"><a href="#Npm命令npm-install-报错" class="headerlink" title="Npm命令npm install 报错"></a>Npm命令npm install 报错</h1><p>今天遇到一个问题，在npm install 的时候报错，我以为是远程库的问题，换了淘宝镜像之后还是不行<br>最后在该路径下打印报错信息：<br>D:\Program Files\nodejs\node_modules\npm\node_modules\pacote\node_modules\make-fetch-happen\node_modules\node-fetch-npm\node_modules\json-parse-better-errors<br>Index.js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    return JSON.parse(txt, reviver)</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">console.log(&quot;error message：&quot;+txt);</span><br></pre></td></tr></table></figure></p><p>后来发现是缓存的问题：<br>执行给命令：清理缓存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean –force</span><br></pre></td></tr></table></figure></p><p>然后在 npm install</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;余尝曰：读《金瓶梅》而生怜悯心者，菩萨也；生畏惧心者，君子也；生欢喜心者，小人也；生效法心者，乃禽兽耳。&lt;/p&gt;
&lt;h1 id=&quot;Sql优化之in与join的爱恨情仇&quot;&gt;&lt;a href=&quot;#Sql优化之in与join的爱恨情仇&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017年12月28日-学习日志</title>
    <link href="http://yoursite.com/2017/12/28/2017%E5%B9%B412%E6%9C%8828%E6%97%A5-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://yoursite.com/2017/12/28/2017年12月28日-学习日志/</id>
    <published>2017-12-28T12:59:03.000Z</published>
    <updated>2018-11-21T13:08:26.468Z</updated>
    
    <content type="html"><![CDATA[<p>时间是不会等待的，无论发生什么事，它都会一如既往的向前走。</p><h1 id="如何配置SLF4J不同的日志实现"><a href="#如何配置SLF4J不同的日志实现" class="headerlink" title="如何配置SLF4J不同的日志实现"></a>如何配置SLF4J不同的日志实现</h1><p>最近使用在学习shiro，在网上找了一个demo，在test的时候总是报错<br>但是test是通过的<br><strong>百度知道上看到一篇很好的回答</strong>：<br>使用slf4j库作为你的Java应用日志API层有很多好处，这里我会展示一小部分关于如何使用和配置它的例子。<br>你可以把slf4j想成一个Java的接口，然后你需要实现这个接口，从而在运行时提供实际的日志记录，例如把日志写到控制台(STDOUT)或者一个文件上等等。每种实现（或成为绑定）都显而易见地有他们自己的方式来配置日志的输出，但是你的应用对实现者并无感知并且一直使用相同的org.slf4j.Logger API。让我们看看如何在实际中使用它。<br>使用slf4j做简单的日志记录<br>创建基于Maven的工程，在pom.xml中添加如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.7.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>现在你可以在你的Java代码中这样使用Logger<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package deng;</span><br><span class="line"></span><br><span class="line">import org.slf4j.*;</span><br><span class="line"></span><br><span class="line">public class Hello &#123;</span><br><span class="line">    static Logger LOGGER = LoggerFactory.getLogger(Hello.class);</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        for (int i = 0; i &lt; 10; i++)</span><br><span class="line">            if (i % 2 == 0)</span><br><span class="line">                LOGGER.info(&quot;Hello &#123;&#125;&quot;, i);</span><br><span class="line">            else</span><br><span class="line">                LOGGER.debug(&quot;I am on index &#123;&#125;&quot;, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码可以编译通过，但是当你运行它时，你会看到这样的输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash&gt; java deng.Hello</span><br><span class="line">SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.</span><br><span class="line">SLF4J: Defaulting to no-operation (NOP) logger implementation</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.</span><br></pre></td></tr></table></figure></p><p>上面的意思是，在运行时，你没有做日志的实现（或者说日志的绑定），所以slf4j简简单单的使用了一个什么也不会做的空实现。<br>为了看到正确的输出，你应该尝试使用一个简单（simple）的实现，这个实现根本不需要任何配置！只要回到pom.xml然后添加如下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.7.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>现在你可以在控制台(STDOUT)看见INFO级别的日志输出了。这个简单的logger会默认显示任何INFO或者更高级别的信息。想要看DEBUG级别的信息，你需要在Java启动时传入这个系统属性(system property)<br>-Dorg.slf4j.simpleLogger.defaultLogLevel=DEBUG<br>使用slf4j与Log4j日志<br>现在我们可以试验并更换不同的日志实现，但你的程序代码可以保持不变。<br>我们要做的是用另一个流行的日志实现来替换掉slf4j-simple，比如Log4j。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.7.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>又一次，我们必须对我们选的每一个日志实现做配置。在这个例子中，我们需要一个文件src/main/resources/log4j.properties。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG, STDOUT</span><br><span class="line">log4j.logger.deng=INFO</span><br><span class="line">log4j.appender.STDOUT=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.STDOUT.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.STDOUT.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n</span><br></pre></td></tr></table></figure></p><p>重运行你的程序，你会看到同样的输出结果。<br>使用slf4j和JDK日志<br>JDK实际上带有一个日志包，你可以在pom.xml中替换为另一个日志实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;slf4j-jdk14&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.7.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>现在JDK日志的配置起来有一点困难。这里不仅需要一个配置文件src/main/resources/logging.properties，你还需要添加一个系统属性<br>-Djava.util.logging.config.file=logging.properties<br>这是一个logging.properties的示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">level=INFO</span><br><span class="line">handlers=java.util.logging.ConsoleHandler</span><br><span class="line">java.util.logging.ConsoleHandler.level=FINEST</span><br><span class="line">deng.level=FINEST</span><br></pre></td></tr></table></figure></p><p>使用slf4j和Logback日志<br>Logback日志实现是一个高质量的实现。如果你想在项目中写认真的代码，你会想要考虑这中方式。还是修改你的pom.xml文件，替换成这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.13&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>这是一个简单的配置src/main/resources/logback.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;logger name=&quot;deng&quot; level=&quot;DEBUG&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>用slf4j写你自己的日志库<br>如果你正在很多终端用户(END USER)提供Java库，那么让你的项目仅依赖slf4j-api绝对是个好想法，然后让你的用户在他们开发和运营环境中选择任意的日志实现。作为终端用户，他们可以快速地从上面提到的日志库中选择一个，并且从他们自己喜欢的日志实现的特性中受益。<br>slf4j log4j logback之间的关系，哪个更好些<br>SLF4J(The Simple Logging Facade for Java)<br>官方文档是这样说明的</p><p>The Simple Logging Facade for Java (SLF4J) serves as a simple facade or abstraction for various logging frameworks, such as java.util.logging, logback and log4j. SLF4J allows the end-user to plug in the desired logging framework at deployment time. Note that SLF4J-enabling your library/application implies the addition of only a single mandatory dependency, namely slf4j-api-1.7.22.jar.</p><p>简答的讲就是slf4j是一系列的日志接口，而log4j logback是具体实现了的日志框架。</p><p>因为是接口，所以在项目中如果你不引用log4j 、logback或者其它日志框架你会发现，控制台的输出是这样的</p><p>从运行结果可以看到，由于没有给出具体的logger实现，无法在控制台输出日志。也就是说我们在具体开发中，需要绑定一个日志框架，才能正常的使用slf4j。</p><p>log4j和logback呢<br>而log4j和logback就是两个受欢迎的日志框架。但两者又有不同。<br>•    log4j是apache实现的一个开源日志组件。（Wrapped implementations）<br>•    logback同样是由log4j的作者设计完成的，拥有更好的特性，用来取代log4j的一个日志框架。是slf4j的原生实现。（Native implementations）</p><p>接下来一起看一下应用程序对日志框架的调用关系，看下图</p><p>可以看到logback是直接实现了slf4j的接口，而log4j不是对slf4j的原生实现，所以slf4j api在调用log4j时需要一个适配层。</p><p>官方文档对logback是这样说的:</p><p>Native implementation There are also SLF4J bindings external to the SLF4J project, e.g.logback which implements SLF4J natively. Logback’sch.qos.logback.classic.Logger class is a direct implementation of SLF4J’sorg.slf4j.Logger interface.Thus, using SLF4J in conjunction with logback involves strictly zero memory and computational overhead. </p><p>也就是说logback实现slf4j是不消耗内存和计算开销的。</p><p>最后总结一下：</p><ol><li>slf4j是java的一个日志门面，实现了日志框架一些通用的api，log4j和logback是具体的日志框架。</li><li>他们可以单独的使用，也可以绑定slf4j一起使用。<br>•    单独使用。分别调用框架自己的方法来输出日志信息。<br>•    绑定slf4j一起使用。调用slf4j的api来输入日志信息，具体使用与底层日志框架无关（需要底层框架的配置文件）<br>显然这里我们不推荐单独使用日志框架。假设项目中已经使用了log4j，而我们此时加载了一个类库，而这个类库依赖另一个日志框架。这个时候我们就需要维护两个日志框架，这是一个非常麻烦的事情。而使用了slf4j就不同了，由于应用调用的抽象层的api，与底层日志框架是无关的，因此可以任意更换日志框架。<br>解密Log4j、SLF4J、Common-logging的区别<br>前面有一篇日志中简单的介绍了 log4j，同时也介绍了它与commons-logging的关系，但是突然冒出来一个slf4j，并且slf4j有取代commons-logging的趋势，所以，我们可以推知slf4j与commons-logging的作用应该<br>相差不大的。 好，下面开始先讲讲slf4j。<br>1.slf4j<br>他只提供一个核心slf4j api(就是slf4j-api.jar包)，这个包只有日志的接口，并没有实现，所以如果要使用就得再给它提供一个实现了些接口的日志包，比 如：log4j,common logging,jdk log日志实现包等，但是这些日志实现又不能通过接口直接调用，实现上他们根本就和slf4j-api不一致，因此slf4j又增加了一层来转换各日志实 现包的使用，当然slf4j-simple除外。</li></ol><p>slf4j+log4j组合使用模式：</p><ol><li>slf4j-api-1.5.11.jar</li><li>slf4j-log4j12-1.5.11.jar</li><li>log4j-1.2.15.jar</li><li>log4j.properties(也可以是 log4j.xml)</li></ol><p>JCL+Log4J组合使用模式（即commons-logging+log4j）：</p><ol><li>commons-logging-1.1.jar</li><li>log4j-1.2.15.jar</li><li>log4j.properties</li></ol><p>2.不同的获取logger的方式<br>log4j：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.log4j.Logger;</span><br><span class="line">Logger logger= Logger.getLogger(xx.class);</span><br></pre></td></tr></table></figure></p><p>slf4j+log4j：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import  org.slf4j.Logger;</span><br><span class="line">import  org.slf4j.LoggerFactory;</span><br><span class="line">Logger logger = LoggerFactory.getLogger(xx.class);</span><br></pre></td></tr></table></figure></p><p>jcl+log4j:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.logging.Log; </span><br><span class="line">import org.apache.commons.logging.LogFactory;</span><br><span class="line">private static Log log = LogFactory.getLog(xx.class);</span><br></pre></td></tr></table></figure></p><p>注意：common-longing是默认支持log4j的，使用其他日志工具需要做下面的配置：common-logging.properties<br>        org.apache.commons.logging.Log=org.apache.commons.logging.impl.Log4JCategoryLog</p><p>3.总结</p><p>总的来说，slf4j与commons-logging只是一个日志门面，实际还是要依赖真正的日志库log4j，虽然slf4j和commons-loggins自带了日志库，但是毕竟log4j才是最强大的。<br><strong>因为以前没有博客，我都是将自己喜欢的内容粘贴到word文档中，这是从以前word导入过来的内容，原url找不到了，不是原创，感谢开源，感谢分享，侵删！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时间是不会等待的，无论发生什么事，它都会一如既往的向前走。&lt;/p&gt;
&lt;h1 id=&quot;如何配置SLF4J不同的日志实现&quot;&gt;&lt;a href=&quot;#如何配置SLF4J不同的日志实现&quot; class=&quot;headerlink&quot; title=&quot;如何配置SLF4J不同的日志实现&quot;&gt;&lt;/a&gt;如
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017年12月14日-学习日志</title>
    <link href="http://yoursite.com/2017/12/14/2017%E5%B9%B412%E6%9C%8814%E6%97%A5-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://yoursite.com/2017/12/14/2017年12月14日-学习日志/</id>
    <published>2017-12-14T13:11:05.000Z</published>
    <updated>2018-11-21T13:17:36.336Z</updated>
    
    <content type="html"><![CDATA[<p>慢慢来不要急，你想要的都会有的</p><h1 id="Js自调"><a href="#Js自调" class="headerlink" title="Js自调"></a>Js自调</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!function ($) &#123; //code her&#125;(window.jQuery);高级的自调函数的一种写法</span><br><span class="line">(function ($) &#123; //code her&#125;)(window.jQuery) 普通自调函数的一种写法</span><br></pre></td></tr></table></figure><p>括号使得里面的匿名函数变成函数表达式<br>！的运算优先级低于括号朔所以可以达到相同的效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var Name=function(parameters)&#123;//这里是块级作用域&#125;;Name();//调用匿名函数</span><br></pre></td></tr></table></figure></p><p>函数表达式是在运行中以引用的方式赋值给一个变量的，如上面的函数创建的方式。而这里函数表达式和函数声明是不一样的，函数声明的通常形式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function Name(parameters)&#123; //code here&#125;</span><br></pre></td></tr></table></figure></p><p>函数声明会在程序刚开始运行的时候会被提升（所以可以在执行之后声明），但是并不执行，直到被调用的时候再执行。 </p><h1 id="Js-表达式"><a href="#Js-表达式" class="headerlink" title="Js()表达式"></a>Js()表达式</h1><p><img src="/images/17121401.png" alt="Image text"><br>总结：()运算，返回的是括号里面的最后一个参数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;慢慢来不要急，你想要的都会有的&lt;/p&gt;
&lt;h1 id=&quot;Js自调&quot;&gt;&lt;a href=&quot;#Js自调&quot; class=&quot;headerlink&quot; title=&quot;Js自调&quot;&gt;&lt;/a&gt;Js自调&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>马说</title>
    <link href="http://yoursite.com/2017/11/25/%E9%A9%AC%E8%AF%B4/"/>
    <id>http://yoursite.com/2017/11/25/马说/</id>
    <published>2017-11-25T12:59:22.000Z</published>
    <updated>2018-11-25T13:02:32.215Z</updated>
    
    <content type="html"><![CDATA[<p><center><font color="grey" size="16"><strong>马说</strong></font></center></p><p><center><font color="grey"><strong>【作者】韩愈 【朝代】唐</strong></font></center><br>世有伯乐，然后有千里马。千里马常有，而伯乐不常有。故虽有名马，祇辱于奴隶人之手，骈死于槽枥之间，不以千里称也。</p><p>马之千里者，一食或尽粟一石。食马者不知其能千里而食也。是马也，虽有千里之能，食不饱，力不足，才美不外见，且欲与常马等不可得，安求其能千里也？</p><p>策之不以其道，食之不能尽其材，鸣之而不能通其意，执策而临之，曰：“天下无马！”呜呼！其真无马邪？其真不知马也！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;center&gt;&lt;font color=&quot;grey&quot; size=&quot;16&quot;&gt;&lt;strong&gt;马说&lt;/strong&gt;&lt;/font&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;font color=&quot;grey&quot;&gt;&lt;strong&gt;【作者】韩愈 【朝代】唐&lt;/strong&gt;&lt;
      
    
    </summary>
    
      <category term="思考" scheme="http://yoursite.com/categories/%E6%80%9D%E8%80%83/"/>
    
    
      <category term="思考" scheme="http://yoursite.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
</feed>
